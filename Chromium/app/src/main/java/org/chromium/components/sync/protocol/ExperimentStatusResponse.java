// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment_status.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Response to an experiment status request.
 * </pre>
 *
 * Protobuf type {@code sync_pb.ExperimentStatusResponse}
 */
public  final class ExperimentStatusResponse extends
    com.google.protobuf.GeneratedMessageLite<
        ExperimentStatusResponse, ExperimentStatusResponse.Builder> implements
    // @@protoc_insertion_point(message_implements:sync_pb.ExperimentStatusResponse)
    ExperimentStatusResponseOrBuilder {
  private ExperimentStatusResponse() {
    pollIntervalSeconds_ = 3600;
    experiment_ = emptyProtobufList();
  }
  private int bitField0_;
  public static final int POLL_INTERVAL_SECONDS_FIELD_NUMBER = 1;
  private int pollIntervalSeconds_;
  /**
   * <pre>
   * Minimal time to wait before issuing another request.
   * </pre>
   *
   * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
   */
  public boolean hasPollIntervalSeconds() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Minimal time to wait before issuing another request.
   * </pre>
   *
   * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
   */
  public int getPollIntervalSeconds() {
    return pollIntervalSeconds_;
  }
  /**
   * <pre>
   * Minimal time to wait before issuing another request.
   * </pre>
   *
   * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
   */
  private void setPollIntervalSeconds(int value) {
    bitField0_ |= 0x00000001;
    pollIntervalSeconds_ = value;
  }
  /**
   * <pre>
   * Minimal time to wait before issuing another request.
   * </pre>
   *
   * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
   */
  private void clearPollIntervalSeconds() {
    bitField0_ = (bitField0_ & ~0x00000001);
    pollIntervalSeconds_ = 3600;
  }

  public static final int EXPERIMENT_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.components.sync.protocol.ExperimentsSpecifics> experiment_;
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  public java.util.List<org.chromium.components.sync.protocol.ExperimentsSpecifics> getExperimentList() {
    return experiment_;
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  public java.util.List<? extends org.chromium.components.sync.protocol.ExperimentsSpecificsOrBuilder> 
      getExperimentOrBuilderList() {
    return experiment_;
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  public int getExperimentCount() {
    return experiment_.size();
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  public org.chromium.components.sync.protocol.ExperimentsSpecifics getExperiment(int index) {
    return experiment_.get(index);
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  public org.chromium.components.sync.protocol.ExperimentsSpecificsOrBuilder getExperimentOrBuilder(
      int index) {
    return experiment_.get(index);
  }
  private void ensureExperimentIsMutable() {
    if (!experiment_.isModifiable()) {
      experiment_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(experiment_);
     }
  }

  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void setExperiment(
      int index, org.chromium.components.sync.protocol.ExperimentsSpecifics value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureExperimentIsMutable();
    experiment_.set(index, value);
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void setExperiment(
      int index, org.chromium.components.sync.protocol.ExperimentsSpecifics.Builder builderForValue) {
    ensureExperimentIsMutable();
    experiment_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void addExperiment(org.chromium.components.sync.protocol.ExperimentsSpecifics value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureExperimentIsMutable();
    experiment_.add(value);
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void addExperiment(
      int index, org.chromium.components.sync.protocol.ExperimentsSpecifics value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureExperimentIsMutable();
    experiment_.add(index, value);
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void addExperiment(
      org.chromium.components.sync.protocol.ExperimentsSpecifics.Builder builderForValue) {
    ensureExperimentIsMutable();
    experiment_.add(builderForValue.build());
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void addExperiment(
      int index, org.chromium.components.sync.protocol.ExperimentsSpecifics.Builder builderForValue) {
    ensureExperimentIsMutable();
    experiment_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void addAllExperiment(
      java.lang.Iterable<? extends org.chromium.components.sync.protocol.ExperimentsSpecifics> values) {
    ensureExperimentIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, experiment_);
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void clearExperiment() {
    experiment_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  private void removeExperiment(int index) {
    ensureExperimentIsMutable();
    experiment_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, pollIntervalSeconds_);
    }
    for (int i = 0; i < experiment_.size(); i++) {
      output.writeMessage(2, experiment_.get(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, pollIntervalSeconds_);
    }
    for (int i = 0; i < experiment_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, experiment_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.ExperimentStatusResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.ExperimentStatusResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Response to an experiment status request.
   * </pre>
   *
   * Protobuf type {@code sync_pb.ExperimentStatusResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.ExperimentStatusResponse, Builder> implements
      // @@protoc_insertion_point(builder_implements:sync_pb.ExperimentStatusResponse)
      org.chromium.components.sync.protocol.ExperimentStatusResponseOrBuilder {
    // Construct using org.chromium.components.sync.protocol.ExperimentStatusResponse.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Minimal time to wait before issuing another request.
     * </pre>
     *
     * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
     */
    public boolean hasPollIntervalSeconds() {
      return instance.hasPollIntervalSeconds();
    }
    /**
     * <pre>
     * Minimal time to wait before issuing another request.
     * </pre>
     *
     * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
     */
    public int getPollIntervalSeconds() {
      return instance.getPollIntervalSeconds();
    }
    /**
     * <pre>
     * Minimal time to wait before issuing another request.
     * </pre>
     *
     * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
     */
    public Builder setPollIntervalSeconds(int value) {
      copyOnWrite();
      instance.setPollIntervalSeconds(value);
      return this;
    }
    /**
     * <pre>
     * Minimal time to wait before issuing another request.
     * </pre>
     *
     * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
     */
    public Builder clearPollIntervalSeconds() {
      copyOnWrite();
      instance.clearPollIntervalSeconds();
      return this;
    }

    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public java.util.List<org.chromium.components.sync.protocol.ExperimentsSpecifics> getExperimentList() {
      return java.util.Collections.unmodifiableList(
          instance.getExperimentList());
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public int getExperimentCount() {
      return instance.getExperimentCount();
    }/**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public org.chromium.components.sync.protocol.ExperimentsSpecifics getExperiment(int index) {
      return instance.getExperiment(index);
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder setExperiment(
        int index, org.chromium.components.sync.protocol.ExperimentsSpecifics value) {
      copyOnWrite();
      instance.setExperiment(index, value);
      return this;
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder setExperiment(
        int index, org.chromium.components.sync.protocol.ExperimentsSpecifics.Builder builderForValue) {
      copyOnWrite();
      instance.setExperiment(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder addExperiment(org.chromium.components.sync.protocol.ExperimentsSpecifics value) {
      copyOnWrite();
      instance.addExperiment(value);
      return this;
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder addExperiment(
        int index, org.chromium.components.sync.protocol.ExperimentsSpecifics value) {
      copyOnWrite();
      instance.addExperiment(index, value);
      return this;
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder addExperiment(
        org.chromium.components.sync.protocol.ExperimentsSpecifics.Builder builderForValue) {
      copyOnWrite();
      instance.addExperiment(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder addExperiment(
        int index, org.chromium.components.sync.protocol.ExperimentsSpecifics.Builder builderForValue) {
      copyOnWrite();
      instance.addExperiment(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder addAllExperiment(
        java.lang.Iterable<? extends org.chromium.components.sync.protocol.ExperimentsSpecifics> values) {
      copyOnWrite();
      instance.addAllExperiment(values);
      return this;
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder clearExperiment() {
      copyOnWrite();
      instance.clearExperiment();
      return this;
    }
    /**
     * <pre>
     * The experiments that the client has asked for, with each experiment
     * containing exactly one experiment flag.  The client can inspect the
     * embedded flag to obtain the experiment status.  Note that the number of
     * experiments should be less than or equal to the number of experiment_name
     * sent in the request since it is possible that there is no experiment
     * matching an experiment_name.
     * </pre>
     *
     * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
     */
    public Builder removeExperiment(int index) {
      copyOnWrite();
      instance.removeExperiment(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:sync_pb.ExperimentStatusResponse)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.ExperimentStatusResponse();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        experiment_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.ExperimentStatusResponse other = (org.chromium.components.sync.protocol.ExperimentStatusResponse) arg1;
        pollIntervalSeconds_ = visitor.visitInt(
            hasPollIntervalSeconds(), pollIntervalSeconds_,
            other.hasPollIntervalSeconds(), other.pollIntervalSeconds_);
        experiment_= visitor.visitList(experiment_, other.experiment_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                pollIntervalSeconds_ = input.readInt32();
                break;
              }
              case 18: {
                if (!experiment_.isModifiable()) {
                  experiment_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(experiment_);
                }
                experiment_.add(
                    input.readMessage(org.chromium.components.sync.protocol.ExperimentsSpecifics.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.ExperimentStatusResponse.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:sync_pb.ExperimentStatusResponse)
  private static final org.chromium.components.sync.protocol.ExperimentStatusResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ExperimentStatusResponse();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.ExperimentStatusResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ExperimentStatusResponse> PARSER;

  public static com.google.protobuf.Parser<ExperimentStatusResponse> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

