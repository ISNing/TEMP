// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing_message.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Message for sending between devices in Sharing.
 * Next tag: 12
 * </pre>
 *
 * Protobuf type {@code chrome_browser_sharing.SharingMessage}
 */
public  final class SharingMessage extends
    com.google.protobuf.GeneratedMessageLite<
        SharingMessage, SharingMessage.Builder> implements
    // @@protoc_insertion_point(message_implements:chrome_browser_sharing.SharingMessage)
    SharingMessageOrBuilder {
  private SharingMessage() {
    senderGuid_ = "";
    senderDeviceName_ = "";
  }
  private int payloadCase_ = 0;
  private java.lang.Object payload_;
  public enum PayloadCase
      implements com.google.protobuf.Internal.EnumLite {
    PING_MESSAGE(2),
    ACK_MESSAGE(3),
    CLICK_TO_CALL_MESSAGE(4),
    SHARED_CLIPBOARD_MESSAGE(5),
    SMS_FETCH_REQUEST(8),
    REMOTE_COPY_MESSAGE(9),
    SIGNALLING_MESSAGE(10),
    ICE_CANDIDATE_MESSAGE(11),
    PAYLOAD_NOT_SET(0);
    private final int value;
    private PayloadCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PayloadCase valueOf(int value) {
      return forNumber(value);
    }

    public static PayloadCase forNumber(int value) {
      switch (value) {
        case 2: return PING_MESSAGE;
        case 3: return ACK_MESSAGE;
        case 4: return CLICK_TO_CALL_MESSAGE;
        case 5: return SHARED_CLIPBOARD_MESSAGE;
        case 8: return SMS_FETCH_REQUEST;
        case 9: return REMOTE_COPY_MESSAGE;
        case 10: return SIGNALLING_MESSAGE;
        case 11: return ICE_CANDIDATE_MESSAGE;
        case 0: return PAYLOAD_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PayloadCase
  getPayloadCase() {
    return PayloadCase.forNumber(
        payloadCase_);
  }

  private void clearPayload() {
    payloadCase_ = 0;
    payload_ = null;
  }

  public static final int SENDER_GUID_FIELD_NUMBER = 1;
  private java.lang.String senderGuid_;
  /**
   * <pre>
   * Identifier of sender. required except for AckMessage.
   * </pre>
   *
   * <code>optional string sender_guid = 1;</code>
   */
  public java.lang.String getSenderGuid() {
    return senderGuid_;
  }
  /**
   * <pre>
   * Identifier of sender. required except for AckMessage.
   * </pre>
   *
   * <code>optional string sender_guid = 1;</code>
   */
  public com.google.protobuf.ByteString
      getSenderGuidBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(senderGuid_);
  }
  /**
   * <pre>
   * Identifier of sender. required except for AckMessage.
   * </pre>
   *
   * <code>optional string sender_guid = 1;</code>
   */
  private void setSenderGuid(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    senderGuid_ = value;
  }
  /**
   * <pre>
   * Identifier of sender. required except for AckMessage.
   * </pre>
   *
   * <code>optional string sender_guid = 1;</code>
   */
  private void clearSenderGuid() {
    
    senderGuid_ = getDefaultInstance().getSenderGuid();
  }
  /**
   * <pre>
   * Identifier of sender. required except for AckMessage.
   * </pre>
   *
   * <code>optional string sender_guid = 1;</code>
   */
  private void setSenderGuidBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    senderGuid_ = value.toStringUtf8();
  }

  public static final int PING_MESSAGE_FIELD_NUMBER = 2;
  /**
   * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
   */
  public org.chromium.components.sync.protocol.PingMessage getPingMessage() {
    if (payloadCase_ == 2) {
       return (org.chromium.components.sync.protocol.PingMessage) payload_;
    }
    return org.chromium.components.sync.protocol.PingMessage.getDefaultInstance();
  }
  /**
   * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
   */
  private void setPingMessage(org.chromium.components.sync.protocol.PingMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    payload_ = value;
    payloadCase_ = 2;
  }
  /**
   * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
   */
  private void setPingMessage(
      org.chromium.components.sync.protocol.PingMessage.Builder builderForValue) {
    payload_ = builderForValue.build();
    payloadCase_ = 2;
  }
  /**
   * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
   */
  private void mergePingMessage(org.chromium.components.sync.protocol.PingMessage value) {
    if (payloadCase_ == 2 &&
        payload_ != org.chromium.components.sync.protocol.PingMessage.getDefaultInstance()) {
      payload_ = org.chromium.components.sync.protocol.PingMessage.newBuilder((org.chromium.components.sync.protocol.PingMessage) payload_)
          .mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    payloadCase_ = 2;
  }
  /**
   * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
   */
  private void clearPingMessage() {
    if (payloadCase_ == 2) {
      payloadCase_ = 0;
      payload_ = null;
    }
  }

  public static final int ACK_MESSAGE_FIELD_NUMBER = 3;
  /**
   * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
   */
  public org.chromium.components.sync.protocol.AckMessage getAckMessage() {
    if (payloadCase_ == 3) {
       return (org.chromium.components.sync.protocol.AckMessage) payload_;
    }
    return org.chromium.components.sync.protocol.AckMessage.getDefaultInstance();
  }
  /**
   * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
   */
  private void setAckMessage(org.chromium.components.sync.protocol.AckMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    payload_ = value;
    payloadCase_ = 3;
  }
  /**
   * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
   */
  private void setAckMessage(
      org.chromium.components.sync.protocol.AckMessage.Builder builderForValue) {
    payload_ = builderForValue.build();
    payloadCase_ = 3;
  }
  /**
   * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
   */
  private void mergeAckMessage(org.chromium.components.sync.protocol.AckMessage value) {
    if (payloadCase_ == 3 &&
        payload_ != org.chromium.components.sync.protocol.AckMessage.getDefaultInstance()) {
      payload_ = org.chromium.components.sync.protocol.AckMessage.newBuilder((org.chromium.components.sync.protocol.AckMessage) payload_)
          .mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    payloadCase_ = 3;
  }
  /**
   * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
   */
  private void clearAckMessage() {
    if (payloadCase_ == 3) {
      payloadCase_ = 0;
      payload_ = null;
    }
  }

  public static final int CLICK_TO_CALL_MESSAGE_FIELD_NUMBER = 4;
  /**
   * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
   */
  public org.chromium.components.sync.protocol.ClickToCallMessage getClickToCallMessage() {
    if (payloadCase_ == 4) {
       return (org.chromium.components.sync.protocol.ClickToCallMessage) payload_;
    }
    return org.chromium.components.sync.protocol.ClickToCallMessage.getDefaultInstance();
  }
  /**
   * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
   */
  private void setClickToCallMessage(org.chromium.components.sync.protocol.ClickToCallMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    payload_ = value;
    payloadCase_ = 4;
  }
  /**
   * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
   */
  private void setClickToCallMessage(
      org.chromium.components.sync.protocol.ClickToCallMessage.Builder builderForValue) {
    payload_ = builderForValue.build();
    payloadCase_ = 4;
  }
  /**
   * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
   */
  private void mergeClickToCallMessage(org.chromium.components.sync.protocol.ClickToCallMessage value) {
    if (payloadCase_ == 4 &&
        payload_ != org.chromium.components.sync.protocol.ClickToCallMessage.getDefaultInstance()) {
      payload_ = org.chromium.components.sync.protocol.ClickToCallMessage.newBuilder((org.chromium.components.sync.protocol.ClickToCallMessage) payload_)
          .mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    payloadCase_ = 4;
  }
  /**
   * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
   */
  private void clearClickToCallMessage() {
    if (payloadCase_ == 4) {
      payloadCase_ = 0;
      payload_ = null;
    }
  }

  public static final int SHARED_CLIPBOARD_MESSAGE_FIELD_NUMBER = 5;
  /**
   * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
   */
  public org.chromium.components.sync.protocol.SharedClipboardMessage getSharedClipboardMessage() {
    if (payloadCase_ == 5) {
       return (org.chromium.components.sync.protocol.SharedClipboardMessage) payload_;
    }
    return org.chromium.components.sync.protocol.SharedClipboardMessage.getDefaultInstance();
  }
  /**
   * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
   */
  private void setSharedClipboardMessage(org.chromium.components.sync.protocol.SharedClipboardMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    payload_ = value;
    payloadCase_ = 5;
  }
  /**
   * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
   */
  private void setSharedClipboardMessage(
      org.chromium.components.sync.protocol.SharedClipboardMessage.Builder builderForValue) {
    payload_ = builderForValue.build();
    payloadCase_ = 5;
  }
  /**
   * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
   */
  private void mergeSharedClipboardMessage(org.chromium.components.sync.protocol.SharedClipboardMessage value) {
    if (payloadCase_ == 5 &&
        payload_ != org.chromium.components.sync.protocol.SharedClipboardMessage.getDefaultInstance()) {
      payload_ = org.chromium.components.sync.protocol.SharedClipboardMessage.newBuilder((org.chromium.components.sync.protocol.SharedClipboardMessage) payload_)
          .mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    payloadCase_ = 5;
  }
  /**
   * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
   */
  private void clearSharedClipboardMessage() {
    if (payloadCase_ == 5) {
      payloadCase_ = 0;
      payload_ = null;
    }
  }

  public static final int SMS_FETCH_REQUEST_FIELD_NUMBER = 8;
  /**
   * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
   */
  public org.chromium.components.sync.protocol.SmsFetchRequest getSmsFetchRequest() {
    if (payloadCase_ == 8) {
       return (org.chromium.components.sync.protocol.SmsFetchRequest) payload_;
    }
    return org.chromium.components.sync.protocol.SmsFetchRequest.getDefaultInstance();
  }
  /**
   * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
   */
  private void setSmsFetchRequest(org.chromium.components.sync.protocol.SmsFetchRequest value) {
    if (value == null) {
      throw new NullPointerException();
    }
    payload_ = value;
    payloadCase_ = 8;
  }
  /**
   * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
   */
  private void setSmsFetchRequest(
      org.chromium.components.sync.protocol.SmsFetchRequest.Builder builderForValue) {
    payload_ = builderForValue.build();
    payloadCase_ = 8;
  }
  /**
   * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
   */
  private void mergeSmsFetchRequest(org.chromium.components.sync.protocol.SmsFetchRequest value) {
    if (payloadCase_ == 8 &&
        payload_ != org.chromium.components.sync.protocol.SmsFetchRequest.getDefaultInstance()) {
      payload_ = org.chromium.components.sync.protocol.SmsFetchRequest.newBuilder((org.chromium.components.sync.protocol.SmsFetchRequest) payload_)
          .mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    payloadCase_ = 8;
  }
  /**
   * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
   */
  private void clearSmsFetchRequest() {
    if (payloadCase_ == 8) {
      payloadCase_ = 0;
      payload_ = null;
    }
  }

  public static final int REMOTE_COPY_MESSAGE_FIELD_NUMBER = 9;
  /**
   * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
   */
  public org.chromium.components.sync.protocol.RemoteCopyMessage getRemoteCopyMessage() {
    if (payloadCase_ == 9) {
       return (org.chromium.components.sync.protocol.RemoteCopyMessage) payload_;
    }
    return org.chromium.components.sync.protocol.RemoteCopyMessage.getDefaultInstance();
  }
  /**
   * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
   */
  private void setRemoteCopyMessage(org.chromium.components.sync.protocol.RemoteCopyMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    payload_ = value;
    payloadCase_ = 9;
  }
  /**
   * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
   */
  private void setRemoteCopyMessage(
      org.chromium.components.sync.protocol.RemoteCopyMessage.Builder builderForValue) {
    payload_ = builderForValue.build();
    payloadCase_ = 9;
  }
  /**
   * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
   */
  private void mergeRemoteCopyMessage(org.chromium.components.sync.protocol.RemoteCopyMessage value) {
    if (payloadCase_ == 9 &&
        payload_ != org.chromium.components.sync.protocol.RemoteCopyMessage.getDefaultInstance()) {
      payload_ = org.chromium.components.sync.protocol.RemoteCopyMessage.newBuilder((org.chromium.components.sync.protocol.RemoteCopyMessage) payload_)
          .mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    payloadCase_ = 9;
  }
  /**
   * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
   */
  private void clearRemoteCopyMessage() {
    if (payloadCase_ == 9) {
      payloadCase_ = 0;
      payload_ = null;
    }
  }

  public static final int SIGNALLING_MESSAGE_FIELD_NUMBER = 10;
  /**
   * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
   */
  public org.chromium.components.sync.protocol.SignallingMessage getSignallingMessage() {
    if (payloadCase_ == 10) {
       return (org.chromium.components.sync.protocol.SignallingMessage) payload_;
    }
    return org.chromium.components.sync.protocol.SignallingMessage.getDefaultInstance();
  }
  /**
   * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
   */
  private void setSignallingMessage(org.chromium.components.sync.protocol.SignallingMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    payload_ = value;
    payloadCase_ = 10;
  }
  /**
   * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
   */
  private void setSignallingMessage(
      org.chromium.components.sync.protocol.SignallingMessage.Builder builderForValue) {
    payload_ = builderForValue.build();
    payloadCase_ = 10;
  }
  /**
   * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
   */
  private void mergeSignallingMessage(org.chromium.components.sync.protocol.SignallingMessage value) {
    if (payloadCase_ == 10 &&
        payload_ != org.chromium.components.sync.protocol.SignallingMessage.getDefaultInstance()) {
      payload_ = org.chromium.components.sync.protocol.SignallingMessage.newBuilder((org.chromium.components.sync.protocol.SignallingMessage) payload_)
          .mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    payloadCase_ = 10;
  }
  /**
   * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
   */
  private void clearSignallingMessage() {
    if (payloadCase_ == 10) {
      payloadCase_ = 0;
      payload_ = null;
    }
  }

  public static final int ICE_CANDIDATE_MESSAGE_FIELD_NUMBER = 11;
  /**
   * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
   */
  public org.chromium.components.sync.protocol.IceCandidateMessage getIceCandidateMessage() {
    if (payloadCase_ == 11) {
       return (org.chromium.components.sync.protocol.IceCandidateMessage) payload_;
    }
    return org.chromium.components.sync.protocol.IceCandidateMessage.getDefaultInstance();
  }
  /**
   * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
   */
  private void setIceCandidateMessage(org.chromium.components.sync.protocol.IceCandidateMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    payload_ = value;
    payloadCase_ = 11;
  }
  /**
   * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
   */
  private void setIceCandidateMessage(
      org.chromium.components.sync.protocol.IceCandidateMessage.Builder builderForValue) {
    payload_ = builderForValue.build();
    payloadCase_ = 11;
  }
  /**
   * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
   */
  private void mergeIceCandidateMessage(org.chromium.components.sync.protocol.IceCandidateMessage value) {
    if (payloadCase_ == 11 &&
        payload_ != org.chromium.components.sync.protocol.IceCandidateMessage.getDefaultInstance()) {
      payload_ = org.chromium.components.sync.protocol.IceCandidateMessage.newBuilder((org.chromium.components.sync.protocol.IceCandidateMessage) payload_)
          .mergeFrom(value).buildPartial();
    } else {
      payload_ = value;
    }
    payloadCase_ = 11;
  }
  /**
   * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
   */
  private void clearIceCandidateMessage() {
    if (payloadCase_ == 11) {
      payloadCase_ = 0;
      payload_ = null;
    }
  }

  public static final int SENDER_INFO_FIELD_NUMBER = 6;
  private org.chromium.components.sync.protocol.RecipientInfo senderInfo_;
  /**
   * <pre>
   * RecipientInfo for responding an AckMessage to the sender. optional.
   * </pre>
   *
   * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
   */
  public boolean hasSenderInfo() {
    return senderInfo_ != null;
  }
  /**
   * <pre>
   * RecipientInfo for responding an AckMessage to the sender. optional.
   * </pre>
   *
   * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
   */
  public org.chromium.components.sync.protocol.RecipientInfo getSenderInfo() {
    return senderInfo_ == null ? org.chromium.components.sync.protocol.RecipientInfo.getDefaultInstance() : senderInfo_;
  }
  /**
   * <pre>
   * RecipientInfo for responding an AckMessage to the sender. optional.
   * </pre>
   *
   * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
   */
  private void setSenderInfo(org.chromium.components.sync.protocol.RecipientInfo value) {
    if (value == null) {
      throw new NullPointerException();
    }
    senderInfo_ = value;
    
    }
  /**
   * <pre>
   * RecipientInfo for responding an AckMessage to the sender. optional.
   * </pre>
   *
   * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
   */
  private void setSenderInfo(
      org.chromium.components.sync.protocol.RecipientInfo.Builder builderForValue) {
    senderInfo_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * RecipientInfo for responding an AckMessage to the sender. optional.
   * </pre>
   *
   * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
   */
  private void mergeSenderInfo(org.chromium.components.sync.protocol.RecipientInfo value) {
    if (senderInfo_ != null &&
        senderInfo_ != org.chromium.components.sync.protocol.RecipientInfo.getDefaultInstance()) {
      senderInfo_ =
        org.chromium.components.sync.protocol.RecipientInfo.newBuilder(senderInfo_).mergeFrom(value).buildPartial();
    } else {
      senderInfo_ = value;
    }
    
  }
  /**
   * <pre>
   * RecipientInfo for responding an AckMessage to the sender. optional.
   * </pre>
   *
   * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
   */
  private void clearSenderInfo() {  senderInfo_ = null;
    
  }

  public static final int SENDER_DEVICE_NAME_FIELD_NUMBER = 7;
  private java.lang.String senderDeviceName_;
  /**
   * <pre>
   * The name of the device sending this message. optional.
   * </pre>
   *
   * <code>optional string sender_device_name = 7;</code>
   */
  public java.lang.String getSenderDeviceName() {
    return senderDeviceName_;
  }
  /**
   * <pre>
   * The name of the device sending this message. optional.
   * </pre>
   *
   * <code>optional string sender_device_name = 7;</code>
   */
  public com.google.protobuf.ByteString
      getSenderDeviceNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(senderDeviceName_);
  }
  /**
   * <pre>
   * The name of the device sending this message. optional.
   * </pre>
   *
   * <code>optional string sender_device_name = 7;</code>
   */
  private void setSenderDeviceName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    senderDeviceName_ = value;
  }
  /**
   * <pre>
   * The name of the device sending this message. optional.
   * </pre>
   *
   * <code>optional string sender_device_name = 7;</code>
   */
  private void clearSenderDeviceName() {
    
    senderDeviceName_ = getDefaultInstance().getSenderDeviceName();
  }
  /**
   * <pre>
   * The name of the device sending this message. optional.
   * </pre>
   *
   * <code>optional string sender_device_name = 7;</code>
   */
  private void setSenderDeviceNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    senderDeviceName_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!senderGuid_.isEmpty()) {
      output.writeString(1, getSenderGuid());
    }
    if (payloadCase_ == 2) {
      output.writeMessage(2, (org.chromium.components.sync.protocol.PingMessage) payload_);
    }
    if (payloadCase_ == 3) {
      output.writeMessage(3, (org.chromium.components.sync.protocol.AckMessage) payload_);
    }
    if (payloadCase_ == 4) {
      output.writeMessage(4, (org.chromium.components.sync.protocol.ClickToCallMessage) payload_);
    }
    if (payloadCase_ == 5) {
      output.writeMessage(5, (org.chromium.components.sync.protocol.SharedClipboardMessage) payload_);
    }
    if (senderInfo_ != null) {
      output.writeMessage(6, getSenderInfo());
    }
    if (!senderDeviceName_.isEmpty()) {
      output.writeString(7, getSenderDeviceName());
    }
    if (payloadCase_ == 8) {
      output.writeMessage(8, (org.chromium.components.sync.protocol.SmsFetchRequest) payload_);
    }
    if (payloadCase_ == 9) {
      output.writeMessage(9, (org.chromium.components.sync.protocol.RemoteCopyMessage) payload_);
    }
    if (payloadCase_ == 10) {
      output.writeMessage(10, (org.chromium.components.sync.protocol.SignallingMessage) payload_);
    }
    if (payloadCase_ == 11) {
      output.writeMessage(11, (org.chromium.components.sync.protocol.IceCandidateMessage) payload_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!senderGuid_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getSenderGuid());
    }
    if (payloadCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.chromium.components.sync.protocol.PingMessage) payload_);
    }
    if (payloadCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.chromium.components.sync.protocol.AckMessage) payload_);
    }
    if (payloadCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.chromium.components.sync.protocol.ClickToCallMessage) payload_);
    }
    if (payloadCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.chromium.components.sync.protocol.SharedClipboardMessage) payload_);
    }
    if (senderInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getSenderInfo());
    }
    if (!senderDeviceName_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(7, getSenderDeviceName());
    }
    if (payloadCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.chromium.components.sync.protocol.SmsFetchRequest) payload_);
    }
    if (payloadCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (org.chromium.components.sync.protocol.RemoteCopyMessage) payload_);
    }
    if (payloadCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (org.chromium.components.sync.protocol.SignallingMessage) payload_);
    }
    if (payloadCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (org.chromium.components.sync.protocol.IceCandidateMessage) payload_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.SharingMessage parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.SharingMessage parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.SharingMessage prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Message for sending between devices in Sharing.
   * Next tag: 12
   * </pre>
   *
   * Protobuf type {@code chrome_browser_sharing.SharingMessage}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.SharingMessage, Builder> implements
      // @@protoc_insertion_point(builder_implements:chrome_browser_sharing.SharingMessage)
      org.chromium.components.sync.protocol.SharingMessageOrBuilder {
    // Construct using org.chromium.components.sync.protocol.SharingMessage.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public PayloadCase
        getPayloadCase() {
      return instance.getPayloadCase();
    }

    public Builder clearPayload() {
      copyOnWrite();
      instance.clearPayload();
      return this;
    }


    /**
     * <pre>
     * Identifier of sender. required except for AckMessage.
     * </pre>
     *
     * <code>optional string sender_guid = 1;</code>
     */
    public java.lang.String getSenderGuid() {
      return instance.getSenderGuid();
    }
    /**
     * <pre>
     * Identifier of sender. required except for AckMessage.
     * </pre>
     *
     * <code>optional string sender_guid = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSenderGuidBytes() {
      return instance.getSenderGuidBytes();
    }
    /**
     * <pre>
     * Identifier of sender. required except for AckMessage.
     * </pre>
     *
     * <code>optional string sender_guid = 1;</code>
     */
    public Builder setSenderGuid(
        java.lang.String value) {
      copyOnWrite();
      instance.setSenderGuid(value);
      return this;
    }
    /**
     * <pre>
     * Identifier of sender. required except for AckMessage.
     * </pre>
     *
     * <code>optional string sender_guid = 1;</code>
     */
    public Builder clearSenderGuid() {
      copyOnWrite();
      instance.clearSenderGuid();
      return this;
    }
    /**
     * <pre>
     * Identifier of sender. required except for AckMessage.
     * </pre>
     *
     * <code>optional string sender_guid = 1;</code>
     */
    public Builder setSenderGuidBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSenderGuidBytes(value);
      return this;
    }

    /**
     * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
     */
    public org.chromium.components.sync.protocol.PingMessage getPingMessage() {
      return instance.getPingMessage();
    }
    /**
     * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
     */
    public Builder setPingMessage(org.chromium.components.sync.protocol.PingMessage value) {
      copyOnWrite();
      instance.setPingMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
     */
    public Builder setPingMessage(
        org.chromium.components.sync.protocol.PingMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setPingMessage(builderForValue);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
     */
    public Builder mergePingMessage(org.chromium.components.sync.protocol.PingMessage value) {
      copyOnWrite();
      instance.mergePingMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.PingMessage ping_message = 2;</code>
     */
    public Builder clearPingMessage() {
      copyOnWrite();
      instance.clearPingMessage();
      return this;
    }

    /**
     * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
     */
    public org.chromium.components.sync.protocol.AckMessage getAckMessage() {
      return instance.getAckMessage();
    }
    /**
     * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
     */
    public Builder setAckMessage(org.chromium.components.sync.protocol.AckMessage value) {
      copyOnWrite();
      instance.setAckMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
     */
    public Builder setAckMessage(
        org.chromium.components.sync.protocol.AckMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setAckMessage(builderForValue);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
     */
    public Builder mergeAckMessage(org.chromium.components.sync.protocol.AckMessage value) {
      copyOnWrite();
      instance.mergeAckMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.AckMessage ack_message = 3;</code>
     */
    public Builder clearAckMessage() {
      copyOnWrite();
      instance.clearAckMessage();
      return this;
    }

    /**
     * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
     */
    public org.chromium.components.sync.protocol.ClickToCallMessage getClickToCallMessage() {
      return instance.getClickToCallMessage();
    }
    /**
     * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
     */
    public Builder setClickToCallMessage(org.chromium.components.sync.protocol.ClickToCallMessage value) {
      copyOnWrite();
      instance.setClickToCallMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
     */
    public Builder setClickToCallMessage(
        org.chromium.components.sync.protocol.ClickToCallMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setClickToCallMessage(builderForValue);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
     */
    public Builder mergeClickToCallMessage(org.chromium.components.sync.protocol.ClickToCallMessage value) {
      copyOnWrite();
      instance.mergeClickToCallMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;</code>
     */
    public Builder clearClickToCallMessage() {
      copyOnWrite();
      instance.clearClickToCallMessage();
      return this;
    }

    /**
     * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
     */
    public org.chromium.components.sync.protocol.SharedClipboardMessage getSharedClipboardMessage() {
      return instance.getSharedClipboardMessage();
    }
    /**
     * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
     */
    public Builder setSharedClipboardMessage(org.chromium.components.sync.protocol.SharedClipboardMessage value) {
      copyOnWrite();
      instance.setSharedClipboardMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
     */
    public Builder setSharedClipboardMessage(
        org.chromium.components.sync.protocol.SharedClipboardMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setSharedClipboardMessage(builderForValue);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
     */
    public Builder mergeSharedClipboardMessage(org.chromium.components.sync.protocol.SharedClipboardMessage value) {
      copyOnWrite();
      instance.mergeSharedClipboardMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;</code>
     */
    public Builder clearSharedClipboardMessage() {
      copyOnWrite();
      instance.clearSharedClipboardMessage();
      return this;
    }

    /**
     * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
     */
    public org.chromium.components.sync.protocol.SmsFetchRequest getSmsFetchRequest() {
      return instance.getSmsFetchRequest();
    }
    /**
     * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
     */
    public Builder setSmsFetchRequest(org.chromium.components.sync.protocol.SmsFetchRequest value) {
      copyOnWrite();
      instance.setSmsFetchRequest(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
     */
    public Builder setSmsFetchRequest(
        org.chromium.components.sync.protocol.SmsFetchRequest.Builder builderForValue) {
      copyOnWrite();
      instance.setSmsFetchRequest(builderForValue);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
     */
    public Builder mergeSmsFetchRequest(org.chromium.components.sync.protocol.SmsFetchRequest value) {
      copyOnWrite();
      instance.mergeSmsFetchRequest(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;</code>
     */
    public Builder clearSmsFetchRequest() {
      copyOnWrite();
      instance.clearSmsFetchRequest();
      return this;
    }

    /**
     * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
     */
    public org.chromium.components.sync.protocol.RemoteCopyMessage getRemoteCopyMessage() {
      return instance.getRemoteCopyMessage();
    }
    /**
     * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
     */
    public Builder setRemoteCopyMessage(org.chromium.components.sync.protocol.RemoteCopyMessage value) {
      copyOnWrite();
      instance.setRemoteCopyMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
     */
    public Builder setRemoteCopyMessage(
        org.chromium.components.sync.protocol.RemoteCopyMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setRemoteCopyMessage(builderForValue);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
     */
    public Builder mergeRemoteCopyMessage(org.chromium.components.sync.protocol.RemoteCopyMessage value) {
      copyOnWrite();
      instance.mergeRemoteCopyMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;</code>
     */
    public Builder clearRemoteCopyMessage() {
      copyOnWrite();
      instance.clearRemoteCopyMessage();
      return this;
    }

    /**
     * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
     */
    public org.chromium.components.sync.protocol.SignallingMessage getSignallingMessage() {
      return instance.getSignallingMessage();
    }
    /**
     * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
     */
    public Builder setSignallingMessage(org.chromium.components.sync.protocol.SignallingMessage value) {
      copyOnWrite();
      instance.setSignallingMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
     */
    public Builder setSignallingMessage(
        org.chromium.components.sync.protocol.SignallingMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setSignallingMessage(builderForValue);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
     */
    public Builder mergeSignallingMessage(org.chromium.components.sync.protocol.SignallingMessage value) {
      copyOnWrite();
      instance.mergeSignallingMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.SignallingMessage signalling_message = 10;</code>
     */
    public Builder clearSignallingMessage() {
      copyOnWrite();
      instance.clearSignallingMessage();
      return this;
    }

    /**
     * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
     */
    public org.chromium.components.sync.protocol.IceCandidateMessage getIceCandidateMessage() {
      return instance.getIceCandidateMessage();
    }
    /**
     * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
     */
    public Builder setIceCandidateMessage(org.chromium.components.sync.protocol.IceCandidateMessage value) {
      copyOnWrite();
      instance.setIceCandidateMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
     */
    public Builder setIceCandidateMessage(
        org.chromium.components.sync.protocol.IceCandidateMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setIceCandidateMessage(builderForValue);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
     */
    public Builder mergeIceCandidateMessage(org.chromium.components.sync.protocol.IceCandidateMessage value) {
      copyOnWrite();
      instance.mergeIceCandidateMessage(value);
      return this;
    }
    /**
     * <code>optional .chrome_browser_sharing.IceCandidateMessage ice_candidate_message = 11;</code>
     */
    public Builder clearIceCandidateMessage() {
      copyOnWrite();
      instance.clearIceCandidateMessage();
      return this;
    }

    /**
     * <pre>
     * RecipientInfo for responding an AckMessage to the sender. optional.
     * </pre>
     *
     * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
     */
    public boolean hasSenderInfo() {
      return instance.hasSenderInfo();
    }
    /**
     * <pre>
     * RecipientInfo for responding an AckMessage to the sender. optional.
     * </pre>
     *
     * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
     */
    public org.chromium.components.sync.protocol.RecipientInfo getSenderInfo() {
      return instance.getSenderInfo();
    }
    /**
     * <pre>
     * RecipientInfo for responding an AckMessage to the sender. optional.
     * </pre>
     *
     * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
     */
    public Builder setSenderInfo(org.chromium.components.sync.protocol.RecipientInfo value) {
      copyOnWrite();
      instance.setSenderInfo(value);
      return this;
      }
    /**
     * <pre>
     * RecipientInfo for responding an AckMessage to the sender. optional.
     * </pre>
     *
     * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
     */
    public Builder setSenderInfo(
        org.chromium.components.sync.protocol.RecipientInfo.Builder builderForValue) {
      copyOnWrite();
      instance.setSenderInfo(builderForValue);
      return this;
    }
    /**
     * <pre>
     * RecipientInfo for responding an AckMessage to the sender. optional.
     * </pre>
     *
     * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
     */
    public Builder mergeSenderInfo(org.chromium.components.sync.protocol.RecipientInfo value) {
      copyOnWrite();
      instance.mergeSenderInfo(value);
      return this;
    }
    /**
     * <pre>
     * RecipientInfo for responding an AckMessage to the sender. optional.
     * </pre>
     *
     * <code>optional .chrome_browser_sharing.RecipientInfo sender_info = 6;</code>
     */
    public Builder clearSenderInfo() {  copyOnWrite();
      instance.clearSenderInfo();
      return this;
    }

    /**
     * <pre>
     * The name of the device sending this message. optional.
     * </pre>
     *
     * <code>optional string sender_device_name = 7;</code>
     */
    public java.lang.String getSenderDeviceName() {
      return instance.getSenderDeviceName();
    }
    /**
     * <pre>
     * The name of the device sending this message. optional.
     * </pre>
     *
     * <code>optional string sender_device_name = 7;</code>
     */
    public com.google.protobuf.ByteString
        getSenderDeviceNameBytes() {
      return instance.getSenderDeviceNameBytes();
    }
    /**
     * <pre>
     * The name of the device sending this message. optional.
     * </pre>
     *
     * <code>optional string sender_device_name = 7;</code>
     */
    public Builder setSenderDeviceName(
        java.lang.String value) {
      copyOnWrite();
      instance.setSenderDeviceName(value);
      return this;
    }
    /**
     * <pre>
     * The name of the device sending this message. optional.
     * </pre>
     *
     * <code>optional string sender_device_name = 7;</code>
     */
    public Builder clearSenderDeviceName() {
      copyOnWrite();
      instance.clearSenderDeviceName();
      return this;
    }
    /**
     * <pre>
     * The name of the device sending this message. optional.
     * </pre>
     *
     * <code>optional string sender_device_name = 7;</code>
     */
    public Builder setSenderDeviceNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSenderDeviceNameBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:chrome_browser_sharing.SharingMessage)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.SharingMessage();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.SharingMessage other = (org.chromium.components.sync.protocol.SharingMessage) arg1;
        senderGuid_ = visitor.visitString(!senderGuid_.isEmpty(), senderGuid_,
            !other.senderGuid_.isEmpty(), other.senderGuid_);
        senderInfo_ = visitor.visitMessage(senderInfo_, other.senderInfo_);
        senderDeviceName_ = visitor.visitString(!senderDeviceName_.isEmpty(), senderDeviceName_,
            !other.senderDeviceName_.isEmpty(), other.senderDeviceName_);
        switch (other.getPayloadCase()) {
          case PING_MESSAGE: {
            payload_ = visitor.visitOneofMessage(
                payloadCase_ == 2,
                payload_,
                other.payload_);
            break;
          }
          case ACK_MESSAGE: {
            payload_ = visitor.visitOneofMessage(
                payloadCase_ == 3,
                payload_,
                other.payload_);
            break;
          }
          case CLICK_TO_CALL_MESSAGE: {
            payload_ = visitor.visitOneofMessage(
                payloadCase_ == 4,
                payload_,
                other.payload_);
            break;
          }
          case SHARED_CLIPBOARD_MESSAGE: {
            payload_ = visitor.visitOneofMessage(
                payloadCase_ == 5,
                payload_,
                other.payload_);
            break;
          }
          case SMS_FETCH_REQUEST: {
            payload_ = visitor.visitOneofMessage(
                payloadCase_ == 8,
                payload_,
                other.payload_);
            break;
          }
          case REMOTE_COPY_MESSAGE: {
            payload_ = visitor.visitOneofMessage(
                payloadCase_ == 9,
                payload_,
                other.payload_);
            break;
          }
          case SIGNALLING_MESSAGE: {
            payload_ = visitor.visitOneofMessage(
                payloadCase_ == 10,
                payload_,
                other.payload_);
            break;
          }
          case ICE_CANDIDATE_MESSAGE: {
            payload_ = visitor.visitOneofMessage(
                payloadCase_ == 11,
                payload_,
                other.payload_);
            break;
          }
          case PAYLOAD_NOT_SET: {
            visitor.visitOneofNotSet(payloadCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.payloadCase_ != 0) {
            payloadCase_ = other.payloadCase_;
          }
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                senderGuid_ = s;
                break;
              }
              case 18: {
                org.chromium.components.sync.protocol.PingMessage.Builder subBuilder = null;
                if (payloadCase_ == 2) {
                  subBuilder = ((org.chromium.components.sync.protocol.PingMessage) payload_).toBuilder();
                }
                payload_ =
                     input.readMessage(org.chromium.components.sync.protocol.PingMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.components.sync.protocol.PingMessage) payload_);
                  payload_ = subBuilder.buildPartial();
                }
                payloadCase_ = 2;
                break;
              }
              case 26: {
                org.chromium.components.sync.protocol.AckMessage.Builder subBuilder = null;
                if (payloadCase_ == 3) {
                  subBuilder = ((org.chromium.components.sync.protocol.AckMessage) payload_).toBuilder();
                }
                payload_ =
                     input.readMessage(org.chromium.components.sync.protocol.AckMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.components.sync.protocol.AckMessage) payload_);
                  payload_ = subBuilder.buildPartial();
                }
                payloadCase_ = 3;
                break;
              }
              case 34: {
                org.chromium.components.sync.protocol.ClickToCallMessage.Builder subBuilder = null;
                if (payloadCase_ == 4) {
                  subBuilder = ((org.chromium.components.sync.protocol.ClickToCallMessage) payload_).toBuilder();
                }
                payload_ =
                     input.readMessage(org.chromium.components.sync.protocol.ClickToCallMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.components.sync.protocol.ClickToCallMessage) payload_);
                  payload_ = subBuilder.buildPartial();
                }
                payloadCase_ = 4;
                break;
              }
              case 42: {
                org.chromium.components.sync.protocol.SharedClipboardMessage.Builder subBuilder = null;
                if (payloadCase_ == 5) {
                  subBuilder = ((org.chromium.components.sync.protocol.SharedClipboardMessage) payload_).toBuilder();
                }
                payload_ =
                     input.readMessage(org.chromium.components.sync.protocol.SharedClipboardMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.components.sync.protocol.SharedClipboardMessage) payload_);
                  payload_ = subBuilder.buildPartial();
                }
                payloadCase_ = 5;
                break;
              }
              case 50: {
                org.chromium.components.sync.protocol.RecipientInfo.Builder subBuilder = null;
                if (senderInfo_ != null) {
                  subBuilder = senderInfo_.toBuilder();
                }
                senderInfo_ = input.readMessage(org.chromium.components.sync.protocol.RecipientInfo.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(senderInfo_);
                  senderInfo_ = subBuilder.buildPartial();
                }

                break;
              }
              case 58: {
                String s = input.readStringRequireUtf8();

                senderDeviceName_ = s;
                break;
              }
              case 66: {
                org.chromium.components.sync.protocol.SmsFetchRequest.Builder subBuilder = null;
                if (payloadCase_ == 8) {
                  subBuilder = ((org.chromium.components.sync.protocol.SmsFetchRequest) payload_).toBuilder();
                }
                payload_ =
                     input.readMessage(org.chromium.components.sync.protocol.SmsFetchRequest.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.components.sync.protocol.SmsFetchRequest) payload_);
                  payload_ = subBuilder.buildPartial();
                }
                payloadCase_ = 8;
                break;
              }
              case 74: {
                org.chromium.components.sync.protocol.RemoteCopyMessage.Builder subBuilder = null;
                if (payloadCase_ == 9) {
                  subBuilder = ((org.chromium.components.sync.protocol.RemoteCopyMessage) payload_).toBuilder();
                }
                payload_ =
                     input.readMessage(org.chromium.components.sync.protocol.RemoteCopyMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.components.sync.protocol.RemoteCopyMessage) payload_);
                  payload_ = subBuilder.buildPartial();
                }
                payloadCase_ = 9;
                break;
              }
              case 82: {
                org.chromium.components.sync.protocol.SignallingMessage.Builder subBuilder = null;
                if (payloadCase_ == 10) {
                  subBuilder = ((org.chromium.components.sync.protocol.SignallingMessage) payload_).toBuilder();
                }
                payload_ =
                     input.readMessage(org.chromium.components.sync.protocol.SignallingMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.components.sync.protocol.SignallingMessage) payload_);
                  payload_ = subBuilder.buildPartial();
                }
                payloadCase_ = 10;
                break;
              }
              case 90: {
                org.chromium.components.sync.protocol.IceCandidateMessage.Builder subBuilder = null;
                if (payloadCase_ == 11) {
                  subBuilder = ((org.chromium.components.sync.protocol.IceCandidateMessage) payload_).toBuilder();
                }
                payload_ =
                     input.readMessage(org.chromium.components.sync.protocol.IceCandidateMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.components.sync.protocol.IceCandidateMessage) payload_);
                  payload_ = subBuilder.buildPartial();
                }
                payloadCase_ = 11;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.SharingMessage.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.SharingMessage)
  private static final org.chromium.components.sync.protocol.SharingMessage DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SharingMessage();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.SharingMessage getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SharingMessage> PARSER;

  public static com.google.protobuf.Parser<SharingMessage> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

