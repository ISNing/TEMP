// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment_status.proto

package org.chromium.components.sync.protocol;

public interface ExperimentStatusResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:sync_pb.ExperimentStatusResponse)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * Minimal time to wait before issuing another request.
   * </pre>
   *
   * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
   */
  boolean hasPollIntervalSeconds();
  /**
   * <pre>
   * Minimal time to wait before issuing another request.
   * </pre>
   *
   * <code>optional int32 poll_interval_seconds = 1 [default = 3600];</code>
   */
  int getPollIntervalSeconds();

  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  java.util.List<org.chromium.components.sync.protocol.ExperimentsSpecifics> 
      getExperimentList();
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  org.chromium.components.sync.protocol.ExperimentsSpecifics getExperiment(int index);
  /**
   * <pre>
   * The experiments that the client has asked for, with each experiment
   * containing exactly one experiment flag.  The client can inspect the
   * embedded flag to obtain the experiment status.  Note that the number of
   * experiments should be less than or equal to the number of experiment_name
   * sent in the request since it is possible that there is no experiment
   * matching an experiment_name.
   * </pre>
   *
   * <code>repeated .sync_pb.ExperimentsSpecifics experiment = 2;</code>
   */
  int getExperimentCount();
}
