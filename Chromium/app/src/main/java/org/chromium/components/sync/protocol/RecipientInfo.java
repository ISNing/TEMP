// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing_message.proto

package org.chromium.components.sync.protocol;

/**
 * <pre>
 * Message for data necessary to send an AckMessage to the sender.
 * </pre>
 *
 * Protobuf type {@code chrome_browser_sharing.RecipientInfo}
 */
public  final class RecipientInfo extends
    com.google.protobuf.GeneratedMessageLite<
        RecipientInfo, RecipientInfo.Builder> implements
    // @@protoc_insertion_point(message_implements:chrome_browser_sharing.RecipientInfo)
    RecipientInfoOrBuilder {
  private RecipientInfo() {
    fcmToken_ = "";
    p256Dh_ = com.google.protobuf.ByteString.EMPTY;
    authSecret_ = com.google.protobuf.ByteString.EMPTY;
  }
  public static final int FCM_TOKEN_FIELD_NUMBER = 1;
  private java.lang.String fcmToken_;
  /**
   * <pre>
   * FCM registration token of device. required.
   * </pre>
   *
   * <code>optional string fcm_token = 1;</code>
   */
  public java.lang.String getFcmToken() {
    return fcmToken_;
  }
  /**
   * <pre>
   * FCM registration token of device. required.
   * </pre>
   *
   * <code>optional string fcm_token = 1;</code>
   */
  public com.google.protobuf.ByteString
      getFcmTokenBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(fcmToken_);
  }
  /**
   * <pre>
   * FCM registration token of device. required.
   * </pre>
   *
   * <code>optional string fcm_token = 1;</code>
   */
  private void setFcmToken(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    fcmToken_ = value;
  }
  /**
   * <pre>
   * FCM registration token of device. required.
   * </pre>
   *
   * <code>optional string fcm_token = 1;</code>
   */
  private void clearFcmToken() {
    
    fcmToken_ = getDefaultInstance().getFcmToken();
  }
  /**
   * <pre>
   * FCM registration token of device. required.
   * </pre>
   *
   * <code>optional string fcm_token = 1;</code>
   */
  private void setFcmTokenBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    fcmToken_ = value.toStringUtf8();
  }

  public static final int P256DH_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString p256Dh_;
  /**
   * <pre>
   * Subscription public key required for RFC 8291.
   * </pre>
   *
   * <code>optional bytes p256dh = 2;</code>
   */
  public com.google.protobuf.ByteString getP256Dh() {
    return p256Dh_;
  }
  /**
   * <pre>
   * Subscription public key required for RFC 8291.
   * </pre>
   *
   * <code>optional bytes p256dh = 2;</code>
   */
  private void setP256Dh(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    p256Dh_ = value;
  }
  /**
   * <pre>
   * Subscription public key required for RFC 8291.
   * </pre>
   *
   * <code>optional bytes p256dh = 2;</code>
   */
  private void clearP256Dh() {
    
    p256Dh_ = getDefaultInstance().getP256Dh();
  }

  public static final int AUTH_SECRET_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString authSecret_;
  /**
   * <pre>
   * Auth secret key required for RFC 8291.
   * </pre>
   *
   * <code>optional bytes auth_secret = 3;</code>
   */
  public com.google.protobuf.ByteString getAuthSecret() {
    return authSecret_;
  }
  /**
   * <pre>
   * Auth secret key required for RFC 8291.
   * </pre>
   *
   * <code>optional bytes auth_secret = 3;</code>
   */
  private void setAuthSecret(com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    authSecret_ = value;
  }
  /**
   * <pre>
   * Auth secret key required for RFC 8291.
   * </pre>
   *
   * <code>optional bytes auth_secret = 3;</code>
   */
  private void clearAuthSecret() {
    
    authSecret_ = getDefaultInstance().getAuthSecret();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!fcmToken_.isEmpty()) {
      output.writeString(1, getFcmToken());
    }
    if (!p256Dh_.isEmpty()) {
      output.writeBytes(2, p256Dh_);
    }
    if (!authSecret_.isEmpty()) {
      output.writeBytes(3, authSecret_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!fcmToken_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getFcmToken());
    }
    if (!p256Dh_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, p256Dh_);
    }
    if (!authSecret_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, authSecret_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.components.sync.protocol.RecipientInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.components.sync.protocol.RecipientInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.components.sync.protocol.RecipientInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Message for data necessary to send an AckMessage to the sender.
   * </pre>
   *
   * Protobuf type {@code chrome_browser_sharing.RecipientInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.components.sync.protocol.RecipientInfo, Builder> implements
      // @@protoc_insertion_point(builder_implements:chrome_browser_sharing.RecipientInfo)
      org.chromium.components.sync.protocol.RecipientInfoOrBuilder {
    // Construct using org.chromium.components.sync.protocol.RecipientInfo.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * FCM registration token of device. required.
     * </pre>
     *
     * <code>optional string fcm_token = 1;</code>
     */
    public java.lang.String getFcmToken() {
      return instance.getFcmToken();
    }
    /**
     * <pre>
     * FCM registration token of device. required.
     * </pre>
     *
     * <code>optional string fcm_token = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFcmTokenBytes() {
      return instance.getFcmTokenBytes();
    }
    /**
     * <pre>
     * FCM registration token of device. required.
     * </pre>
     *
     * <code>optional string fcm_token = 1;</code>
     */
    public Builder setFcmToken(
        java.lang.String value) {
      copyOnWrite();
      instance.setFcmToken(value);
      return this;
    }
    /**
     * <pre>
     * FCM registration token of device. required.
     * </pre>
     *
     * <code>optional string fcm_token = 1;</code>
     */
    public Builder clearFcmToken() {
      copyOnWrite();
      instance.clearFcmToken();
      return this;
    }
    /**
     * <pre>
     * FCM registration token of device. required.
     * </pre>
     *
     * <code>optional string fcm_token = 1;</code>
     */
    public Builder setFcmTokenBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setFcmTokenBytes(value);
      return this;
    }

    /**
     * <pre>
     * Subscription public key required for RFC 8291.
     * </pre>
     *
     * <code>optional bytes p256dh = 2;</code>
     */
    public com.google.protobuf.ByteString getP256Dh() {
      return instance.getP256Dh();
    }
    /**
     * <pre>
     * Subscription public key required for RFC 8291.
     * </pre>
     *
     * <code>optional bytes p256dh = 2;</code>
     */
    public Builder setP256Dh(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setP256Dh(value);
      return this;
    }
    /**
     * <pre>
     * Subscription public key required for RFC 8291.
     * </pre>
     *
     * <code>optional bytes p256dh = 2;</code>
     */
    public Builder clearP256Dh() {
      copyOnWrite();
      instance.clearP256Dh();
      return this;
    }

    /**
     * <pre>
     * Auth secret key required for RFC 8291.
     * </pre>
     *
     * <code>optional bytes auth_secret = 3;</code>
     */
    public com.google.protobuf.ByteString getAuthSecret() {
      return instance.getAuthSecret();
    }
    /**
     * <pre>
     * Auth secret key required for RFC 8291.
     * </pre>
     *
     * <code>optional bytes auth_secret = 3;</code>
     */
    public Builder setAuthSecret(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAuthSecret(value);
      return this;
    }
    /**
     * <pre>
     * Auth secret key required for RFC 8291.
     * </pre>
     *
     * <code>optional bytes auth_secret = 3;</code>
     */
    public Builder clearAuthSecret() {
      copyOnWrite();
      instance.clearAuthSecret();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:chrome_browser_sharing.RecipientInfo)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.components.sync.protocol.RecipientInfo();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.components.sync.protocol.RecipientInfo other = (org.chromium.components.sync.protocol.RecipientInfo) arg1;
        fcmToken_ = visitor.visitString(!fcmToken_.isEmpty(), fcmToken_,
            !other.fcmToken_.isEmpty(), other.fcmToken_);
        p256Dh_ = visitor.visitByteString(p256Dh_ != com.google.protobuf.ByteString.EMPTY, p256Dh_,
            other.p256Dh_ != com.google.protobuf.ByteString.EMPTY, other.p256Dh_);
        authSecret_ = visitor.visitByteString(authSecret_ != com.google.protobuf.ByteString.EMPTY, authSecret_,
            other.authSecret_ != com.google.protobuf.ByteString.EMPTY, other.authSecret_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                fcmToken_ = s;
                break;
              }
              case 18: {

                p256Dh_ = input.readBytes();
                break;
              }
              case 26: {

                authSecret_ = input.readBytes();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.components.sync.protocol.RecipientInfo.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.RecipientInfo)
  private static final org.chromium.components.sync.protocol.RecipientInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new RecipientInfo();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.components.sync.protocol.RecipientInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<RecipientInfo> PARSER;

  public static com.google.protobuf.Parser<RecipientInfo> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

