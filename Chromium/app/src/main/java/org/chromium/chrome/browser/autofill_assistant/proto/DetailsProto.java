// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * Protobuf type {@code autofill_assistant.DetailsProto}
 */
public  final class DetailsProto extends
    com.google.protobuf.GeneratedMessageLite<
        DetailsProto, DetailsProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.DetailsProto)
    DetailsProtoOrBuilder {
  private DetailsProto() {
    title_ = "";
    imageAccessibilityHint_ = "";
    totalPriceLabel_ = "";
    totalPrice_ = "";
    descriptionLine1_ = "";
    descriptionLine2_ = "";
    descriptionLine3_ = "";
    description_ = "";
  }
  public interface ImageClickthroughDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.DetailsProto.ImageClickthroughData)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Whether to show the original URL where image is extracted from. Only
     * useful when 'image_url' is set.
     * </pre>
     *
     * <code>optional bool allow_clickthrough = 1;</code>
     */
    boolean hasAllowClickthrough();
    /**
     * <pre>
     * Whether to show the original URL where image is extracted from. Only
     * useful when 'image_url' is set.
     * </pre>
     *
     * <code>optional bool allow_clickthrough = 1;</code>
     */
    boolean getAllowClickthrough();

    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    boolean hasDescription();
    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    java.lang.String getDescription();
    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <code>optional string positive_text = 3;</code>
     */
    boolean hasPositiveText();
    /**
     * <code>optional string positive_text = 3;</code>
     */
    java.lang.String getPositiveText();
    /**
     * <code>optional string positive_text = 3;</code>
     */
    com.google.protobuf.ByteString
        getPositiveTextBytes();

    /**
     * <code>optional string negative_text = 4;</code>
     */
    boolean hasNegativeText();
    /**
     * <code>optional string negative_text = 4;</code>
     */
    java.lang.String getNegativeText();
    /**
     * <code>optional string negative_text = 4;</code>
     */
    com.google.protobuf.ByteString
        getNegativeTextBytes();

    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    boolean hasClickthroughUrl();
    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    java.lang.String getClickthroughUrl();
    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    com.google.protobuf.ByteString
        getClickthroughUrlBytes();
  }
  /**
   * <pre>
   * Specifies what happens when user tap on the image in the details section.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.DetailsProto.ImageClickthroughData}
   */
  public  static final class ImageClickthroughData extends
      com.google.protobuf.GeneratedMessageLite<
          ImageClickthroughData, ImageClickthroughData.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.DetailsProto.ImageClickthroughData)
      ImageClickthroughDataOrBuilder {
    private ImageClickthroughData() {
      description_ = "";
      positiveText_ = "";
      negativeText_ = "";
      clickthroughUrl_ = "";
    }
    private int bitField0_;
    public static final int ALLOW_CLICKTHROUGH_FIELD_NUMBER = 1;
    private boolean allowClickthrough_;
    /**
     * <pre>
     * Whether to show the original URL where image is extracted from. Only
     * useful when 'image_url' is set.
     * </pre>
     *
     * <code>optional bool allow_clickthrough = 1;</code>
     */
    public boolean hasAllowClickthrough() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Whether to show the original URL where image is extracted from. Only
     * useful when 'image_url' is set.
     * </pre>
     *
     * <code>optional bool allow_clickthrough = 1;</code>
     */
    public boolean getAllowClickthrough() {
      return allowClickthrough_;
    }
    /**
     * <pre>
     * Whether to show the original URL where image is extracted from. Only
     * useful when 'image_url' is set.
     * </pre>
     *
     * <code>optional bool allow_clickthrough = 1;</code>
     */
    private void setAllowClickthrough(boolean value) {
      bitField0_ |= 0x00000001;
      allowClickthrough_ = value;
    }
    /**
     * <pre>
     * Whether to show the original URL where image is extracted from. Only
     * useful when 'image_url' is set.
     * </pre>
     *
     * <code>optional bool allow_clickthrough = 1;</code>
     */
    private void clearAllowClickthrough() {
      bitField0_ = (bitField0_ & ~0x00000001);
      allowClickthrough_ = false;
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 2;
    private java.lang.String description_;
    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    public boolean hasDescription() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    public java.lang.String getDescription() {
      return description_;
    }
    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(description_);
    }
    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    private void setDescription(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      description_ = value;
    }
    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    private void clearDescription() {
      bitField0_ = (bitField0_ & ~0x00000002);
      description_ = getDefaultInstance().getDescription();
    }
    /**
     * <pre>
     * When image clickthrough is allowed, below texts are used to customize the
     * modal dialog shown to user *if* they are set, otherwise default texts
     * will be used.
     * </pre>
     *
     * <code>optional string description = 2;</code>
     */
    private void setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      description_ = value.toStringUtf8();
    }

    public static final int POSITIVE_TEXT_FIELD_NUMBER = 3;
    private java.lang.String positiveText_;
    /**
     * <code>optional string positive_text = 3;</code>
     */
    public boolean hasPositiveText() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string positive_text = 3;</code>
     */
    public java.lang.String getPositiveText() {
      return positiveText_;
    }
    /**
     * <code>optional string positive_text = 3;</code>
     */
    public com.google.protobuf.ByteString
        getPositiveTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(positiveText_);
    }
    /**
     * <code>optional string positive_text = 3;</code>
     */
    private void setPositiveText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      positiveText_ = value;
    }
    /**
     * <code>optional string positive_text = 3;</code>
     */
    private void clearPositiveText() {
      bitField0_ = (bitField0_ & ~0x00000004);
      positiveText_ = getDefaultInstance().getPositiveText();
    }
    /**
     * <code>optional string positive_text = 3;</code>
     */
    private void setPositiveTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      positiveText_ = value.toStringUtf8();
    }

    public static final int NEGATIVE_TEXT_FIELD_NUMBER = 4;
    private java.lang.String negativeText_;
    /**
     * <code>optional string negative_text = 4;</code>
     */
    public boolean hasNegativeText() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string negative_text = 4;</code>
     */
    public java.lang.String getNegativeText() {
      return negativeText_;
    }
    /**
     * <code>optional string negative_text = 4;</code>
     */
    public com.google.protobuf.ByteString
        getNegativeTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(negativeText_);
    }
    /**
     * <code>optional string negative_text = 4;</code>
     */
    private void setNegativeText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      negativeText_ = value;
    }
    /**
     * <code>optional string negative_text = 4;</code>
     */
    private void clearNegativeText() {
      bitField0_ = (bitField0_ & ~0x00000008);
      negativeText_ = getDefaultInstance().getNegativeText();
    }
    /**
     * <code>optional string negative_text = 4;</code>
     */
    private void setNegativeTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      negativeText_ = value.toStringUtf8();
    }

    public static final int CLICKTHROUGH_URL_FIELD_NUMBER = 5;
    private java.lang.String clickthroughUrl_;
    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    public boolean hasClickthroughUrl() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    public java.lang.String getClickthroughUrl() {
      return clickthroughUrl_;
    }
    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    public com.google.protobuf.ByteString
        getClickthroughUrlBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(clickthroughUrl_);
    }
    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    private void setClickthroughUrl(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      clickthroughUrl_ = value;
    }
    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    private void clearClickthroughUrl() {
      bitField0_ = (bitField0_ & ~0x00000010);
      clickthroughUrl_ = getDefaultInstance().getClickthroughUrl();
    }
    /**
     * <pre>
     * The url to present when user did choose to clickthrough.
     * </pre>
     *
     * <code>optional string clickthrough_url = 5;</code>
     */
    private void setClickthroughUrlBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
      clickthroughUrl_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, allowClickthrough_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeString(2, getDescription());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeString(3, getPositiveText());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeString(4, getNegativeText());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeString(5, getClickthroughUrl());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, allowClickthrough_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getDescription());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getPositiveText());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getNegativeText());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getClickthroughUrl());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Specifies what happens when user tap on the image in the details section.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.DetailsProto.ImageClickthroughData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.DetailsProto.ImageClickthroughData)
        org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughDataOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Whether to show the original URL where image is extracted from. Only
       * useful when 'image_url' is set.
       * </pre>
       *
       * <code>optional bool allow_clickthrough = 1;</code>
       */
      public boolean hasAllowClickthrough() {
        return instance.hasAllowClickthrough();
      }
      /**
       * <pre>
       * Whether to show the original URL where image is extracted from. Only
       * useful when 'image_url' is set.
       * </pre>
       *
       * <code>optional bool allow_clickthrough = 1;</code>
       */
      public boolean getAllowClickthrough() {
        return instance.getAllowClickthrough();
      }
      /**
       * <pre>
       * Whether to show the original URL where image is extracted from. Only
       * useful when 'image_url' is set.
       * </pre>
       *
       * <code>optional bool allow_clickthrough = 1;</code>
       */
      public Builder setAllowClickthrough(boolean value) {
        copyOnWrite();
        instance.setAllowClickthrough(value);
        return this;
      }
      /**
       * <pre>
       * Whether to show the original URL where image is extracted from. Only
       * useful when 'image_url' is set.
       * </pre>
       *
       * <code>optional bool allow_clickthrough = 1;</code>
       */
      public Builder clearAllowClickthrough() {
        copyOnWrite();
        instance.clearAllowClickthrough();
        return this;
      }

      /**
       * <pre>
       * When image clickthrough is allowed, below texts are used to customize the
       * modal dialog shown to user *if* they are set, otherwise default texts
       * will be used.
       * </pre>
       *
       * <code>optional string description = 2;</code>
       */
      public boolean hasDescription() {
        return instance.hasDescription();
      }
      /**
       * <pre>
       * When image clickthrough is allowed, below texts are used to customize the
       * modal dialog shown to user *if* they are set, otherwise default texts
       * will be used.
       * </pre>
       *
       * <code>optional string description = 2;</code>
       */
      public java.lang.String getDescription() {
        return instance.getDescription();
      }
      /**
       * <pre>
       * When image clickthrough is allowed, below texts are used to customize the
       * modal dialog shown to user *if* they are set, otherwise default texts
       * will be used.
       * </pre>
       *
       * <code>optional string description = 2;</code>
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        return instance.getDescriptionBytes();
      }
      /**
       * <pre>
       * When image clickthrough is allowed, below texts are used to customize the
       * modal dialog shown to user *if* they are set, otherwise default texts
       * will be used.
       * </pre>
       *
       * <code>optional string description = 2;</code>
       */
      public Builder setDescription(
          java.lang.String value) {
        copyOnWrite();
        instance.setDescription(value);
        return this;
      }
      /**
       * <pre>
       * When image clickthrough is allowed, below texts are used to customize the
       * modal dialog shown to user *if* they are set, otherwise default texts
       * will be used.
       * </pre>
       *
       * <code>optional string description = 2;</code>
       */
      public Builder clearDescription() {
        copyOnWrite();
        instance.clearDescription();
        return this;
      }
      /**
       * <pre>
       * When image clickthrough is allowed, below texts are used to customize the
       * modal dialog shown to user *if* they are set, otherwise default texts
       * will be used.
       * </pre>
       *
       * <code>optional string description = 2;</code>
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDescriptionBytes(value);
        return this;
      }

      /**
       * <code>optional string positive_text = 3;</code>
       */
      public boolean hasPositiveText() {
        return instance.hasPositiveText();
      }
      /**
       * <code>optional string positive_text = 3;</code>
       */
      public java.lang.String getPositiveText() {
        return instance.getPositiveText();
      }
      /**
       * <code>optional string positive_text = 3;</code>
       */
      public com.google.protobuf.ByteString
          getPositiveTextBytes() {
        return instance.getPositiveTextBytes();
      }
      /**
       * <code>optional string positive_text = 3;</code>
       */
      public Builder setPositiveText(
          java.lang.String value) {
        copyOnWrite();
        instance.setPositiveText(value);
        return this;
      }
      /**
       * <code>optional string positive_text = 3;</code>
       */
      public Builder clearPositiveText() {
        copyOnWrite();
        instance.clearPositiveText();
        return this;
      }
      /**
       * <code>optional string positive_text = 3;</code>
       */
      public Builder setPositiveTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPositiveTextBytes(value);
        return this;
      }

      /**
       * <code>optional string negative_text = 4;</code>
       */
      public boolean hasNegativeText() {
        return instance.hasNegativeText();
      }
      /**
       * <code>optional string negative_text = 4;</code>
       */
      public java.lang.String getNegativeText() {
        return instance.getNegativeText();
      }
      /**
       * <code>optional string negative_text = 4;</code>
       */
      public com.google.protobuf.ByteString
          getNegativeTextBytes() {
        return instance.getNegativeTextBytes();
      }
      /**
       * <code>optional string negative_text = 4;</code>
       */
      public Builder setNegativeText(
          java.lang.String value) {
        copyOnWrite();
        instance.setNegativeText(value);
        return this;
      }
      /**
       * <code>optional string negative_text = 4;</code>
       */
      public Builder clearNegativeText() {
        copyOnWrite();
        instance.clearNegativeText();
        return this;
      }
      /**
       * <code>optional string negative_text = 4;</code>
       */
      public Builder setNegativeTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNegativeTextBytes(value);
        return this;
      }

      /**
       * <pre>
       * The url to present when user did choose to clickthrough.
       * </pre>
       *
       * <code>optional string clickthrough_url = 5;</code>
       */
      public boolean hasClickthroughUrl() {
        return instance.hasClickthroughUrl();
      }
      /**
       * <pre>
       * The url to present when user did choose to clickthrough.
       * </pre>
       *
       * <code>optional string clickthrough_url = 5;</code>
       */
      public java.lang.String getClickthroughUrl() {
        return instance.getClickthroughUrl();
      }
      /**
       * <pre>
       * The url to present when user did choose to clickthrough.
       * </pre>
       *
       * <code>optional string clickthrough_url = 5;</code>
       */
      public com.google.protobuf.ByteString
          getClickthroughUrlBytes() {
        return instance.getClickthroughUrlBytes();
      }
      /**
       * <pre>
       * The url to present when user did choose to clickthrough.
       * </pre>
       *
       * <code>optional string clickthrough_url = 5;</code>
       */
      public Builder setClickthroughUrl(
          java.lang.String value) {
        copyOnWrite();
        instance.setClickthroughUrl(value);
        return this;
      }
      /**
       * <pre>
       * The url to present when user did choose to clickthrough.
       * </pre>
       *
       * <code>optional string clickthrough_url = 5;</code>
       */
      public Builder clearClickthroughUrl() {
        copyOnWrite();
        instance.clearClickthroughUrl();
        return this;
      }
      /**
       * <pre>
       * The url to present when user did choose to clickthrough.
       * </pre>
       *
       * <code>optional string clickthrough_url = 5;</code>
       */
      public Builder setClickthroughUrlBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setClickthroughUrlBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.DetailsProto.ImageClickthroughData)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData other = (org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData) arg1;
          allowClickthrough_ = visitor.visitBoolean(
              hasAllowClickthrough(), allowClickthrough_,
              other.hasAllowClickthrough(), other.allowClickthrough_);
          description_ = visitor.visitString(
              hasDescription(), description_,
              other.hasDescription(), other.description_);
          positiveText_ = visitor.visitString(
              hasPositiveText(), positiveText_,
              other.hasPositiveText(), other.positiveText_);
          negativeText_ = visitor.visitString(
              hasNegativeText(), negativeText_,
              other.hasNegativeText(), other.negativeText_);
          clickthroughUrl_ = visitor.visitString(
              hasClickthroughUrl(), clickthroughUrl_,
              other.hasClickthroughUrl(), other.clickthroughUrl_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  allowClickthrough_ = input.readBool();
                  break;
                }
                case 18: {
                  String s = input.readString();
                  bitField0_ |= 0x00000002;
                  description_ = s;
                  break;
                }
                case 26: {
                  String s = input.readString();
                  bitField0_ |= 0x00000004;
                  positiveText_ = s;
                  break;
                }
                case 34: {
                  String s = input.readString();
                  bitField0_ |= 0x00000008;
                  negativeText_ = s;
                  break;
                }
                case 42: {
                  String s = input.readString();
                  bitField0_ |= 0x00000010;
                  clickthroughUrl_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.DetailsProto.ImageClickthroughData)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ImageClickthroughData();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ImageClickthroughData> PARSER;

    public static com.google.protobuf.Parser<ImageClickthroughData> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  private int imageCase_ = 0;
  private java.lang.Object image_;
  public enum ImageCase
      implements com.google.protobuf.Internal.EnumLite {
    IMAGE_URL(2),
    SHOW_IMAGE_PLACEHOLDER(10),
    IMAGE_NOT_SET(0);
    private final int value;
    private ImageCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ImageCase valueOf(int value) {
      return forNumber(value);
    }

    public static ImageCase forNumber(int value) {
      switch (value) {
        case 2: return IMAGE_URL;
        case 10: return SHOW_IMAGE_PLACEHOLDER;
        case 0: return IMAGE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ImageCase
  getImageCase() {
    return ImageCase.forNumber(
        imageCase_);
  }

  private void clearImage() {
    imageCase_ = 0;
    image_ = null;
  }

  public static final int TITLE_FIELD_NUMBER = 1;
  private java.lang.String title_;
  /**
   * <code>optional string title = 1;</code>
   */
  public boolean hasTitle() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional string title = 1;</code>
   */
  public java.lang.String getTitle() {
    return title_;
  }
  /**
   * <code>optional string title = 1;</code>
   */
  public com.google.protobuf.ByteString
      getTitleBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(title_);
  }
  /**
   * <code>optional string title = 1;</code>
   */
  private void setTitle(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    title_ = value;
  }
  /**
   * <code>optional string title = 1;</code>
   */
  private void clearTitle() {
    bitField0_ = (bitField0_ & ~0x00000001);
    title_ = getDefaultInstance().getTitle();
  }
  /**
   * <code>optional string title = 1;</code>
   */
  private void setTitleBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    title_ = value.toStringUtf8();
  }

  public static final int IMAGE_URL_FIELD_NUMBER = 2;
  /**
   * <code>optional string image_url = 2;</code>
   */
  public boolean hasImageUrl() {
    return imageCase_ == 2;
  }
  /**
   * <code>optional string image_url = 2;</code>
   */
  public java.lang.String getImageUrl() {
    java.lang.String ref = "";
    if (imageCase_ == 2) {
      ref = (java.lang.String) image_;
    }
    return ref;
  }
  /**
   * <code>optional string image_url = 2;</code>
   */
  public com.google.protobuf.ByteString
      getImageUrlBytes() {
    java.lang.String ref = "";
    if (imageCase_ == 2) {
      ref = (java.lang.String) image_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <code>optional string image_url = 2;</code>
   */
  private void setImageUrl(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  imageCase_ = 2;
    image_ = value;
  }
  /**
   * <code>optional string image_url = 2;</code>
   */
  private void clearImageUrl() {
    if (imageCase_ == 2) {
      imageCase_ = 0;
      image_ = null;
    }
  }
  /**
   * <code>optional string image_url = 2;</code>
   */
  private void setImageUrlBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  imageCase_ = 2;
    image_ = value.toStringUtf8();
  }

  public static final int SHOW_IMAGE_PLACEHOLDER_FIELD_NUMBER = 10;
  /**
   * <pre>
   * When set to true shows placeholder in place of an image.
   * </pre>
   *
   * <code>optional bool show_image_placeholder = 10;</code>
   */
  public boolean hasShowImagePlaceholder() {
    return imageCase_ == 10;
  }
  /**
   * <pre>
   * When set to true shows placeholder in place of an image.
   * </pre>
   *
   * <code>optional bool show_image_placeholder = 10;</code>
   */
  public boolean getShowImagePlaceholder() {
    if (imageCase_ == 10) {
      return (java.lang.Boolean) image_;
    }
    return false;
  }
  /**
   * <pre>
   * When set to true shows placeholder in place of an image.
   * </pre>
   *
   * <code>optional bool show_image_placeholder = 10;</code>
   */
  private void setShowImagePlaceholder(boolean value) {
    imageCase_ = 10;
    image_ = value;
  }
  /**
   * <pre>
   * When set to true shows placeholder in place of an image.
   * </pre>
   *
   * <code>optional bool show_image_placeholder = 10;</code>
   */
  private void clearShowImagePlaceholder() {
    if (imageCase_ == 10) {
      imageCase_ = 0;
      image_ = null;
    }
  }

  public static final int IMAGE_ACCESSIBILITY_HINT_FIELD_NUMBER = 14;
  private java.lang.String imageAccessibilityHint_;
  /**
   * <pre>
   * Specifies the hint for accessibility. If set to empty, the image will not
   * be announced by accessibility.
   * </pre>
   *
   * <code>optional string image_accessibility_hint = 14;</code>
   */
  public boolean hasImageAccessibilityHint() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * Specifies the hint for accessibility. If set to empty, the image will not
   * be announced by accessibility.
   * </pre>
   *
   * <code>optional string image_accessibility_hint = 14;</code>
   */
  public java.lang.String getImageAccessibilityHint() {
    return imageAccessibilityHint_;
  }
  /**
   * <pre>
   * Specifies the hint for accessibility. If set to empty, the image will not
   * be announced by accessibility.
   * </pre>
   *
   * <code>optional string image_accessibility_hint = 14;</code>
   */
  public com.google.protobuf.ByteString
      getImageAccessibilityHintBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(imageAccessibilityHint_);
  }
  /**
   * <pre>
   * Specifies the hint for accessibility. If set to empty, the image will not
   * be announced by accessibility.
   * </pre>
   *
   * <code>optional string image_accessibility_hint = 14;</code>
   */
  private void setImageAccessibilityHint(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    imageAccessibilityHint_ = value;
  }
  /**
   * <pre>
   * Specifies the hint for accessibility. If set to empty, the image will not
   * be announced by accessibility.
   * </pre>
   *
   * <code>optional string image_accessibility_hint = 14;</code>
   */
  private void clearImageAccessibilityHint() {
    bitField0_ = (bitField0_ & ~0x00000008);
    imageAccessibilityHint_ = getDefaultInstance().getImageAccessibilityHint();
  }
  /**
   * <pre>
   * Specifies the hint for accessibility. If set to empty, the image will not
   * be announced by accessibility.
   * </pre>
   *
   * <code>optional string image_accessibility_hint = 14;</code>
   */
  private void setImageAccessibilityHintBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    imageAccessibilityHint_ = value.toStringUtf8();
  }

  public static final int IMAGE_CLICKTHROUGH_DATA_FIELD_NUMBER = 12;
  private org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData imageClickthroughData_;
  /**
   * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
   */
  public boolean hasImageClickthroughData() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData getImageClickthroughData() {
    return imageClickthroughData_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.getDefaultInstance() : imageClickthroughData_;
  }
  /**
   * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
   */
  private void setImageClickthroughData(org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData value) {
    if (value == null) {
      throw new NullPointerException();
    }
    imageClickthroughData_ = value;
    bitField0_ |= 0x00000010;
    }
  /**
   * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
   */
  private void setImageClickthroughData(
      org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.Builder builderForValue) {
    imageClickthroughData_ = builderForValue.build();
    bitField0_ |= 0x00000010;
  }
  /**
   * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
   */
  private void mergeImageClickthroughData(org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData value) {
    if (imageClickthroughData_ != null &&
        imageClickthroughData_ != org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.getDefaultInstance()) {
      imageClickthroughData_ =
        org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.newBuilder(imageClickthroughData_).mergeFrom(value).buildPartial();
    } else {
      imageClickthroughData_ = value;
    }
    bitField0_ |= 0x00000010;
  }
  /**
   * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
   */
  private void clearImageClickthroughData() {  imageClickthroughData_ = null;
    bitField0_ = (bitField0_ & ~0x00000010);
  }

  public static final int TOTAL_PRICE_LABEL_FIELD_NUMBER = 9;
  private java.lang.String totalPriceLabel_;
  /**
   * <pre>
   * Optional label to provide additional price information.
   * </pre>
   *
   * <code>optional string total_price_label = 9;</code>
   */
  public boolean hasTotalPriceLabel() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * Optional label to provide additional price information.
   * </pre>
   *
   * <code>optional string total_price_label = 9;</code>
   */
  public java.lang.String getTotalPriceLabel() {
    return totalPriceLabel_;
  }
  /**
   * <pre>
   * Optional label to provide additional price information.
   * </pre>
   *
   * <code>optional string total_price_label = 9;</code>
   */
  public com.google.protobuf.ByteString
      getTotalPriceLabelBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(totalPriceLabel_);
  }
  /**
   * <pre>
   * Optional label to provide additional price information.
   * </pre>
   *
   * <code>optional string total_price_label = 9;</code>
   */
  private void setTotalPriceLabel(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    totalPriceLabel_ = value;
  }
  /**
   * <pre>
   * Optional label to provide additional price information.
   * </pre>
   *
   * <code>optional string total_price_label = 9;</code>
   */
  private void clearTotalPriceLabel() {
    bitField0_ = (bitField0_ & ~0x00000020);
    totalPriceLabel_ = getDefaultInstance().getTotalPriceLabel();
  }
  /**
   * <pre>
   * Optional label to provide additional price information.
   * </pre>
   *
   * <code>optional string total_price_label = 9;</code>
   */
  private void setTotalPriceLabelBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    totalPriceLabel_ = value.toStringUtf8();
  }

  public static final int TOTAL_PRICE_FIELD_NUMBER = 6;
  private java.lang.String totalPrice_;
  /**
   * <pre>
   * The price containing the total amount and the currency to pay, formatted
   * in the client's locale (e.g., $123.00).
   * </pre>
   *
   * <code>optional string total_price = 6;</code>
   */
  public boolean hasTotalPrice() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * The price containing the total amount and the currency to pay, formatted
   * in the client's locale (e.g., $123.00).
   * </pre>
   *
   * <code>optional string total_price = 6;</code>
   */
  public java.lang.String getTotalPrice() {
    return totalPrice_;
  }
  /**
   * <pre>
   * The price containing the total amount and the currency to pay, formatted
   * in the client's locale (e.g., $123.00).
   * </pre>
   *
   * <code>optional string total_price = 6;</code>
   */
  public com.google.protobuf.ByteString
      getTotalPriceBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(totalPrice_);
  }
  /**
   * <pre>
   * The price containing the total amount and the currency to pay, formatted
   * in the client's locale (e.g., $123.00).
   * </pre>
   *
   * <code>optional string total_price = 6;</code>
   */
  private void setTotalPrice(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    totalPrice_ = value;
  }
  /**
   * <pre>
   * The price containing the total amount and the currency to pay, formatted
   * in the client's locale (e.g., $123.00).
   * </pre>
   *
   * <code>optional string total_price = 6;</code>
   */
  private void clearTotalPrice() {
    bitField0_ = (bitField0_ & ~0x00000040);
    totalPrice_ = getDefaultInstance().getTotalPrice();
  }
  /**
   * <pre>
   * The price containing the total amount and the currency to pay, formatted
   * in the client's locale (e.g., $123.00).
   * </pre>
   *
   * <code>optional string total_price = 6;</code>
   */
  private void setTotalPriceBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
    totalPrice_ = value.toStringUtf8();
  }

  public static final int DESCRIPTION_LINE_1_FIELD_NUMBER = 7;
  private java.lang.String descriptionLine1_;
  /**
   * <code>optional string description_line_1 = 7;</code>
   */
  public boolean hasDescriptionLine1() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional string description_line_1 = 7;</code>
   */
  public java.lang.String getDescriptionLine1() {
    return descriptionLine1_;
  }
  /**
   * <code>optional string description_line_1 = 7;</code>
   */
  public com.google.protobuf.ByteString
      getDescriptionLine1Bytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(descriptionLine1_);
  }
  /**
   * <code>optional string description_line_1 = 7;</code>
   */
  private void setDescriptionLine1(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
    descriptionLine1_ = value;
  }
  /**
   * <code>optional string description_line_1 = 7;</code>
   */
  private void clearDescriptionLine1() {
    bitField0_ = (bitField0_ & ~0x00000080);
    descriptionLine1_ = getDefaultInstance().getDescriptionLine1();
  }
  /**
   * <code>optional string description_line_1 = 7;</code>
   */
  private void setDescriptionLine1Bytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
    descriptionLine1_ = value.toStringUtf8();
  }

  public static final int DESCRIPTION_LINE_2_FIELD_NUMBER = 8;
  private java.lang.String descriptionLine2_;
  /**
   * <code>optional string description_line_2 = 8;</code>
   */
  public boolean hasDescriptionLine2() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional string description_line_2 = 8;</code>
   */
  public java.lang.String getDescriptionLine2() {
    return descriptionLine2_;
  }
  /**
   * <code>optional string description_line_2 = 8;</code>
   */
  public com.google.protobuf.ByteString
      getDescriptionLine2Bytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(descriptionLine2_);
  }
  /**
   * <code>optional string description_line_2 = 8;</code>
   */
  private void setDescriptionLine2(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
    descriptionLine2_ = value;
  }
  /**
   * <code>optional string description_line_2 = 8;</code>
   */
  private void clearDescriptionLine2() {
    bitField0_ = (bitField0_ & ~0x00000100);
    descriptionLine2_ = getDefaultInstance().getDescriptionLine2();
  }
  /**
   * <code>optional string description_line_2 = 8;</code>
   */
  private void setDescriptionLine2Bytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
    descriptionLine2_ = value.toStringUtf8();
  }

  public static final int DESCRIPTION_LINE_3_FIELD_NUMBER = 13;
  private java.lang.String descriptionLine3_;
  /**
   * <code>optional string description_line_3 = 13;</code>
   */
  public boolean hasDescriptionLine3() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional string description_line_3 = 13;</code>
   */
  public java.lang.String getDescriptionLine3() {
    return descriptionLine3_;
  }
  /**
   * <code>optional string description_line_3 = 13;</code>
   */
  public com.google.protobuf.ByteString
      getDescriptionLine3Bytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(descriptionLine3_);
  }
  /**
   * <code>optional string description_line_3 = 13;</code>
   */
  private void setDescriptionLine3(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
    descriptionLine3_ = value;
  }
  /**
   * <code>optional string description_line_3 = 13;</code>
   */
  private void clearDescriptionLine3() {
    bitField0_ = (bitField0_ & ~0x00000200);
    descriptionLine3_ = getDefaultInstance().getDescriptionLine3();
  }
  /**
   * <code>optional string description_line_3 = 13;</code>
   */
  private void setDescriptionLine3Bytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
    descriptionLine3_ = value.toStringUtf8();
  }

  public static final int DATETIME_FIELD_NUMBER = 3;
  private org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto datetime_;
  /**
   * <pre>
   * Deprecated, but currently still necessary and supported. We can get rid of
   * these fields when the backend starts setting description_line_1 and 2.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
   */
  public boolean hasDatetime() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <pre>
   * Deprecated, but currently still necessary and supported. We can get rid of
   * these fields when the backend starts setting description_line_1 and 2.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto getDatetime() {
    return datetime_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto.getDefaultInstance() : datetime_;
  }
  /**
   * <pre>
   * Deprecated, but currently still necessary and supported. We can get rid of
   * these fields when the backend starts setting description_line_1 and 2.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
   */
  private void setDatetime(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    datetime_ = value;
    bitField0_ |= 0x00000400;
    }
  /**
   * <pre>
   * Deprecated, but currently still necessary and supported. We can get rid of
   * these fields when the backend starts setting description_line_1 and 2.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
   */
  private void setDatetime(
      org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto.Builder builderForValue) {
    datetime_ = builderForValue.build();
    bitField0_ |= 0x00000400;
  }
  /**
   * <pre>
   * Deprecated, but currently still necessary and supported. We can get rid of
   * these fields when the backend starts setting description_line_1 and 2.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
   */
  private void mergeDatetime(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto value) {
    if (datetime_ != null &&
        datetime_ != org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto.getDefaultInstance()) {
      datetime_ =
        org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto.newBuilder(datetime_).mergeFrom(value).buildPartial();
    } else {
      datetime_ = value;
    }
    bitField0_ |= 0x00000400;
  }
  /**
   * <pre>
   * Deprecated, but currently still necessary and supported. We can get rid of
   * these fields when the backend starts setting description_line_1 and 2.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
   */
  private void clearDatetime() {  datetime_ = null;
    bitField0_ = (bitField0_ & ~0x00000400);
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 4;
  private java.lang.String description_;
  /**
   * <code>optional string description = 4;</code>
   */
  public boolean hasDescription() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>optional string description = 4;</code>
   */
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <code>optional string description = 4;</code>
   */
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <code>optional string description = 4;</code>
   */
  private void setDescription(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    description_ = value;
  }
  /**
   * <code>optional string description = 4;</code>
   */
  private void clearDescription() {
    bitField0_ = (bitField0_ & ~0x00000800);
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <code>optional string description = 4;</code>
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    description_ = value.toStringUtf8();
  }

  public static final int ANIMATE_PLACEHOLDERS_FIELD_NUMBER = 11;
  private boolean animatePlaceholders_;
  /**
   * <pre>
   * Asks the UI to show animated placeholders for missing fields.
   * The placeholder will be shown on effectively missing:
   * * title
   * * image
   * * description line (1, 2 or 3)
   * TODO(crbug.com/806868): Make the fields for displaying placeholders
   * configurable by the server.
   * </pre>
   *
   * <code>optional bool animate_placeholders = 11;</code>
   */
  public boolean hasAnimatePlaceholders() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <pre>
   * Asks the UI to show animated placeholders for missing fields.
   * The placeholder will be shown on effectively missing:
   * * title
   * * image
   * * description line (1, 2 or 3)
   * TODO(crbug.com/806868): Make the fields for displaying placeholders
   * configurable by the server.
   * </pre>
   *
   * <code>optional bool animate_placeholders = 11;</code>
   */
  public boolean getAnimatePlaceholders() {
    return animatePlaceholders_;
  }
  /**
   * <pre>
   * Asks the UI to show animated placeholders for missing fields.
   * The placeholder will be shown on effectively missing:
   * * title
   * * image
   * * description line (1, 2 or 3)
   * TODO(crbug.com/806868): Make the fields for displaying placeholders
   * configurable by the server.
   * </pre>
   *
   * <code>optional bool animate_placeholders = 11;</code>
   */
  private void setAnimatePlaceholders(boolean value) {
    bitField0_ |= 0x00001000;
    animatePlaceholders_ = value;
  }
  /**
   * <pre>
   * Asks the UI to show animated placeholders for missing fields.
   * The placeholder will be shown on effectively missing:
   * * title
   * * image
   * * description line (1, 2 or 3)
   * TODO(crbug.com/806868): Make the fields for displaying placeholders
   * configurable by the server.
   * </pre>
   *
   * <code>optional bool animate_placeholders = 11;</code>
   */
  private void clearAnimatePlaceholders() {
    bitField0_ = (bitField0_ & ~0x00001000);
    animatePlaceholders_ = false;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getTitle());
    }
    if (imageCase_ == 2) {
      output.writeString(2, getImageUrl());
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeMessage(3, getDatetime());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeString(4, getDescription());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeString(6, getTotalPrice());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeString(7, getDescriptionLine1());
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeString(8, getDescriptionLine2());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeString(9, getTotalPriceLabel());
    }
    if (imageCase_ == 10) {
      output.writeBool(
          10, (boolean)((java.lang.Boolean) image_));
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeBool(11, animatePlaceholders_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeMessage(12, getImageClickthroughData());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeString(13, getDescriptionLine3());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeString(14, getImageAccessibilityHint());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getTitle());
    }
    if (imageCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getImageUrl());
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getDatetime());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getDescription());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(6, getTotalPrice());
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(7, getDescriptionLine1());
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(8, getDescriptionLine2());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(9, getTotalPriceLabel());
    }
    if (imageCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(
            10, (boolean)((java.lang.Boolean) image_));
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(11, animatePlaceholders_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getImageClickthroughData());
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(13, getDescriptionLine3());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(14, getImageAccessibilityHint());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code autofill_assistant.DetailsProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.DetailsProto)
      org.chromium.chrome.browser.autofill_assistant.proto.DetailsProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public ImageCase
        getImageCase() {
      return instance.getImageCase();
    }

    public Builder clearImage() {
      copyOnWrite();
      instance.clearImage();
      return this;
    }


    /**
     * <code>optional string title = 1;</code>
     */
    public boolean hasTitle() {
      return instance.hasTitle();
    }
    /**
     * <code>optional string title = 1;</code>
     */
    public java.lang.String getTitle() {
      return instance.getTitle();
    }
    /**
     * <code>optional string title = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTitleBytes() {
      return instance.getTitleBytes();
    }
    /**
     * <code>optional string title = 1;</code>
     */
    public Builder setTitle(
        java.lang.String value) {
      copyOnWrite();
      instance.setTitle(value);
      return this;
    }
    /**
     * <code>optional string title = 1;</code>
     */
    public Builder clearTitle() {
      copyOnWrite();
      instance.clearTitle();
      return this;
    }
    /**
     * <code>optional string title = 1;</code>
     */
    public Builder setTitleBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTitleBytes(value);
      return this;
    }

    /**
     * <code>optional string image_url = 2;</code>
     */
    public boolean hasImageUrl() {
      return instance.hasImageUrl();
    }
    /**
     * <code>optional string image_url = 2;</code>
     */
    public java.lang.String getImageUrl() {
      return instance.getImageUrl();
    }
    /**
     * <code>optional string image_url = 2;</code>
     */
    public com.google.protobuf.ByteString
        getImageUrlBytes() {
      return instance.getImageUrlBytes();
    }
    /**
     * <code>optional string image_url = 2;</code>
     */
    public Builder setImageUrl(
        java.lang.String value) {
      copyOnWrite();
      instance.setImageUrl(value);
      return this;
    }
    /**
     * <code>optional string image_url = 2;</code>
     */
    public Builder clearImageUrl() {
      copyOnWrite();
      instance.clearImageUrl();
      return this;
    }
    /**
     * <code>optional string image_url = 2;</code>
     */
    public Builder setImageUrlBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setImageUrlBytes(value);
      return this;
    }

    /**
     * <pre>
     * When set to true shows placeholder in place of an image.
     * </pre>
     *
     * <code>optional bool show_image_placeholder = 10;</code>
     */
    public boolean hasShowImagePlaceholder() {
      return instance.hasShowImagePlaceholder();
    }
    /**
     * <pre>
     * When set to true shows placeholder in place of an image.
     * </pre>
     *
     * <code>optional bool show_image_placeholder = 10;</code>
     */
    public boolean getShowImagePlaceholder() {
      return instance.getShowImagePlaceholder();
    }
    /**
     * <pre>
     * When set to true shows placeholder in place of an image.
     * </pre>
     *
     * <code>optional bool show_image_placeholder = 10;</code>
     */
    public Builder setShowImagePlaceholder(boolean value) {
      copyOnWrite();
      instance.setShowImagePlaceholder(value);
      return this;
    }
    /**
     * <pre>
     * When set to true shows placeholder in place of an image.
     * </pre>
     *
     * <code>optional bool show_image_placeholder = 10;</code>
     */
    public Builder clearShowImagePlaceholder() {
      copyOnWrite();
      instance.clearShowImagePlaceholder();
      return this;
    }

    /**
     * <pre>
     * Specifies the hint for accessibility. If set to empty, the image will not
     * be announced by accessibility.
     * </pre>
     *
     * <code>optional string image_accessibility_hint = 14;</code>
     */
    public boolean hasImageAccessibilityHint() {
      return instance.hasImageAccessibilityHint();
    }
    /**
     * <pre>
     * Specifies the hint for accessibility. If set to empty, the image will not
     * be announced by accessibility.
     * </pre>
     *
     * <code>optional string image_accessibility_hint = 14;</code>
     */
    public java.lang.String getImageAccessibilityHint() {
      return instance.getImageAccessibilityHint();
    }
    /**
     * <pre>
     * Specifies the hint for accessibility. If set to empty, the image will not
     * be announced by accessibility.
     * </pre>
     *
     * <code>optional string image_accessibility_hint = 14;</code>
     */
    public com.google.protobuf.ByteString
        getImageAccessibilityHintBytes() {
      return instance.getImageAccessibilityHintBytes();
    }
    /**
     * <pre>
     * Specifies the hint for accessibility. If set to empty, the image will not
     * be announced by accessibility.
     * </pre>
     *
     * <code>optional string image_accessibility_hint = 14;</code>
     */
    public Builder setImageAccessibilityHint(
        java.lang.String value) {
      copyOnWrite();
      instance.setImageAccessibilityHint(value);
      return this;
    }
    /**
     * <pre>
     * Specifies the hint for accessibility. If set to empty, the image will not
     * be announced by accessibility.
     * </pre>
     *
     * <code>optional string image_accessibility_hint = 14;</code>
     */
    public Builder clearImageAccessibilityHint() {
      copyOnWrite();
      instance.clearImageAccessibilityHint();
      return this;
    }
    /**
     * <pre>
     * Specifies the hint for accessibility. If set to empty, the image will not
     * be announced by accessibility.
     * </pre>
     *
     * <code>optional string image_accessibility_hint = 14;</code>
     */
    public Builder setImageAccessibilityHintBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setImageAccessibilityHintBytes(value);
      return this;
    }

    /**
     * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
     */
    public boolean hasImageClickthroughData() {
      return instance.hasImageClickthroughData();
    }
    /**
     * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData getImageClickthroughData() {
      return instance.getImageClickthroughData();
    }
    /**
     * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
     */
    public Builder setImageClickthroughData(org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData value) {
      copyOnWrite();
      instance.setImageClickthroughData(value);
      return this;
      }
    /**
     * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
     */
    public Builder setImageClickthroughData(
        org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.Builder builderForValue) {
      copyOnWrite();
      instance.setImageClickthroughData(builderForValue);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
     */
    public Builder mergeImageClickthroughData(org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData value) {
      copyOnWrite();
      instance.mergeImageClickthroughData(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.DetailsProto.ImageClickthroughData image_clickthrough_data = 12;</code>
     */
    public Builder clearImageClickthroughData() {  copyOnWrite();
      instance.clearImageClickthroughData();
      return this;
    }

    /**
     * <pre>
     * Optional label to provide additional price information.
     * </pre>
     *
     * <code>optional string total_price_label = 9;</code>
     */
    public boolean hasTotalPriceLabel() {
      return instance.hasTotalPriceLabel();
    }
    /**
     * <pre>
     * Optional label to provide additional price information.
     * </pre>
     *
     * <code>optional string total_price_label = 9;</code>
     */
    public java.lang.String getTotalPriceLabel() {
      return instance.getTotalPriceLabel();
    }
    /**
     * <pre>
     * Optional label to provide additional price information.
     * </pre>
     *
     * <code>optional string total_price_label = 9;</code>
     */
    public com.google.protobuf.ByteString
        getTotalPriceLabelBytes() {
      return instance.getTotalPriceLabelBytes();
    }
    /**
     * <pre>
     * Optional label to provide additional price information.
     * </pre>
     *
     * <code>optional string total_price_label = 9;</code>
     */
    public Builder setTotalPriceLabel(
        java.lang.String value) {
      copyOnWrite();
      instance.setTotalPriceLabel(value);
      return this;
    }
    /**
     * <pre>
     * Optional label to provide additional price information.
     * </pre>
     *
     * <code>optional string total_price_label = 9;</code>
     */
    public Builder clearTotalPriceLabel() {
      copyOnWrite();
      instance.clearTotalPriceLabel();
      return this;
    }
    /**
     * <pre>
     * Optional label to provide additional price information.
     * </pre>
     *
     * <code>optional string total_price_label = 9;</code>
     */
    public Builder setTotalPriceLabelBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTotalPriceLabelBytes(value);
      return this;
    }

    /**
     * <pre>
     * The price containing the total amount and the currency to pay, formatted
     * in the client's locale (e.g., $123.00).
     * </pre>
     *
     * <code>optional string total_price = 6;</code>
     */
    public boolean hasTotalPrice() {
      return instance.hasTotalPrice();
    }
    /**
     * <pre>
     * The price containing the total amount and the currency to pay, formatted
     * in the client's locale (e.g., $123.00).
     * </pre>
     *
     * <code>optional string total_price = 6;</code>
     */
    public java.lang.String getTotalPrice() {
      return instance.getTotalPrice();
    }
    /**
     * <pre>
     * The price containing the total amount and the currency to pay, formatted
     * in the client's locale (e.g., $123.00).
     * </pre>
     *
     * <code>optional string total_price = 6;</code>
     */
    public com.google.protobuf.ByteString
        getTotalPriceBytes() {
      return instance.getTotalPriceBytes();
    }
    /**
     * <pre>
     * The price containing the total amount and the currency to pay, formatted
     * in the client's locale (e.g., $123.00).
     * </pre>
     *
     * <code>optional string total_price = 6;</code>
     */
    public Builder setTotalPrice(
        java.lang.String value) {
      copyOnWrite();
      instance.setTotalPrice(value);
      return this;
    }
    /**
     * <pre>
     * The price containing the total amount and the currency to pay, formatted
     * in the client's locale (e.g., $123.00).
     * </pre>
     *
     * <code>optional string total_price = 6;</code>
     */
    public Builder clearTotalPrice() {
      copyOnWrite();
      instance.clearTotalPrice();
      return this;
    }
    /**
     * <pre>
     * The price containing the total amount and the currency to pay, formatted
     * in the client's locale (e.g., $123.00).
     * </pre>
     *
     * <code>optional string total_price = 6;</code>
     */
    public Builder setTotalPriceBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTotalPriceBytes(value);
      return this;
    }

    /**
     * <code>optional string description_line_1 = 7;</code>
     */
    public boolean hasDescriptionLine1() {
      return instance.hasDescriptionLine1();
    }
    /**
     * <code>optional string description_line_1 = 7;</code>
     */
    public java.lang.String getDescriptionLine1() {
      return instance.getDescriptionLine1();
    }
    /**
     * <code>optional string description_line_1 = 7;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionLine1Bytes() {
      return instance.getDescriptionLine1Bytes();
    }
    /**
     * <code>optional string description_line_1 = 7;</code>
     */
    public Builder setDescriptionLine1(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescriptionLine1(value);
      return this;
    }
    /**
     * <code>optional string description_line_1 = 7;</code>
     */
    public Builder clearDescriptionLine1() {
      copyOnWrite();
      instance.clearDescriptionLine1();
      return this;
    }
    /**
     * <code>optional string description_line_1 = 7;</code>
     */
    public Builder setDescriptionLine1Bytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionLine1Bytes(value);
      return this;
    }

    /**
     * <code>optional string description_line_2 = 8;</code>
     */
    public boolean hasDescriptionLine2() {
      return instance.hasDescriptionLine2();
    }
    /**
     * <code>optional string description_line_2 = 8;</code>
     */
    public java.lang.String getDescriptionLine2() {
      return instance.getDescriptionLine2();
    }
    /**
     * <code>optional string description_line_2 = 8;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionLine2Bytes() {
      return instance.getDescriptionLine2Bytes();
    }
    /**
     * <code>optional string description_line_2 = 8;</code>
     */
    public Builder setDescriptionLine2(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescriptionLine2(value);
      return this;
    }
    /**
     * <code>optional string description_line_2 = 8;</code>
     */
    public Builder clearDescriptionLine2() {
      copyOnWrite();
      instance.clearDescriptionLine2();
      return this;
    }
    /**
     * <code>optional string description_line_2 = 8;</code>
     */
    public Builder setDescriptionLine2Bytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionLine2Bytes(value);
      return this;
    }

    /**
     * <code>optional string description_line_3 = 13;</code>
     */
    public boolean hasDescriptionLine3() {
      return instance.hasDescriptionLine3();
    }
    /**
     * <code>optional string description_line_3 = 13;</code>
     */
    public java.lang.String getDescriptionLine3() {
      return instance.getDescriptionLine3();
    }
    /**
     * <code>optional string description_line_3 = 13;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionLine3Bytes() {
      return instance.getDescriptionLine3Bytes();
    }
    /**
     * <code>optional string description_line_3 = 13;</code>
     */
    public Builder setDescriptionLine3(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescriptionLine3(value);
      return this;
    }
    /**
     * <code>optional string description_line_3 = 13;</code>
     */
    public Builder clearDescriptionLine3() {
      copyOnWrite();
      instance.clearDescriptionLine3();
      return this;
    }
    /**
     * <code>optional string description_line_3 = 13;</code>
     */
    public Builder setDescriptionLine3Bytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionLine3Bytes(value);
      return this;
    }

    /**
     * <pre>
     * Deprecated, but currently still necessary and supported. We can get rid of
     * these fields when the backend starts setting description_line_1 and 2.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
     */
    public boolean hasDatetime() {
      return instance.hasDatetime();
    }
    /**
     * <pre>
     * Deprecated, but currently still necessary and supported. We can get rid of
     * these fields when the backend starts setting description_line_1 and 2.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto getDatetime() {
      return instance.getDatetime();
    }
    /**
     * <pre>
     * Deprecated, but currently still necessary and supported. We can get rid of
     * these fields when the backend starts setting description_line_1 and 2.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
     */
    public Builder setDatetime(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto value) {
      copyOnWrite();
      instance.setDatetime(value);
      return this;
      }
    /**
     * <pre>
     * Deprecated, but currently still necessary and supported. We can get rid of
     * these fields when the backend starts setting description_line_1 and 2.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
     */
    public Builder setDatetime(
        org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto.Builder builderForValue) {
      copyOnWrite();
      instance.setDatetime(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Deprecated, but currently still necessary and supported. We can get rid of
     * these fields when the backend starts setting description_line_1 and 2.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
     */
    public Builder mergeDatetime(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto value) {
      copyOnWrite();
      instance.mergeDatetime(value);
      return this;
    }
    /**
     * <pre>
     * Deprecated, but currently still necessary and supported. We can get rid of
     * these fields when the backend starts setting description_line_1 and 2.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeProto datetime = 3;</code>
     */
    public Builder clearDatetime() {  copyOnWrite();
      instance.clearDatetime();
      return this;
    }

    /**
     * <code>optional string description = 4;</code>
     */
    public boolean hasDescription() {
      return instance.hasDescription();
    }
    /**
     * <code>optional string description = 4;</code>
     */
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <code>optional string description = 4;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <code>optional string description = 4;</code>
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <code>optional string description = 4;</code>
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <code>optional string description = 4;</code>
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * Asks the UI to show animated placeholders for missing fields.
     * The placeholder will be shown on effectively missing:
     * * title
     * * image
     * * description line (1, 2 or 3)
     * TODO(crbug.com/806868): Make the fields for displaying placeholders
     * configurable by the server.
     * </pre>
     *
     * <code>optional bool animate_placeholders = 11;</code>
     */
    public boolean hasAnimatePlaceholders() {
      return instance.hasAnimatePlaceholders();
    }
    /**
     * <pre>
     * Asks the UI to show animated placeholders for missing fields.
     * The placeholder will be shown on effectively missing:
     * * title
     * * image
     * * description line (1, 2 or 3)
     * TODO(crbug.com/806868): Make the fields for displaying placeholders
     * configurable by the server.
     * </pre>
     *
     * <code>optional bool animate_placeholders = 11;</code>
     */
    public boolean getAnimatePlaceholders() {
      return instance.getAnimatePlaceholders();
    }
    /**
     * <pre>
     * Asks the UI to show animated placeholders for missing fields.
     * The placeholder will be shown on effectively missing:
     * * title
     * * image
     * * description line (1, 2 or 3)
     * TODO(crbug.com/806868): Make the fields for displaying placeholders
     * configurable by the server.
     * </pre>
     *
     * <code>optional bool animate_placeholders = 11;</code>
     */
    public Builder setAnimatePlaceholders(boolean value) {
      copyOnWrite();
      instance.setAnimatePlaceholders(value);
      return this;
    }
    /**
     * <pre>
     * Asks the UI to show animated placeholders for missing fields.
     * The placeholder will be shown on effectively missing:
     * * title
     * * image
     * * description line (1, 2 or 3)
     * TODO(crbug.com/806868): Make the fields for displaying placeholders
     * configurable by the server.
     * </pre>
     *
     * <code>optional bool animate_placeholders = 11;</code>
     */
    public Builder clearAnimatePlaceholders() {
      copyOnWrite();
      instance.clearAnimatePlaceholders();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.DetailsProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto other = (org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto) arg1;
        title_ = visitor.visitString(
            hasTitle(), title_,
            other.hasTitle(), other.title_);
        imageAccessibilityHint_ = visitor.visitString(
            hasImageAccessibilityHint(), imageAccessibilityHint_,
            other.hasImageAccessibilityHint(), other.imageAccessibilityHint_);
        imageClickthroughData_ = visitor.visitMessage(imageClickthroughData_, other.imageClickthroughData_);
        totalPriceLabel_ = visitor.visitString(
            hasTotalPriceLabel(), totalPriceLabel_,
            other.hasTotalPriceLabel(), other.totalPriceLabel_);
        totalPrice_ = visitor.visitString(
            hasTotalPrice(), totalPrice_,
            other.hasTotalPrice(), other.totalPrice_);
        descriptionLine1_ = visitor.visitString(
            hasDescriptionLine1(), descriptionLine1_,
            other.hasDescriptionLine1(), other.descriptionLine1_);
        descriptionLine2_ = visitor.visitString(
            hasDescriptionLine2(), descriptionLine2_,
            other.hasDescriptionLine2(), other.descriptionLine2_);
        descriptionLine3_ = visitor.visitString(
            hasDescriptionLine3(), descriptionLine3_,
            other.hasDescriptionLine3(), other.descriptionLine3_);
        datetime_ = visitor.visitMessage(datetime_, other.datetime_);
        description_ = visitor.visitString(
            hasDescription(), description_,
            other.hasDescription(), other.description_);
        animatePlaceholders_ = visitor.visitBoolean(
            hasAnimatePlaceholders(), animatePlaceholders_,
            other.hasAnimatePlaceholders(), other.animatePlaceholders_);
        switch (other.getImageCase()) {
          case IMAGE_URL: {
            image_ = visitor.visitOneofString(
               imageCase_ == 2, image_, other.image_);
            break;
          }
          case SHOW_IMAGE_PLACEHOLDER: {
            image_ = visitor.visitOneofBoolean(
                imageCase_ == 10, image_, other.image_);
            break;
          }
          case IMAGE_NOT_SET: {
            visitor.visitOneofNotSet(imageCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.imageCase_ != 0) {
            imageCase_ = other.imageCase_;
          }
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                title_ = s;
                break;
              }
              case 18: {
                String s = input.readString();
                imageCase_ = 2;
                image_ = s;
                break;
              }
              case 26: {
                org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000400) == 0x00000400)) {
                  subBuilder = datetime_.toBuilder();
                }
                datetime_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(datetime_);
                  datetime_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000400;
                break;
              }
              case 34: {
                String s = input.readString();
                bitField0_ |= 0x00000800;
                description_ = s;
                break;
              }
              case 50: {
                String s = input.readString();
                bitField0_ |= 0x00000040;
                totalPrice_ = s;
                break;
              }
              case 58: {
                String s = input.readString();
                bitField0_ |= 0x00000080;
                descriptionLine1_ = s;
                break;
              }
              case 66: {
                String s = input.readString();
                bitField0_ |= 0x00000100;
                descriptionLine2_ = s;
                break;
              }
              case 74: {
                String s = input.readString();
                bitField0_ |= 0x00000020;
                totalPriceLabel_ = s;
                break;
              }
              case 80: {
                imageCase_ = 10;
                image_ = input.readBool();
                break;
              }
              case 88: {
                bitField0_ |= 0x00001000;
                animatePlaceholders_ = input.readBool();
                break;
              }
              case 98: {
                org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = imageClickthroughData_.toBuilder();
                }
                imageClickthroughData_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.ImageClickthroughData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(imageClickthroughData_);
                  imageClickthroughData_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 106: {
                String s = input.readString();
                bitField0_ |= 0x00000200;
                descriptionLine3_ = s;
                break;
              }
              case 114: {
                String s = input.readString();
                bitField0_ |= 0x00000008;
                imageAccessibilityHint_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.DetailsProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new DetailsProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.DetailsProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DetailsProto> PARSER;

  public static com.google.protobuf.Parser<DetailsProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

