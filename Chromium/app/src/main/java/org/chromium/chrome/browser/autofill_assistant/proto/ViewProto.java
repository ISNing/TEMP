// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generic_ui.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * Protobuf type {@code autofill_assistant.ViewProto}
 */
public  final class ViewProto extends
    com.google.protobuf.GeneratedMessageLite<
        ViewProto, ViewProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ViewProto)
    ViewProtoOrBuilder {
  private ViewProto() {
    identifier_ = "";
  }
  private int bitField0_;
  private int viewCase_ = 0;
  private java.lang.Object view_;
  public enum ViewCase
      implements com.google.protobuf.Internal.EnumLite {
    VIEW_CONTAINER(4),
    TEXT_VIEW(5),
    DIVIDER_VIEW(6),
    IMAGE_VIEW(7),
    VIEW_NOT_SET(0);
    private final int value;
    private ViewCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ViewCase valueOf(int value) {
      return forNumber(value);
    }

    public static ViewCase forNumber(int value) {
      switch (value) {
        case 4: return VIEW_CONTAINER;
        case 5: return TEXT_VIEW;
        case 6: return DIVIDER_VIEW;
        case 7: return IMAGE_VIEW;
        case 0: return VIEW_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ViewCase
  getViewCase() {
    return ViewCase.forNumber(
        viewCase_);
  }

  private void clearView() {
    viewCase_ = 0;
    view_ = null;
  }

  public static final int IDENTIFIER_FIELD_NUMBER = 1;
  private java.lang.String identifier_;
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   */
  public boolean hasIdentifier() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   */
  public java.lang.String getIdentifier() {
    return identifier_;
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   */
  public com.google.protobuf.ByteString
      getIdentifierBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(identifier_);
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   */
  private void setIdentifier(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    identifier_ = value;
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   */
  private void clearIdentifier() {
    bitField0_ = (bitField0_ & ~0x00000001);
    identifier_ = getDefaultInstance().getIdentifier();
  }
  /**
   * <pre>
   * The unique identifier of the view.
   * </pre>
   *
   * <code>optional string identifier = 1;</code>
   */
  private void setIdentifierBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    identifier_ = value.toStringUtf8();
  }

  public static final int ATTRIBUTES_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto attributes_;
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  public boolean hasAttributes() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto getAttributes() {
    return attributes_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.getDefaultInstance() : attributes_;
  }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  private void setAttributes(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    attributes_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  private void setAttributes(
      org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.Builder builderForValue) {
    attributes_ = builderForValue.build();
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  private void mergeAttributes(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto value) {
    if (attributes_ != null &&
        attributes_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.getDefaultInstance()) {
      attributes_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.newBuilder(attributes_).mergeFrom(value).buildPartial();
    } else {
      attributes_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * Common view attributes, such as padding and background.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
   */
  private void clearAttributes() {  attributes_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int LAYOUT_PARAMS_FIELD_NUMBER = 3;
  private org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto layoutParams_;
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  public boolean hasLayoutParams() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto getLayoutParams() {
    return layoutParams_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.getDefaultInstance() : layoutParams_;
  }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  private void setLayoutParams(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    layoutParams_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  private void setLayoutParams(
      org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.Builder builderForValue) {
    layoutParams_ = builderForValue.build();
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  private void mergeLayoutParams(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto value) {
    if (layoutParams_ != null &&
        layoutParams_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.getDefaultInstance()) {
      layoutParams_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.newBuilder(layoutParams_).mergeFrom(value).buildPartial();
    } else {
      layoutParams_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * Layout parameters such as width, height, and gravity.
   * </pre>
   *
   * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
   */
  private void clearLayoutParams() {  layoutParams_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int VIEW_CONTAINER_FIELD_NUMBER = 4;
  /**
   * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  public boolean hasViewContainer() {
    return viewCase_ == 4;
  }
  /**
   * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto getViewContainer() {
    if (viewCase_ == 4) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.getDefaultInstance();
  }
  /**
   * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  private void setViewContainer(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    view_ = value;
    viewCase_ = 4;
  }
  /**
   * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  private void setViewContainer(
      org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.Builder builderForValue) {
    view_ = builderForValue.build();
    viewCase_ = 4;
  }
  /**
   * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  private void mergeViewContainer(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto value) {
    if (viewCase_ == 4 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 4;
  }
  /**
   * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
   */
  private void clearViewContainer() {
    if (viewCase_ == 4) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int TEXT_VIEW_FIELD_NUMBER = 5;
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
   */
  public boolean hasTextView() {
    return viewCase_ == 5;
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto getTextView() {
    if (viewCase_ == 5) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
   */
  private void setTextView(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    view_ = value;
    viewCase_ = 5;
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
   */
  private void setTextView(
      org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.Builder builderForValue) {
    view_ = builderForValue.build();
    viewCase_ = 5;
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
   */
  private void mergeTextView(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto value) {
    if (viewCase_ == 5 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 5;
  }
  /**
   * <pre>
   * A regular read-only text view.
   * </pre>
   *
   * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
   */
  private void clearTextView() {
    if (viewCase_ == 5) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int DIVIDER_VIEW_FIELD_NUMBER = 6;
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  public boolean hasDividerView() {
    return viewCase_ == 6;
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto getDividerView() {
    if (viewCase_ == 6) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  private void setDividerView(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    view_ = value;
    viewCase_ = 6;
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  private void setDividerView(
      org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.Builder builderForValue) {
    view_ = builderForValue.build();
    viewCase_ = 6;
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  private void mergeDividerView(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto value) {
    if (viewCase_ == 6 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 6;
  }
  /**
   * <pre>
   * A horizontal view divider.
   * </pre>
   *
   * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
   */
  private void clearDividerView() {
    if (viewCase_ == 6) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public static final int IMAGE_VIEW_FIELD_NUMBER = 7;
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  public boolean hasImageView() {
    return viewCase_ == 7;
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto getImageView() {
    if (viewCase_ == 7) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto) view_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  private void setImageView(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    view_ = value;
    viewCase_ = 7;
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  private void setImageView(
      org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.Builder builderForValue) {
    view_ = builderForValue.build();
    viewCase_ = 7;
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  private void mergeImageView(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto value) {
    if (viewCase_ == 7 &&
        view_ != org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.getDefaultInstance()) {
      view_ = org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto) view_)
          .mergeFrom(value).buildPartial();
    } else {
      view_ = value;
    }
    viewCase_ = 7;
  }
  /**
   * <pre>
   * A regular image view.
   * </pre>
   *
   * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
   */
  private void clearImageView() {
    if (viewCase_ == 7) {
      viewCase_ = 0;
      view_ = null;
    }
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getIdentifier());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, getAttributes());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(3, getLayoutParams());
    }
    if (viewCase_ == 4) {
      output.writeMessage(4, (org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto) view_);
    }
    if (viewCase_ == 5) {
      output.writeMessage(5, (org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto) view_);
    }
    if (viewCase_ == 6) {
      output.writeMessage(6, (org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto) view_);
    }
    if (viewCase_ == 7) {
      output.writeMessage(7, (org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto) view_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getIdentifier());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getAttributes());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getLayoutParams());
    }
    if (viewCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto) view_);
    }
    if (viewCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto) view_);
    }
    if (viewCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto) view_);
    }
    if (viewCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto) view_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ViewProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code autofill_assistant.ViewProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ViewProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ViewProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public ViewCase
        getViewCase() {
      return instance.getViewCase();
    }

    public Builder clearView() {
      copyOnWrite();
      instance.clearView();
      return this;
    }


    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     */
    public boolean hasIdentifier() {
      return instance.hasIdentifier();
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     */
    public java.lang.String getIdentifier() {
      return instance.getIdentifier();
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdentifierBytes() {
      return instance.getIdentifierBytes();
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     */
    public Builder setIdentifier(
        java.lang.String value) {
      copyOnWrite();
      instance.setIdentifier(value);
      return this;
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     */
    public Builder clearIdentifier() {
      copyOnWrite();
      instance.clearIdentifier();
      return this;
    }
    /**
     * <pre>
     * The unique identifier of the view.
     * </pre>
     *
     * <code>optional string identifier = 1;</code>
     */
    public Builder setIdentifierBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setIdentifierBytes(value);
      return this;
    }

    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public boolean hasAttributes() {
      return instance.hasAttributes();
    }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto getAttributes() {
      return instance.getAttributes();
    }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public Builder setAttributes(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto value) {
      copyOnWrite();
      instance.setAttributes(value);
      return this;
      }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public Builder setAttributes(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.Builder builderForValue) {
      copyOnWrite();
      instance.setAttributes(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public Builder mergeAttributes(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto value) {
      copyOnWrite();
      instance.mergeAttributes(value);
      return this;
    }
    /**
     * <pre>
     * Common view attributes, such as padding and background.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewAttributesProto attributes = 2;</code>
     */
    public Builder clearAttributes() {  copyOnWrite();
      instance.clearAttributes();
      return this;
    }

    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public boolean hasLayoutParams() {
      return instance.hasLayoutParams();
    }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto getLayoutParams() {
      return instance.getLayoutParams();
    }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public Builder setLayoutParams(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto value) {
      copyOnWrite();
      instance.setLayoutParams(value);
      return this;
      }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public Builder setLayoutParams(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.Builder builderForValue) {
      copyOnWrite();
      instance.setLayoutParams(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public Builder mergeLayoutParams(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto value) {
      copyOnWrite();
      instance.mergeLayoutParams(value);
      return this;
    }
    /**
     * <pre>
     * Layout parameters such as width, height, and gravity.
     * </pre>
     *
     * <code>optional .autofill_assistant.ViewLayoutParamsProto layout_params = 3;</code>
     */
    public Builder clearLayoutParams() {  copyOnWrite();
      instance.clearLayoutParams();
      return this;
    }

    /**
     * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public boolean hasViewContainer() {
      return instance.hasViewContainer();
    }
    /**
     * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto getViewContainer() {
      return instance.getViewContainer();
    }
    /**
     * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public Builder setViewContainer(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto value) {
      copyOnWrite();
      instance.setViewContainer(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public Builder setViewContainer(
        org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.Builder builderForValue) {
      copyOnWrite();
      instance.setViewContainer(builderForValue);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public Builder mergeViewContainer(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto value) {
      copyOnWrite();
      instance.mergeViewContainer(value);
      return this;
    }
    /**
     * <code>optional .autofill_assistant.ViewContainerProto view_container = 4;</code>
     */
    public Builder clearViewContainer() {
      copyOnWrite();
      instance.clearViewContainer();
      return this;
    }

    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public boolean hasTextView() {
      return instance.hasTextView();
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto getTextView() {
      return instance.getTextView();
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public Builder setTextView(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto value) {
      copyOnWrite();
      instance.setTextView(value);
      return this;
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public Builder setTextView(
        org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setTextView(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public Builder mergeTextView(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto value) {
      copyOnWrite();
      instance.mergeTextView(value);
      return this;
    }
    /**
     * <pre>
     * A regular read-only text view.
     * </pre>
     *
     * <code>optional .autofill_assistant.TextViewProto text_view = 5;</code>
     */
    public Builder clearTextView() {
      copyOnWrite();
      instance.clearTextView();
      return this;
    }

    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public boolean hasDividerView() {
      return instance.hasDividerView();
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto getDividerView() {
      return instance.getDividerView();
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public Builder setDividerView(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto value) {
      copyOnWrite();
      instance.setDividerView(value);
      return this;
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public Builder setDividerView(
        org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setDividerView(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public Builder mergeDividerView(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto value) {
      copyOnWrite();
      instance.mergeDividerView(value);
      return this;
    }
    /**
     * <pre>
     * A horizontal view divider.
     * </pre>
     *
     * <code>optional .autofill_assistant.DividerViewProto divider_view = 6;</code>
     */
    public Builder clearDividerView() {
      copyOnWrite();
      instance.clearDividerView();
      return this;
    }

    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public boolean hasImageView() {
      return instance.hasImageView();
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto getImageView() {
      return instance.getImageView();
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public Builder setImageView(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto value) {
      copyOnWrite();
      instance.setImageView(value);
      return this;
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public Builder setImageView(
        org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageView(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public Builder mergeImageView(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto value) {
      copyOnWrite();
      instance.mergeImageView(value);
      return this;
    }
    /**
     * <pre>
     * A regular image view.
     * </pre>
     *
     * <code>optional .autofill_assistant.ImageViewProto image_view = 7;</code>
     */
    public Builder clearImageView() {
      copyOnWrite();
      instance.clearImageView();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ViewProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ViewProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.ViewProto other = (org.chromium.chrome.browser.autofill_assistant.proto.ViewProto) arg1;
        identifier_ = visitor.visitString(
            hasIdentifier(), identifier_,
            other.hasIdentifier(), other.identifier_);
        attributes_ = visitor.visitMessage(attributes_, other.attributes_);
        layoutParams_ = visitor.visitMessage(layoutParams_, other.layoutParams_);
        switch (other.getViewCase()) {
          case VIEW_CONTAINER: {
            view_ = visitor.visitOneofMessage(
                viewCase_ == 4,
                view_,
                other.view_);
            break;
          }
          case TEXT_VIEW: {
            view_ = visitor.visitOneofMessage(
                viewCase_ == 5,
                view_,
                other.view_);
            break;
          }
          case DIVIDER_VIEW: {
            view_ = visitor.visitOneofMessage(
                viewCase_ == 6,
                view_,
                other.view_);
            break;
          }
          case IMAGE_VIEW: {
            view_ = visitor.visitOneofMessage(
                viewCase_ == 7,
                view_,
                other.view_);
            break;
          }
          case VIEW_NOT_SET: {
            visitor.visitOneofNotSet(viewCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.viewCase_ != 0) {
            viewCase_ = other.viewCase_;
          }
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                identifier_ = s;
                break;
              }
              case 18: {
                org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = attributes_.toBuilder();
                }
                attributes_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ViewAttributesProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(attributes_);
                  attributes_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = layoutParams_.toBuilder();
                }
                layoutParams_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ViewLayoutParamsProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(layoutParams_);
                  layoutParams_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.Builder subBuilder = null;
                if (viewCase_ == 4) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto) view_).toBuilder();
                }
                view_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.ViewContainerProto) view_);
                  view_ = subBuilder.buildPartial();
                }
                viewCase_ = 4;
                break;
              }
              case 42: {
                org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.Builder subBuilder = null;
                if (viewCase_ == 5) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto) view_).toBuilder();
                }
                view_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.TextViewProto) view_);
                  view_ = subBuilder.buildPartial();
                }
                viewCase_ = 5;
                break;
              }
              case 50: {
                org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.Builder subBuilder = null;
                if (viewCase_ == 6) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto) view_).toBuilder();
                }
                view_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.DividerViewProto) view_);
                  view_ = subBuilder.buildPartial();
                }
                viewCase_ = 6;
                break;
              }
              case 58: {
                org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.Builder subBuilder = null;
                if (viewCase_ == 7) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto) view_).toBuilder();
                }
                view_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.ImageViewProto) view_);
                  view_ = subBuilder.buildPartial();
                }
                viewCase_ = 7;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ViewProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ViewProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ViewProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ViewProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ViewProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ViewProto> PARSER;

  public static com.google.protobuf.Parser<ViewProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

