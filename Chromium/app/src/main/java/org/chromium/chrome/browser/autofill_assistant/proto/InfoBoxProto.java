// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * Protobuf type {@code autofill_assistant.InfoBoxProto}
 */
public  final class InfoBoxProto extends
    com.google.protobuf.GeneratedMessageLite<
        InfoBoxProto, InfoBoxProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.InfoBoxProto)
    InfoBoxProtoOrBuilder {
  private InfoBoxProto() {
    imagePath_ = "";
    explanation_ = "";
  }
  private int bitField0_;
  public static final int IMAGE_PATH_FIELD_NUMBER = 1;
  private java.lang.String imagePath_;
  /**
   * <pre>
   * Optional path to an image. Ok tick used if not set.
   * </pre>
   *
   * <code>optional string image_path = 1;</code>
   */
  public boolean hasImagePath() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Optional path to an image. Ok tick used if not set.
   * </pre>
   *
   * <code>optional string image_path = 1;</code>
   */
  public java.lang.String getImagePath() {
    return imagePath_;
  }
  /**
   * <pre>
   * Optional path to an image. Ok tick used if not set.
   * </pre>
   *
   * <code>optional string image_path = 1;</code>
   */
  public com.google.protobuf.ByteString
      getImagePathBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(imagePath_);
  }
  /**
   * <pre>
   * Optional path to an image. Ok tick used if not set.
   * </pre>
   *
   * <code>optional string image_path = 1;</code>
   */
  private void setImagePath(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    imagePath_ = value;
  }
  /**
   * <pre>
   * Optional path to an image. Ok tick used if not set.
   * </pre>
   *
   * <code>optional string image_path = 1;</code>
   */
  private void clearImagePath() {
    bitField0_ = (bitField0_ & ~0x00000001);
    imagePath_ = getDefaultInstance().getImagePath();
  }
  /**
   * <pre>
   * Optional path to an image. Ok tick used if not set.
   * </pre>
   *
   * <code>optional string image_path = 1;</code>
   */
  private void setImagePathBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    imagePath_ = value.toStringUtf8();
  }

  public static final int EXPLANATION_FIELD_NUMBER = 2;
  private java.lang.String explanation_;
  /**
   * <pre>
   * The explanation to show in the box. Not setting this field will clear an
   * existing info box.
   * </pre>
   *
   * <code>optional string explanation = 2;</code>
   */
  public boolean hasExplanation() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * The explanation to show in the box. Not setting this field will clear an
   * existing info box.
   * </pre>
   *
   * <code>optional string explanation = 2;</code>
   */
  public java.lang.String getExplanation() {
    return explanation_;
  }
  /**
   * <pre>
   * The explanation to show in the box. Not setting this field will clear an
   * existing info box.
   * </pre>
   *
   * <code>optional string explanation = 2;</code>
   */
  public com.google.protobuf.ByteString
      getExplanationBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(explanation_);
  }
  /**
   * <pre>
   * The explanation to show in the box. Not setting this field will clear an
   * existing info box.
   * </pre>
   *
   * <code>optional string explanation = 2;</code>
   */
  private void setExplanation(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    explanation_ = value;
  }
  /**
   * <pre>
   * The explanation to show in the box. Not setting this field will clear an
   * existing info box.
   * </pre>
   *
   * <code>optional string explanation = 2;</code>
   */
  private void clearExplanation() {
    bitField0_ = (bitField0_ & ~0x00000002);
    explanation_ = getDefaultInstance().getExplanation();
  }
  /**
   * <pre>
   * The explanation to show in the box. Not setting this field will clear an
   * existing info box.
   * </pre>
   *
   * <code>optional string explanation = 2;</code>
   */
  private void setExplanationBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    explanation_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getImagePath());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getExplanation());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getImagePath());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getExplanation());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * Protobuf type {@code autofill_assistant.InfoBoxProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.InfoBoxProto)
      org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Optional path to an image. Ok tick used if not set.
     * </pre>
     *
     * <code>optional string image_path = 1;</code>
     */
    public boolean hasImagePath() {
      return instance.hasImagePath();
    }
    /**
     * <pre>
     * Optional path to an image. Ok tick used if not set.
     * </pre>
     *
     * <code>optional string image_path = 1;</code>
     */
    public java.lang.String getImagePath() {
      return instance.getImagePath();
    }
    /**
     * <pre>
     * Optional path to an image. Ok tick used if not set.
     * </pre>
     *
     * <code>optional string image_path = 1;</code>
     */
    public com.google.protobuf.ByteString
        getImagePathBytes() {
      return instance.getImagePathBytes();
    }
    /**
     * <pre>
     * Optional path to an image. Ok tick used if not set.
     * </pre>
     *
     * <code>optional string image_path = 1;</code>
     */
    public Builder setImagePath(
        java.lang.String value) {
      copyOnWrite();
      instance.setImagePath(value);
      return this;
    }
    /**
     * <pre>
     * Optional path to an image. Ok tick used if not set.
     * </pre>
     *
     * <code>optional string image_path = 1;</code>
     */
    public Builder clearImagePath() {
      copyOnWrite();
      instance.clearImagePath();
      return this;
    }
    /**
     * <pre>
     * Optional path to an image. Ok tick used if not set.
     * </pre>
     *
     * <code>optional string image_path = 1;</code>
     */
    public Builder setImagePathBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setImagePathBytes(value);
      return this;
    }

    /**
     * <pre>
     * The explanation to show in the box. Not setting this field will clear an
     * existing info box.
     * </pre>
     *
     * <code>optional string explanation = 2;</code>
     */
    public boolean hasExplanation() {
      return instance.hasExplanation();
    }
    /**
     * <pre>
     * The explanation to show in the box. Not setting this field will clear an
     * existing info box.
     * </pre>
     *
     * <code>optional string explanation = 2;</code>
     */
    public java.lang.String getExplanation() {
      return instance.getExplanation();
    }
    /**
     * <pre>
     * The explanation to show in the box. Not setting this field will clear an
     * existing info box.
     * </pre>
     *
     * <code>optional string explanation = 2;</code>
     */
    public com.google.protobuf.ByteString
        getExplanationBytes() {
      return instance.getExplanationBytes();
    }
    /**
     * <pre>
     * The explanation to show in the box. Not setting this field will clear an
     * existing info box.
     * </pre>
     *
     * <code>optional string explanation = 2;</code>
     */
    public Builder setExplanation(
        java.lang.String value) {
      copyOnWrite();
      instance.setExplanation(value);
      return this;
    }
    /**
     * <pre>
     * The explanation to show in the box. Not setting this field will clear an
     * existing info box.
     * </pre>
     *
     * <code>optional string explanation = 2;</code>
     */
    public Builder clearExplanation() {
      copyOnWrite();
      instance.clearExplanation();
      return this;
    }
    /**
     * <pre>
     * The explanation to show in the box. Not setting this field will clear an
     * existing info box.
     * </pre>
     *
     * <code>optional string explanation = 2;</code>
     */
    public Builder setExplanationBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setExplanationBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.InfoBoxProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto other = (org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto) arg1;
        imagePath_ = visitor.visitString(
            hasImagePath(), imagePath_,
            other.hasImagePath(), other.imagePath_);
        explanation_ = visitor.visitString(
            hasExplanation(), explanation_,
            other.hasExplanation(), other.explanation_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                imagePath_ = s;
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                explanation_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.InfoBoxProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new InfoBoxProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.InfoBoxProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<InfoBoxProto> PARSER;

  public static com.google.protobuf.Parser<InfoBoxProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

