// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * A message to describe a chip.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ChipProto}
 */
public  final class ChipProto extends
    com.google.protobuf.GeneratedMessageLite<
        ChipProto, ChipProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ChipProto)
    ChipProtoOrBuilder {
  private ChipProto() {
    text_ = "";
  }
  private int bitField0_;
  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_;
  /**
   * <pre>
   * The type of the chip.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipType type = 1;</code>
   */
  public boolean hasType() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * The type of the chip.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipType type = 1;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ChipType getType() {
    org.chromium.chrome.browser.autofill_assistant.proto.ChipType result = org.chromium.chrome.browser.autofill_assistant.proto.ChipType.forNumber(type_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.ChipType.UNKNOWN_CHIP_TYPE : result;
  }
  /**
   * <pre>
   * The type of the chip.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipType type = 1;</code>
   */
  private void setType(org.chromium.chrome.browser.autofill_assistant.proto.ChipType value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000001;
    type_ = value.getNumber();
  }
  /**
   * <pre>
   * The type of the chip.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipType type = 1;</code>
   */
  private void clearType() {
    bitField0_ = (bitField0_ & ~0x00000001);
    type_ = 0;
  }

  public static final int ICON_FIELD_NUMBER = 2;
  private int icon_;
  /**
   * <pre>
   * The icon shown on the chip. Not required if text is set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
   */
  public boolean hasIcon() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * The icon shown on the chip. Not required if text is set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon getIcon() {
    org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon result = org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon.forNumber(icon_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon.NO_ICON : result;
  }
  /**
   * <pre>
   * The icon shown on the chip. Not required if text is set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
   */
  private void setIcon(org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000002;
    icon_ = value.getNumber();
  }
  /**
   * <pre>
   * The icon shown on the chip. Not required if text is set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
   */
  private void clearIcon() {
    bitField0_ = (bitField0_ & ~0x00000002);
    icon_ = 0;
  }

  public static final int TEXT_FIELD_NUMBER = 3;
  private java.lang.String text_;
  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   */
  public boolean hasText() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   */
  public java.lang.String getText() {
    return text_;
  }
  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   */
  public com.google.protobuf.ByteString
      getTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(text_);
  }
  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   */
  private void setText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    text_ = value;
  }
  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   */
  private void clearText() {
    bitField0_ = (bitField0_ & ~0x00000004);
    text_ = getDefaultInstance().getText();
  }
  /**
   * <pre>
   * The text shown on the chip. Not required if icon is set.
   * </pre>
   *
   * <code>optional string text = 3;</code>
   */
  private void setTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    text_ = value.toStringUtf8();
  }

  public static final int STICKY_FIELD_NUMBER = 4;
  private boolean sticky_;
  /**
   * <pre>
   * Whether the chip is sticky. When the bottom sheet is configured with the
   * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
   * sheet is minimized, the first sticky action will be displayed instead of
   * the profile icon.
   * </pre>
   *
   * <code>optional bool sticky = 4;</code>
   */
  public boolean hasSticky() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * Whether the chip is sticky. When the bottom sheet is configured with the
   * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
   * sheet is minimized, the first sticky action will be displayed instead of
   * the profile icon.
   * </pre>
   *
   * <code>optional bool sticky = 4;</code>
   */
  public boolean getSticky() {
    return sticky_;
  }
  /**
   * <pre>
   * Whether the chip is sticky. When the bottom sheet is configured with the
   * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
   * sheet is minimized, the first sticky action will be displayed instead of
   * the profile icon.
   * </pre>
   *
   * <code>optional bool sticky = 4;</code>
   */
  private void setSticky(boolean value) {
    bitField0_ |= 0x00000008;
    sticky_ = value;
  }
  /**
   * <pre>
   * Whether the chip is sticky. When the bottom sheet is configured with the
   * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
   * sheet is minimized, the first sticky action will be displayed instead of
   * the profile icon.
   * </pre>
   *
   * <code>optional bool sticky = 4;</code>
   */
  private void clearSticky() {
    bitField0_ = (bitField0_ & ~0x00000008);
    sticky_ = false;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeEnum(1, type_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeEnum(2, icon_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeString(3, getText());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeBool(4, sticky_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, icon_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getText());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, sticky_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ChipProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A message to describe a chip.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ChipProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ChipProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ChipProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ChipProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The type of the chip.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipType type = 1;</code>
     */
    public boolean hasType() {
      return instance.hasType();
    }
    /**
     * <pre>
     * The type of the chip.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipType type = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ChipType getType() {
      return instance.getType();
    }
    /**
     * <pre>
     * The type of the chip.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipType type = 1;</code>
     */
    public Builder setType(org.chromium.chrome.browser.autofill_assistant.proto.ChipType value) {
      copyOnWrite();
      instance.setType(value);
      return this;
    }
    /**
     * <pre>
     * The type of the chip.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipType type = 1;</code>
     */
    public Builder clearType() {
      copyOnWrite();
      instance.clearType();
      return this;
    }

    /**
     * <pre>
     * The icon shown on the chip. Not required if text is set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
     */
    public boolean hasIcon() {
      return instance.hasIcon();
    }
    /**
     * <pre>
     * The icon shown on the chip. Not required if text is set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon getIcon() {
      return instance.getIcon();
    }
    /**
     * <pre>
     * The icon shown on the chip. Not required if text is set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
     */
    public Builder setIcon(org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon value) {
      copyOnWrite();
      instance.setIcon(value);
      return this;
    }
    /**
     * <pre>
     * The icon shown on the chip. Not required if text is set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ChipIcon icon = 2;</code>
     */
    public Builder clearIcon() {
      copyOnWrite();
      instance.clearIcon();
      return this;
    }

    /**
     * <pre>
     * The text shown on the chip. Not required if icon is set.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public boolean hasText() {
      return instance.hasText();
    }
    /**
     * <pre>
     * The text shown on the chip. Not required if icon is set.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public java.lang.String getText() {
      return instance.getText();
    }
    /**
     * <pre>
     * The text shown on the chip. Not required if icon is set.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      return instance.getTextBytes();
    }
    /**
     * <pre>
     * The text shown on the chip. Not required if icon is set.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public Builder setText(
        java.lang.String value) {
      copyOnWrite();
      instance.setText(value);
      return this;
    }
    /**
     * <pre>
     * The text shown on the chip. Not required if icon is set.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public Builder clearText() {
      copyOnWrite();
      instance.clearText();
      return this;
    }
    /**
     * <pre>
     * The text shown on the chip. Not required if icon is set.
     * </pre>
     *
     * <code>optional string text = 3;</code>
     */
    public Builder setTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Whether the chip is sticky. When the bottom sheet is configured with the
     * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
     * sheet is minimized, the first sticky action will be displayed instead of
     * the profile icon.
     * </pre>
     *
     * <code>optional bool sticky = 4;</code>
     */
    public boolean hasSticky() {
      return instance.hasSticky();
    }
    /**
     * <pre>
     * Whether the chip is sticky. When the bottom sheet is configured with the
     * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
     * sheet is minimized, the first sticky action will be displayed instead of
     * the profile icon.
     * </pre>
     *
     * <code>optional bool sticky = 4;</code>
     */
    public boolean getSticky() {
      return instance.getSticky();
    }
    /**
     * <pre>
     * Whether the chip is sticky. When the bottom sheet is configured with the
     * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
     * sheet is minimized, the first sticky action will be displayed instead of
     * the profile icon.
     * </pre>
     *
     * <code>optional bool sticky = 4;</code>
     */
    public Builder setSticky(boolean value) {
      copyOnWrite();
      instance.setSticky(value);
      return this;
    }
    /**
     * <pre>
     * Whether the chip is sticky. When the bottom sheet is configured with the
     * ConfigureBottomSheetProto::PeekMode::HANDLE_HEADER peek mode and the
     * sheet is minimized, the first sticky action will be displayed instead of
     * the profile icon.
     * </pre>
     *
     * <code>optional bool sticky = 4;</code>
     */
    public Builder clearSticky() {
      copyOnWrite();
      instance.clearSticky();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ChipProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ChipProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.ChipProto other = (org.chromium.chrome.browser.autofill_assistant.proto.ChipProto) arg1;
        type_ = visitor.visitInt(hasType(), type_,
            other.hasType(), other.type_);
        icon_ = visitor.visitInt(hasIcon(), icon_,
            other.hasIcon(), other.icon_);
        text_ = visitor.visitString(
            hasText(), text_,
            other.hasText(), other.text_);
        sticky_ = visitor.visitBoolean(
            hasSticky(), sticky_,
            other.hasSticky(), other.sticky_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                org.chromium.chrome.browser.autofill_assistant.proto.ChipType value = org.chromium.chrome.browser.autofill_assistant.proto.ChipType.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  type_ = rawValue;
                }
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon value = org.chromium.chrome.browser.autofill_assistant.proto.ChipIcon.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  icon_ = rawValue;
                }
                break;
              }
              case 26: {
                String s = input.readString();
                bitField0_ |= 0x00000004;
                text_ = s;
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                sticky_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ChipProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ChipProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ChipProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ChipProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ChipProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ChipProto> PARSER;

  public static com.google.protobuf.Parser<ChipProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

