// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Set the value of an form element.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.SetFormFieldValueProto}
 */
public  final class SetFormFieldValueProto extends
    com.google.protobuf.GeneratedMessageLite<
        SetFormFieldValueProto, SetFormFieldValueProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.SetFormFieldValueProto)
    SetFormFieldValueProtoOrBuilder {
  private SetFormFieldValueProto() {
    value_ = emptyProtobufList();
    delayInMillisecond_ = 20;
  }
  public interface ResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.SetFormFieldValueProto.Result)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
     */
    boolean hasFallbackToSimulateKeyPresses();
    /**
     * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
     */
    boolean getFallbackToSimulateKeyPresses();
  }
  /**
   * Protobuf type {@code autofill_assistant.SetFormFieldValueProto.Result}
   */
  public  static final class Result extends
      com.google.protobuf.GeneratedMessageLite<
          Result, Result.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.SetFormFieldValueProto.Result)
      ResultOrBuilder {
    private Result() {
    }
    private int bitField0_;
    public static final int FALLBACK_TO_SIMULATE_KEY_PRESSES_FIELD_NUMBER = 1;
    private boolean fallbackToSimulateKeyPresses_;
    /**
     * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
     */
    public boolean hasFallbackToSimulateKeyPresses() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
     */
    public boolean getFallbackToSimulateKeyPresses() {
      return fallbackToSimulateKeyPresses_;
    }
    /**
     * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
     */
    private void setFallbackToSimulateKeyPresses(boolean value) {
      bitField0_ |= 0x00000001;
      fallbackToSimulateKeyPresses_ = value;
    }
    /**
     * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
     */
    private void clearFallbackToSimulateKeyPresses() {
      bitField0_ = (bitField0_ & ~0x00000001);
      fallbackToSimulateKeyPresses_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, fallbackToSimulateKeyPresses_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, fallbackToSimulateKeyPresses_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.SetFormFieldValueProto.Result}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.SetFormFieldValueProto.Result)
        org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.ResultOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
       */
      public boolean hasFallbackToSimulateKeyPresses() {
        return instance.hasFallbackToSimulateKeyPresses();
      }
      /**
       * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
       */
      public boolean getFallbackToSimulateKeyPresses() {
        return instance.getFallbackToSimulateKeyPresses();
      }
      /**
       * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
       */
      public Builder setFallbackToSimulateKeyPresses(boolean value) {
        copyOnWrite();
        instance.setFallbackToSimulateKeyPresses(value);
        return this;
      }
      /**
       * <code>optional bool fallback_to_simulate_key_presses = 1;</code>
       */
      public Builder clearFallbackToSimulateKeyPresses() {
        copyOnWrite();
        instance.clearFallbackToSimulateKeyPresses();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.SetFormFieldValueProto.Result)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result other = (org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result) arg1;
          fallbackToSimulateKeyPresses_ = visitor.visitBoolean(
              hasFallbackToSimulateKeyPresses(), fallbackToSimulateKeyPresses_,
              other.hasFallbackToSimulateKeyPresses(), other.fallbackToSimulateKeyPresses_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  fallbackToSimulateKeyPresses_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.SetFormFieldValueProto.Result)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Result();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.Result getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Result> PARSER;

    public static com.google.protobuf.Parser<Result> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface KeyPressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.SetFormFieldValueProto.KeyPress)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    boolean hasText();
    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    java.lang.String getText();
    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <pre>
     * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
     * </pre>
     *
     * <code>optional int32 keycode = 2;</code>
     */
    boolean hasKeycode();
    /**
     * <pre>
     * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
     * </pre>
     *
     * <code>optional int32 keycode = 2;</code>
     */
    int getKeycode();

    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    boolean hasKeyboardInput();
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    java.lang.String getKeyboardInput();
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    com.google.protobuf.ByteString
        getKeyboardInputBytes();

    /**
     * <pre>
     * Use the username from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_username = 4;</code>
     */
    boolean hasUseUsername();
    /**
     * <pre>
     * Use the username from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_username = 4;</code>
     */
    boolean getUseUsername();

    /**
     * <pre>
     * Use the password from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_password = 5;</code>
     */
    boolean hasUsePassword();
    /**
     * <pre>
     * Use the password from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_password = 5;</code>
     */
    boolean getUsePassword();

    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    boolean hasClientMemoryKey();
    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    java.lang.String getClientMemoryKey();
    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    com.google.protobuf.ByteString
        getClientMemoryKeyBytes();

    public org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.KeypressCase getKeypressCase();
  }
  /**
   * Protobuf type {@code autofill_assistant.SetFormFieldValueProto.KeyPress}
   */
  public  static final class KeyPress extends
      com.google.protobuf.GeneratedMessageLite<
          KeyPress, KeyPress.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.SetFormFieldValueProto.KeyPress)
      KeyPressOrBuilder {
    private KeyPress() {
    }
    private int bitField0_;
    private int keypressCase_ = 0;
    private java.lang.Object keypress_;
    public enum KeypressCase
        implements com.google.protobuf.Internal.EnumLite {
      TEXT(1),
      KEYCODE(2),
      KEYBOARD_INPUT(3),
      USE_USERNAME(4),
      USE_PASSWORD(5),
      CLIENT_MEMORY_KEY(6),
      KEYPRESS_NOT_SET(0);
      private final int value;
      private KeypressCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static KeypressCase valueOf(int value) {
        return forNumber(value);
      }

      public static KeypressCase forNumber(int value) {
        switch (value) {
          case 1: return TEXT;
          case 2: return KEYCODE;
          case 3: return KEYBOARD_INPUT;
          case 4: return USE_USERNAME;
          case 5: return USE_PASSWORD;
          case 6: return CLIENT_MEMORY_KEY;
          case 0: return KEYPRESS_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public KeypressCase
    getKeypressCase() {
      return KeypressCase.forNumber(
          keypressCase_);
    }

    private void clearKeypress() {
      keypressCase_ = 0;
      keypress_ = null;
    }

    public static final int TEXT_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public boolean hasText() {
      return keypressCase_ == 1;
    }
    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public java.lang.String getText() {
      java.lang.String ref = "";
      if (keypressCase_ == 1) {
        ref = (java.lang.String) keypress_;
      }
      return ref;
    }
    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.String ref = "";
      if (keypressCase_ == 1) {
        ref = (java.lang.String) keypress_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void setText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  keypressCase_ = 1;
      keypress_ = value;
    }
    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void clearText() {
      if (keypressCase_ == 1) {
        keypressCase_ = 0;
        keypress_ = null;
      }
    }
    /**
     * <pre>
     * Text to insert as-is into a form field.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  keypressCase_ = 1;
      keypress_ = value.toStringUtf8();
    }

    public static final int KEYCODE_FIELD_NUMBER = 2;
    /**
     * <pre>
     * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
     * </pre>
     *
     * <code>optional int32 keycode = 2;</code>
     */
    public boolean hasKeycode() {
      return keypressCase_ == 2;
    }
    /**
     * <pre>
     * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
     * </pre>
     *
     * <code>optional int32 keycode = 2;</code>
     */
    public int getKeycode() {
      if (keypressCase_ == 2) {
        return (java.lang.Integer) keypress_;
      }
      return 0;
    }
    /**
     * <pre>
     * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
     * </pre>
     *
     * <code>optional int32 keycode = 2;</code>
     */
    private void setKeycode(int value) {
      keypressCase_ = 2;
      keypress_ = value;
    }
    /**
     * <pre>
     * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
     * </pre>
     *
     * <code>optional int32 keycode = 2;</code>
     */
    private void clearKeycode() {
      if (keypressCase_ == 2) {
        keypressCase_ = 0;
        keypress_ = null;
      }
    }

    public static final int KEYBOARD_INPUT_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    public boolean hasKeyboardInput() {
      return keypressCase_ == 3;
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    public java.lang.String getKeyboardInput() {
      java.lang.String ref = "";
      if (keypressCase_ == 3) {
        ref = (java.lang.String) keypress_;
      }
      return ref;
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    public com.google.protobuf.ByteString
        getKeyboardInputBytes() {
      java.lang.String ref = "";
      if (keypressCase_ == 3) {
        ref = (java.lang.String) keypress_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    private void setKeyboardInput(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  keypressCase_ = 3;
      keypress_ = value;
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    private void clearKeyboardInput() {
      if (keypressCase_ == 3) {
        keypressCase_ = 0;
        keypress_ = null;
      }
    }
    /**
     * <pre>
     * Text as generated by processing a virtual key code with a keyboard
     * layout. This can also be used for keyboard control sequences such
     * as "&#92;r" or "&#92;t".
     * </pre>
     *
     * <code>optional string keyboard_input = 3;</code>
     */
    private void setKeyboardInputBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  keypressCase_ = 3;
      keypress_ = value.toStringUtf8();
    }

    public static final int USE_USERNAME_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Use the username from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_username = 4;</code>
     */
    public boolean hasUseUsername() {
      return keypressCase_ == 4;
    }
    /**
     * <pre>
     * Use the username from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_username = 4;</code>
     */
    public boolean getUseUsername() {
      if (keypressCase_ == 4) {
        return (java.lang.Boolean) keypress_;
      }
      return false;
    }
    /**
     * <pre>
     * Use the username from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_username = 4;</code>
     */
    private void setUseUsername(boolean value) {
      keypressCase_ = 4;
      keypress_ = value;
    }
    /**
     * <pre>
     * Use the username from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_username = 4;</code>
     */
    private void clearUseUsername() {
      if (keypressCase_ == 4) {
        keypressCase_ = 0;
        keypress_ = null;
      }
    }

    public static final int USE_PASSWORD_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Use the password from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_password = 5;</code>
     */
    public boolean hasUsePassword() {
      return keypressCase_ == 5;
    }
    /**
     * <pre>
     * Use the password from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_password = 5;</code>
     */
    public boolean getUsePassword() {
      if (keypressCase_ == 5) {
        return (java.lang.Boolean) keypress_;
      }
      return false;
    }
    /**
     * <pre>
     * Use the password from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_password = 5;</code>
     */
    private void setUsePassword(boolean value) {
      keypressCase_ = 5;
      keypress_ = value;
    }
    /**
     * <pre>
     * Use the password from the Chrome password manager login previously
     * selected in a CollectUserDataAction.
     * </pre>
     *
     * <code>optional bool use_password = 5;</code>
     */
    private void clearUsePassword() {
      if (keypressCase_ == 5) {
        keypressCase_ = 0;
        keypress_ = null;
      }
    }

    public static final int CLIENT_MEMORY_KEY_FIELD_NUMBER = 6;
    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    public boolean hasClientMemoryKey() {
      return keypressCase_ == 6;
    }
    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    public java.lang.String getClientMemoryKey() {
      java.lang.String ref = "";
      if (keypressCase_ == 6) {
        ref = (java.lang.String) keypress_;
      }
      return ref;
    }
    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    public com.google.protobuf.ByteString
        getClientMemoryKeyBytes() {
      java.lang.String ref = "";
      if (keypressCase_ == 6) {
        ref = (java.lang.String) keypress_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    private void setClientMemoryKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  keypressCase_ = 6;
      keypress_ = value;
    }
    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    private void clearClientMemoryKey() {
      if (keypressCase_ == 6) {
        keypressCase_ = 0;
        keypress_ = null;
      }
    }
    /**
     * <pre>
     * Use the value stored at the specified memory location.
     * </pre>
     *
     * <code>optional string client_memory_key = 6;</code>
     */
    private void setClientMemoryKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  keypressCase_ = 6;
      keypress_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (keypressCase_ == 1) {
        output.writeString(1, getText());
      }
      if (keypressCase_ == 2) {
        output.writeInt32(
            2, (int)((java.lang.Integer) keypress_));
      }
      if (keypressCase_ == 3) {
        output.writeString(3, getKeyboardInput());
      }
      if (keypressCase_ == 4) {
        output.writeBool(
            4, (boolean)((java.lang.Boolean) keypress_));
      }
      if (keypressCase_ == 5) {
        output.writeBool(
            5, (boolean)((java.lang.Boolean) keypress_));
      }
      if (keypressCase_ == 6) {
        output.writeString(6, getClientMemoryKey());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (keypressCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getText());
      }
      if (keypressCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(
              2, (int)((java.lang.Integer) keypress_));
      }
      if (keypressCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getKeyboardInput());
      }
      if (keypressCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              4, (boolean)((java.lang.Boolean) keypress_));
      }
      if (keypressCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              5, (boolean)((java.lang.Boolean) keypress_));
      }
      if (keypressCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getClientMemoryKey());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.SetFormFieldValueProto.KeyPress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.SetFormFieldValueProto.KeyPress)
        org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPressOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public KeypressCase
          getKeypressCase() {
        return instance.getKeypressCase();
      }

      public Builder clearKeypress() {
        copyOnWrite();
        instance.clearKeypress();
        return this;
      }


      /**
       * <pre>
       * Text to insert as-is into a form field.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public boolean hasText() {
        return instance.hasText();
      }
      /**
       * <pre>
       * Text to insert as-is into a form field.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       * Text to insert as-is into a form field.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       * Text to insert as-is into a form field.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       * Text to insert as-is into a form field.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       * Text to insert as-is into a form field.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <pre>
       * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
       * </pre>
       *
       * <code>optional int32 keycode = 2;</code>
       */
      public boolean hasKeycode() {
        return instance.hasKeycode();
      }
      /**
       * <pre>
       * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
       * </pre>
       *
       * <code>optional int32 keycode = 2;</code>
       */
      public int getKeycode() {
        return instance.getKeycode();
      }
      /**
       * <pre>
       * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
       * </pre>
       *
       * <code>optional int32 keycode = 2;</code>
       */
      public Builder setKeycode(int value) {
        copyOnWrite();
        instance.setKeycode(value);
        return this;
      }
      /**
       * <pre>
       * DEPRECATED: A single US-ASCII character (e.g., 13 for carriage return).
       * </pre>
       *
       * <code>optional int32 keycode = 2;</code>
       */
      public Builder clearKeycode() {
        copyOnWrite();
        instance.clearKeycode();
        return this;
      }

      /**
       * <pre>
       * Text as generated by processing a virtual key code with a keyboard
       * layout. This can also be used for keyboard control sequences such
       * as "&#92;r" or "&#92;t".
       * </pre>
       *
       * <code>optional string keyboard_input = 3;</code>
       */
      public boolean hasKeyboardInput() {
        return instance.hasKeyboardInput();
      }
      /**
       * <pre>
       * Text as generated by processing a virtual key code with a keyboard
       * layout. This can also be used for keyboard control sequences such
       * as "&#92;r" or "&#92;t".
       * </pre>
       *
       * <code>optional string keyboard_input = 3;</code>
       */
      public java.lang.String getKeyboardInput() {
        return instance.getKeyboardInput();
      }
      /**
       * <pre>
       * Text as generated by processing a virtual key code with a keyboard
       * layout. This can also be used for keyboard control sequences such
       * as "&#92;r" or "&#92;t".
       * </pre>
       *
       * <code>optional string keyboard_input = 3;</code>
       */
      public com.google.protobuf.ByteString
          getKeyboardInputBytes() {
        return instance.getKeyboardInputBytes();
      }
      /**
       * <pre>
       * Text as generated by processing a virtual key code with a keyboard
       * layout. This can also be used for keyboard control sequences such
       * as "&#92;r" or "&#92;t".
       * </pre>
       *
       * <code>optional string keyboard_input = 3;</code>
       */
      public Builder setKeyboardInput(
          java.lang.String value) {
        copyOnWrite();
        instance.setKeyboardInput(value);
        return this;
      }
      /**
       * <pre>
       * Text as generated by processing a virtual key code with a keyboard
       * layout. This can also be used for keyboard control sequences such
       * as "&#92;r" or "&#92;t".
       * </pre>
       *
       * <code>optional string keyboard_input = 3;</code>
       */
      public Builder clearKeyboardInput() {
        copyOnWrite();
        instance.clearKeyboardInput();
        return this;
      }
      /**
       * <pre>
       * Text as generated by processing a virtual key code with a keyboard
       * layout. This can also be used for keyboard control sequences such
       * as "&#92;r" or "&#92;t".
       * </pre>
       *
       * <code>optional string keyboard_input = 3;</code>
       */
      public Builder setKeyboardInputBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setKeyboardInputBytes(value);
        return this;
      }

      /**
       * <pre>
       * Use the username from the Chrome password manager login previously
       * selected in a CollectUserDataAction.
       * </pre>
       *
       * <code>optional bool use_username = 4;</code>
       */
      public boolean hasUseUsername() {
        return instance.hasUseUsername();
      }
      /**
       * <pre>
       * Use the username from the Chrome password manager login previously
       * selected in a CollectUserDataAction.
       * </pre>
       *
       * <code>optional bool use_username = 4;</code>
       */
      public boolean getUseUsername() {
        return instance.getUseUsername();
      }
      /**
       * <pre>
       * Use the username from the Chrome password manager login previously
       * selected in a CollectUserDataAction.
       * </pre>
       *
       * <code>optional bool use_username = 4;</code>
       */
      public Builder setUseUsername(boolean value) {
        copyOnWrite();
        instance.setUseUsername(value);
        return this;
      }
      /**
       * <pre>
       * Use the username from the Chrome password manager login previously
       * selected in a CollectUserDataAction.
       * </pre>
       *
       * <code>optional bool use_username = 4;</code>
       */
      public Builder clearUseUsername() {
        copyOnWrite();
        instance.clearUseUsername();
        return this;
      }

      /**
       * <pre>
       * Use the password from the Chrome password manager login previously
       * selected in a CollectUserDataAction.
       * </pre>
       *
       * <code>optional bool use_password = 5;</code>
       */
      public boolean hasUsePassword() {
        return instance.hasUsePassword();
      }
      /**
       * <pre>
       * Use the password from the Chrome password manager login previously
       * selected in a CollectUserDataAction.
       * </pre>
       *
       * <code>optional bool use_password = 5;</code>
       */
      public boolean getUsePassword() {
        return instance.getUsePassword();
      }
      /**
       * <pre>
       * Use the password from the Chrome password manager login previously
       * selected in a CollectUserDataAction.
       * </pre>
       *
       * <code>optional bool use_password = 5;</code>
       */
      public Builder setUsePassword(boolean value) {
        copyOnWrite();
        instance.setUsePassword(value);
        return this;
      }
      /**
       * <pre>
       * Use the password from the Chrome password manager login previously
       * selected in a CollectUserDataAction.
       * </pre>
       *
       * <code>optional bool use_password = 5;</code>
       */
      public Builder clearUsePassword() {
        copyOnWrite();
        instance.clearUsePassword();
        return this;
      }

      /**
       * <pre>
       * Use the value stored at the specified memory location.
       * </pre>
       *
       * <code>optional string client_memory_key = 6;</code>
       */
      public boolean hasClientMemoryKey() {
        return instance.hasClientMemoryKey();
      }
      /**
       * <pre>
       * Use the value stored at the specified memory location.
       * </pre>
       *
       * <code>optional string client_memory_key = 6;</code>
       */
      public java.lang.String getClientMemoryKey() {
        return instance.getClientMemoryKey();
      }
      /**
       * <pre>
       * Use the value stored at the specified memory location.
       * </pre>
       *
       * <code>optional string client_memory_key = 6;</code>
       */
      public com.google.protobuf.ByteString
          getClientMemoryKeyBytes() {
        return instance.getClientMemoryKeyBytes();
      }
      /**
       * <pre>
       * Use the value stored at the specified memory location.
       * </pre>
       *
       * <code>optional string client_memory_key = 6;</code>
       */
      public Builder setClientMemoryKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setClientMemoryKey(value);
        return this;
      }
      /**
       * <pre>
       * Use the value stored at the specified memory location.
       * </pre>
       *
       * <code>optional string client_memory_key = 6;</code>
       */
      public Builder clearClientMemoryKey() {
        copyOnWrite();
        instance.clearClientMemoryKey();
        return this;
      }
      /**
       * <pre>
       * Use the value stored at the specified memory location.
       * </pre>
       *
       * <code>optional string client_memory_key = 6;</code>
       */
      public Builder setClientMemoryKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setClientMemoryKeyBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.SetFormFieldValueProto.KeyPress)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress other = (org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress) arg1;
          switch (other.getKeypressCase()) {
            case TEXT: {
              keypress_ = visitor.visitOneofString(
                 keypressCase_ == 1, keypress_, other.keypress_);
              break;
            }
            case KEYCODE: {
              keypress_ = visitor.visitOneofInt(
                  keypressCase_ == 2, keypress_, other.keypress_);
              break;
            }
            case KEYBOARD_INPUT: {
              keypress_ = visitor.visitOneofString(
                 keypressCase_ == 3, keypress_, other.keypress_);
              break;
            }
            case USE_USERNAME: {
              keypress_ = visitor.visitOneofBoolean(
                  keypressCase_ == 4, keypress_, other.keypress_);
              break;
            }
            case USE_PASSWORD: {
              keypress_ = visitor.visitOneofBoolean(
                  keypressCase_ == 5, keypress_, other.keypress_);
              break;
            }
            case CLIENT_MEMORY_KEY: {
              keypress_ = visitor.visitOneofString(
                 keypressCase_ == 6, keypress_, other.keypress_);
              break;
            }
            case KEYPRESS_NOT_SET: {
              visitor.visitOneofNotSet(keypressCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.keypressCase_ != 0) {
              keypressCase_ = other.keypressCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readString();
                  keypressCase_ = 1;
                  keypress_ = s;
                  break;
                }
                case 16: {
                  keypressCase_ = 2;
                  keypress_ = input.readInt32();
                  break;
                }
                case 26: {
                  String s = input.readString();
                  keypressCase_ = 3;
                  keypress_ = s;
                  break;
                }
                case 32: {
                  keypressCase_ = 4;
                  keypress_ = input.readBool();
                  break;
                }
                case 40: {
                  keypressCase_ = 5;
                  keypress_ = input.readBool();
                  break;
                }
                case 50: {
                  String s = input.readString();
                  keypressCase_ = 6;
                  keypress_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.SetFormFieldValueProto.KeyPress)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new KeyPress();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<KeyPress> PARSER;

    public static com.google.protobuf.Parser<KeyPress> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int ELEMENT_FIELD_NUMBER = 1;
  private org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto element_;
  /**
   * <pre>
   * A reference to the form element whose value should be set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  public boolean hasElement() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * A reference to the form element whose value should be set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getElement() {
    return element_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance() : element_;
  }
  /**
   * <pre>
   * A reference to the form element whose value should be set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  private void setElement(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    element_ = value;
    bitField0_ |= 0x00000001;
    }
  /**
   * <pre>
   * A reference to the form element whose value should be set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  private void setElement(
      org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
    element_ = builderForValue.build();
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * A reference to the form element whose value should be set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  private void mergeElement(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (element_ != null &&
        element_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
      element_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder(element_).mergeFrom(value).buildPartial();
    } else {
      element_ = value;
    }
    bitField0_ |= 0x00000001;
  }
  /**
   * <pre>
   * A reference to the form element whose value should be set.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
   */
  private void clearElement() {  element_ = null;
    bitField0_ = (bitField0_ & ~0x00000001);
  }

  public static final int VALUE_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress> value_;
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress> getValueList() {
    return value_;
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPressOrBuilder> 
      getValueOrBuilderList() {
    return value_;
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  public int getValueCount() {
    return value_.size();
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress getValue(int index) {
    return value_.get(index);
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPressOrBuilder getValueOrBuilder(
      int index) {
    return value_.get(index);
  }
  private void ensureValueIsMutable() {
    if (!value_.isModifiable()) {
      value_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(value_);
     }
  }

  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void setValue(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureValueIsMutable();
    value_.set(index, value);
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void setValue(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.Builder builderForValue) {
    ensureValueIsMutable();
    value_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void addValue(org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureValueIsMutable();
    value_.add(value);
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void addValue(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureValueIsMutable();
    value_.add(index, value);
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void addValue(
      org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.Builder builderForValue) {
    ensureValueIsMutable();
    value_.add(builderForValue.build());
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void addValue(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.Builder builderForValue) {
    ensureValueIsMutable();
    value_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void addAllValue(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress> values) {
    ensureValueIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, value_);
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void clearValue() {
    value_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The value to set.
   * </pre>
   *
   * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
   */
  private void removeValue(int index) {
    ensureValueIsMutable();
    value_.remove(index);
  }

  public static final int SIMULATE_KEY_PRESSES_FIELD_NUMBER = 5;
  private boolean simulateKeyPresses_;
  /**
   * <pre>
   * Whether to send key press events when setting values to HTML fields.
   * </pre>
   *
   * <code>optional bool simulate_key_presses = 5;</code>
   */
  public boolean hasSimulateKeyPresses() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Whether to send key press events when setting values to HTML fields.
   * </pre>
   *
   * <code>optional bool simulate_key_presses = 5;</code>
   */
  public boolean getSimulateKeyPresses() {
    return simulateKeyPresses_;
  }
  /**
   * <pre>
   * Whether to send key press events when setting values to HTML fields.
   * </pre>
   *
   * <code>optional bool simulate_key_presses = 5;</code>
   */
  private void setSimulateKeyPresses(boolean value) {
    bitField0_ |= 0x00000002;
    simulateKeyPresses_ = value;
  }
  /**
   * <pre>
   * Whether to send key press events when setting values to HTML fields.
   * </pre>
   *
   * <code>optional bool simulate_key_presses = 5;</code>
   */
  private void clearSimulateKeyPresses() {
    bitField0_ = (bitField0_ & ~0x00000002);
    simulateKeyPresses_ = false;
  }

  public static final int DELAY_IN_MILLISECOND_FIELD_NUMBER = 6;
  private int delayInMillisecond_;
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 6 [default = 20];</code>
   */
  public boolean hasDelayInMillisecond() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 6 [default = 20];</code>
   */
  public int getDelayInMillisecond() {
    return delayInMillisecond_;
  }
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 6 [default = 20];</code>
   */
  private void setDelayInMillisecond(int value) {
    bitField0_ |= 0x00000004;
    delayInMillisecond_ = value;
  }
  /**
   * <pre>
   * Delay between two key presses when simlulating.
   * </pre>
   *
   * <code>optional int32 delay_in_millisecond = 6 [default = 20];</code>
   */
  private void clearDelayInMillisecond() {
    bitField0_ = (bitField0_ & ~0x00000004);
    delayInMillisecond_ = 20;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeMessage(1, getElement());
    }
    for (int i = 0; i < value_.size(); i++) {
      output.writeMessage(2, value_.get(i));
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBool(5, simulateKeyPresses_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(6, delayInMillisecond_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getElement());
    }
    for (int i = 0; i < value_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, value_.get(i));
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, simulateKeyPresses_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(6, delayInMillisecond_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Set the value of an form element.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.SetFormFieldValueProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.SetFormFieldValueProto)
      org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A reference to the form element whose value should be set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public boolean hasElement() {
      return instance.hasElement();
    }
    /**
     * <pre>
     * A reference to the form element whose value should be set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getElement() {
      return instance.getElement();
    }
    /**
     * <pre>
     * A reference to the form element whose value should be set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public Builder setElement(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.setElement(value);
      return this;
      }
    /**
     * <pre>
     * A reference to the form element whose value should be set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public Builder setElement(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      copyOnWrite();
      instance.setElement(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A reference to the form element whose value should be set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public Builder mergeElement(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.mergeElement(value);
      return this;
    }
    /**
     * <pre>
     * A reference to the form element whose value should be set.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto element = 1;</code>
     */
    public Builder clearElement() {  copyOnWrite();
      instance.clearElement();
      return this;
    }

    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress> getValueList() {
      return java.util.Collections.unmodifiableList(
          instance.getValueList());
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public int getValueCount() {
      return instance.getValueCount();
    }/**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress getValue(int index) {
      return instance.getValue(index);
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder setValue(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress value) {
      copyOnWrite();
      instance.setValue(index, value);
      return this;
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder setValue(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.Builder builderForValue) {
      copyOnWrite();
      instance.setValue(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder addValue(org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress value) {
      copyOnWrite();
      instance.addValue(value);
      return this;
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder addValue(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress value) {
      copyOnWrite();
      instance.addValue(index, value);
      return this;
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder addValue(
        org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.Builder builderForValue) {
      copyOnWrite();
      instance.addValue(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder addValue(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.Builder builderForValue) {
      copyOnWrite();
      instance.addValue(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder addAllValue(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress> values) {
      copyOnWrite();
      instance.addAllValue(values);
      return this;
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder clearValue() {
      copyOnWrite();
      instance.clearValue();
      return this;
    }
    /**
     * <pre>
     * The value to set.
     * </pre>
     *
     * <code>repeated .autofill_assistant.SetFormFieldValueProto.KeyPress value = 2;</code>
     */
    public Builder removeValue(int index) {
      copyOnWrite();
      instance.removeValue(index);
      return this;
    }

    /**
     * <pre>
     * Whether to send key press events when setting values to HTML fields.
     * </pre>
     *
     * <code>optional bool simulate_key_presses = 5;</code>
     */
    public boolean hasSimulateKeyPresses() {
      return instance.hasSimulateKeyPresses();
    }
    /**
     * <pre>
     * Whether to send key press events when setting values to HTML fields.
     * </pre>
     *
     * <code>optional bool simulate_key_presses = 5;</code>
     */
    public boolean getSimulateKeyPresses() {
      return instance.getSimulateKeyPresses();
    }
    /**
     * <pre>
     * Whether to send key press events when setting values to HTML fields.
     * </pre>
     *
     * <code>optional bool simulate_key_presses = 5;</code>
     */
    public Builder setSimulateKeyPresses(boolean value) {
      copyOnWrite();
      instance.setSimulateKeyPresses(value);
      return this;
    }
    /**
     * <pre>
     * Whether to send key press events when setting values to HTML fields.
     * </pre>
     *
     * <code>optional bool simulate_key_presses = 5;</code>
     */
    public Builder clearSimulateKeyPresses() {
      copyOnWrite();
      instance.clearSimulateKeyPresses();
      return this;
    }

    /**
     * <pre>
     * Delay between two key presses when simlulating.
     * </pre>
     *
     * <code>optional int32 delay_in_millisecond = 6 [default = 20];</code>
     */
    public boolean hasDelayInMillisecond() {
      return instance.hasDelayInMillisecond();
    }
    /**
     * <pre>
     * Delay between two key presses when simlulating.
     * </pre>
     *
     * <code>optional int32 delay_in_millisecond = 6 [default = 20];</code>
     */
    public int getDelayInMillisecond() {
      return instance.getDelayInMillisecond();
    }
    /**
     * <pre>
     * Delay between two key presses when simlulating.
     * </pre>
     *
     * <code>optional int32 delay_in_millisecond = 6 [default = 20];</code>
     */
    public Builder setDelayInMillisecond(int value) {
      copyOnWrite();
      instance.setDelayInMillisecond(value);
      return this;
    }
    /**
     * <pre>
     * Delay between two key presses when simlulating.
     * </pre>
     *
     * <code>optional int32 delay_in_millisecond = 6 [default = 20];</code>
     */
    public Builder clearDelayInMillisecond() {
      copyOnWrite();
      instance.clearDelayInMillisecond();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.SetFormFieldValueProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        value_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto other = (org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto) arg1;
        element_ = visitor.visitMessage(element_, other.element_);
        value_= visitor.visitList(value_, other.value_);
        simulateKeyPresses_ = visitor.visitBoolean(
            hasSimulateKeyPresses(), simulateKeyPresses_,
            other.hasSimulateKeyPresses(), other.simulateKeyPresses_);
        delayInMillisecond_ = visitor.visitInt(
            hasDelayInMillisecond(), delayInMillisecond_,
            other.hasDelayInMillisecond(), other.delayInMillisecond_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = element_.toBuilder();
                }
                element_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(element_);
                  element_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                if (!value_.isModifiable()) {
                  value_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(value_);
                }
                value_.add(
                    input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.KeyPress.parser(), extensionRegistry));
                break;
              }
              case 40: {
                bitField0_ |= 0x00000002;
                simulateKeyPresses_ = input.readBool();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000004;
                delayInMillisecond_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.SetFormFieldValueProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new SetFormFieldValueProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.SetFormFieldValueProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<SetFormFieldValueProto> PARSER;

  public static com.google.protobuf.Parser<SetFormFieldValueProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

