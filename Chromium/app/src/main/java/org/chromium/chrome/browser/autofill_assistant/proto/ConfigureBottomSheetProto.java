// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Allow scripts to configure the peek height of the sheet and whether we should
 * resize the viewport by this peek height.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.ConfigureBottomSheetProto}
 */
public  final class ConfigureBottomSheetProto extends
    com.google.protobuf.GeneratedMessageLite<
        ConfigureBottomSheetProto, ConfigureBottomSheetProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.ConfigureBottomSheetProto)
    ConfigureBottomSheetProtoOrBuilder {
  private ConfigureBottomSheetProto() {
  }
  /**
   * Protobuf enum {@code autofill_assistant.ConfigureBottomSheetProto.ViewportResizing}
   */
  public enum ViewportResizing
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Don't change resizing configuration.
     * </pre>
     *
     * <code>NO_CHANGE = 0;</code>
     */
    NO_CHANGE(0),
    /**
     * <pre>
     * Resize the layout viewport such that it is completely visible when the
     * sheet is in the peek state.
     * </pre>
     *
     * <code>RESIZE_LAYOUT_VIEWPORT = 1;</code>
     */
    RESIZE_LAYOUT_VIEWPORT(1),
    /**
     * <pre>
     * Don't resize the viewport such that it is overlaid by the sheet, even in
     * the peek state.
     * </pre>
     *
     * <code>NO_RESIZE = 2;</code>
     */
    NO_RESIZE(2),
    /**
     * <pre>
     * Dynamically resize the visual viewport by the height of the sheet. This
     * allows to fully scroll the page above the sheet at any time.
     * </pre>
     *
     * <code>RESIZE_VISUAL_VIEWPORT = 3;</code>
     */
    RESIZE_VISUAL_VIEWPORT(3),
    ;

    /**
     * <pre>
     * Don't change resizing configuration.
     * </pre>
     *
     * <code>NO_CHANGE = 0;</code>
     */
    public static final int NO_CHANGE_VALUE = 0;
    /**
     * <pre>
     * Resize the layout viewport such that it is completely visible when the
     * sheet is in the peek state.
     * </pre>
     *
     * <code>RESIZE_LAYOUT_VIEWPORT = 1;</code>
     */
    public static final int RESIZE_LAYOUT_VIEWPORT_VALUE = 1;
    /**
     * <pre>
     * Don't resize the viewport such that it is overlaid by the sheet, even in
     * the peek state.
     * </pre>
     *
     * <code>NO_RESIZE = 2;</code>
     */
    public static final int NO_RESIZE_VALUE = 2;
    /**
     * <pre>
     * Dynamically resize the visual viewport by the height of the sheet. This
     * allows to fully scroll the page above the sheet at any time.
     * </pre>
     *
     * <code>RESIZE_VISUAL_VIEWPORT = 3;</code>
     */
    public static final int RESIZE_VISUAL_VIEWPORT_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ViewportResizing valueOf(int value) {
      return forNumber(value);
    }

    public static ViewportResizing forNumber(int value) {
      switch (value) {
        case 0: return NO_CHANGE;
        case 1: return RESIZE_LAYOUT_VIEWPORT;
        case 2: return NO_RESIZE;
        case 3: return RESIZE_VISUAL_VIEWPORT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ViewportResizing>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ViewportResizing> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ViewportResizing>() {
            public ViewportResizing findValueByNumber(int number) {
              return ViewportResizing.forNumber(number);
            }
          };

    private final int value;

    private ViewportResizing(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:autofill_assistant.ConfigureBottomSheetProto.ViewportResizing)
  }

  /**
   * <pre>
   * The peek mode allows to set what components are visible when the sheet is
   * in the peek (minimized) state.
   * </pre>
   *
   * Protobuf enum {@code autofill_assistant.ConfigureBottomSheetProto.PeekMode}
   */
  public enum PeekMode
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>UNDEFINED_PEEK_MODE = 0;</code>
     */
    UNDEFINED_PEEK_MODE(0),
    /**
     * <pre>
     * Only show the swipe handle.
     * </pre>
     *
     * <code>HANDLE = 1;</code>
     */
    HANDLE(1),
    /**
     * <pre>
     * Show the swipe handle, header (status message, poodle, profile icon) and
     * progress bar.
     * </pre>
     *
     * <code>HANDLE_HEADER = 2;</code>
     */
    HANDLE_HEADER(2),
    /**
     * <pre>
     * Show swipe handle, header, progress bar, suggestions and actions.
     * </pre>
     *
     * <code>HANDLE_HEADER_CAROUSELS = 3;</code>
     */
    HANDLE_HEADER_CAROUSELS(3),
    ;

    /**
     * <code>UNDEFINED_PEEK_MODE = 0;</code>
     */
    public static final int UNDEFINED_PEEK_MODE_VALUE = 0;
    /**
     * <pre>
     * Only show the swipe handle.
     * </pre>
     *
     * <code>HANDLE = 1;</code>
     */
    public static final int HANDLE_VALUE = 1;
    /**
     * <pre>
     * Show the swipe handle, header (status message, poodle, profile icon) and
     * progress bar.
     * </pre>
     *
     * <code>HANDLE_HEADER = 2;</code>
     */
    public static final int HANDLE_HEADER_VALUE = 2;
    /**
     * <pre>
     * Show swipe handle, header, progress bar, suggestions and actions.
     * </pre>
     *
     * <code>HANDLE_HEADER_CAROUSELS = 3;</code>
     */
    public static final int HANDLE_HEADER_CAROUSELS_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PeekMode valueOf(int value) {
      return forNumber(value);
    }

    public static PeekMode forNumber(int value) {
      switch (value) {
        case 0: return UNDEFINED_PEEK_MODE;
        case 1: return HANDLE;
        case 2: return HANDLE_HEADER;
        case 3: return HANDLE_HEADER_CAROUSELS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PeekMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PeekMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PeekMode>() {
            public PeekMode findValueByNumber(int number) {
              return PeekMode.forNumber(number);
            }
          };

    private final int value;

    private PeekMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:autofill_assistant.ConfigureBottomSheetProto.PeekMode)
  }

  private int bitField0_;
  public static final int VIEWPORT_RESIZING_FIELD_NUMBER = 1;
  private int viewportResizing_;
  /**
   * <pre>
   * Whether the viewport should be resized. Resizing the viewport is an
   * expensive operation, so toggling the resize on/off should be done
   * cautiously.
   * </pre>
   *
   * <code>optional .autofill_assistant.ConfigureBottomSheetProto.ViewportResizing viewport_resizing = 1;</code>
   */
  public boolean hasViewportResizing() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Whether the viewport should be resized. Resizing the viewport is an
   * expensive operation, so toggling the resize on/off should be done
   * cautiously.
   * </pre>
   *
   * <code>optional .autofill_assistant.ConfigureBottomSheetProto.ViewportResizing viewport_resizing = 1;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing getViewportResizing() {
    org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing result = org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing.forNumber(viewportResizing_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing.NO_CHANGE : result;
  }
  /**
   * <pre>
   * Whether the viewport should be resized. Resizing the viewport is an
   * expensive operation, so toggling the resize on/off should be done
   * cautiously.
   * </pre>
   *
   * <code>optional .autofill_assistant.ConfigureBottomSheetProto.ViewportResizing viewport_resizing = 1;</code>
   */
  private void setViewportResizing(org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000001;
    viewportResizing_ = value.getNumber();
  }
  /**
   * <pre>
   * Whether the viewport should be resized. Resizing the viewport is an
   * expensive operation, so toggling the resize on/off should be done
   * cautiously.
   * </pre>
   *
   * <code>optional .autofill_assistant.ConfigureBottomSheetProto.ViewportResizing viewport_resizing = 1;</code>
   */
  private void clearViewportResizing() {
    bitField0_ = (bitField0_ & ~0x00000001);
    viewportResizing_ = 0;
  }

  public static final int PEEK_MODE_FIELD_NUMBER = 2;
  private int peekMode_;
  /**
   * <pre>
   * Set the peek mode. This will change the peek height of the sheet. If
   * viewport_resizing is set to RESIZE_LAYOUT_VIEWPORT or was set by a previous
   * ConfigureBottomSheet action, the viewport will be resized to match the new
   * peek height.
   * </pre>
   *
   * <code>optional .autofill_assistant.ConfigureBottomSheetProto.PeekMode peek_mode = 2;</code>
   */
  public boolean hasPeekMode() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * Set the peek mode. This will change the peek height of the sheet. If
   * viewport_resizing is set to RESIZE_LAYOUT_VIEWPORT or was set by a previous
   * ConfigureBottomSheet action, the viewport will be resized to match the new
   * peek height.
   * </pre>
   *
   * <code>optional .autofill_assistant.ConfigureBottomSheetProto.PeekMode peek_mode = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode getPeekMode() {
    org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode result = org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode.forNumber(peekMode_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode.UNDEFINED_PEEK_MODE : result;
  }
  /**
   * <pre>
   * Set the peek mode. This will change the peek height of the sheet. If
   * viewport_resizing is set to RESIZE_LAYOUT_VIEWPORT or was set by a previous
   * ConfigureBottomSheet action, the viewport will be resized to match the new
   * peek height.
   * </pre>
   *
   * <code>optional .autofill_assistant.ConfigureBottomSheetProto.PeekMode peek_mode = 2;</code>
   */
  private void setPeekMode(org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000002;
    peekMode_ = value.getNumber();
  }
  /**
   * <pre>
   * Set the peek mode. This will change the peek height of the sheet. If
   * viewport_resizing is set to RESIZE_LAYOUT_VIEWPORT or was set by a previous
   * ConfigureBottomSheet action, the viewport will be resized to match the new
   * peek height.
   * </pre>
   *
   * <code>optional .autofill_assistant.ConfigureBottomSheetProto.PeekMode peek_mode = 2;</code>
   */
  private void clearPeekMode() {
    bitField0_ = (bitField0_ & ~0x00000002);
    peekMode_ = 0;
  }

  public static final int RESIZE_TIMEOUT_MS_FIELD_NUMBER = 3;
  private int resizeTimeoutMs_;
  /**
   * <pre>
   * Maximum time to wait for the window to resize before continuing with the
   * script. If 0 or unset, the action doesn't wait.
   * </pre>
   *
   * <code>optional int32 resize_timeout_ms = 3;</code>
   */
  public boolean hasResizeTimeoutMs() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Maximum time to wait for the window to resize before continuing with the
   * script. If 0 or unset, the action doesn't wait.
   * </pre>
   *
   * <code>optional int32 resize_timeout_ms = 3;</code>
   */
  public int getResizeTimeoutMs() {
    return resizeTimeoutMs_;
  }
  /**
   * <pre>
   * Maximum time to wait for the window to resize before continuing with the
   * script. If 0 or unset, the action doesn't wait.
   * </pre>
   *
   * <code>optional int32 resize_timeout_ms = 3;</code>
   */
  private void setResizeTimeoutMs(int value) {
    bitField0_ |= 0x00000004;
    resizeTimeoutMs_ = value;
  }
  /**
   * <pre>
   * Maximum time to wait for the window to resize before continuing with the
   * script. If 0 or unset, the action doesn't wait.
   * </pre>
   *
   * <code>optional int32 resize_timeout_ms = 3;</code>
   */
  private void clearResizeTimeoutMs() {
    bitField0_ = (bitField0_ & ~0x00000004);
    resizeTimeoutMs_ = 0;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeEnum(1, viewportResizing_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeEnum(2, peekMode_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, resizeTimeoutMs_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, viewportResizing_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, peekMode_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, resizeTimeoutMs_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Allow scripts to configure the peek height of the sheet and whether we should
   * resize the viewport by this peek height.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.ConfigureBottomSheetProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.ConfigureBottomSheetProto)
      org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Whether the viewport should be resized. Resizing the viewport is an
     * expensive operation, so toggling the resize on/off should be done
     * cautiously.
     * </pre>
     *
     * <code>optional .autofill_assistant.ConfigureBottomSheetProto.ViewportResizing viewport_resizing = 1;</code>
     */
    public boolean hasViewportResizing() {
      return instance.hasViewportResizing();
    }
    /**
     * <pre>
     * Whether the viewport should be resized. Resizing the viewport is an
     * expensive operation, so toggling the resize on/off should be done
     * cautiously.
     * </pre>
     *
     * <code>optional .autofill_assistant.ConfigureBottomSheetProto.ViewportResizing viewport_resizing = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing getViewportResizing() {
      return instance.getViewportResizing();
    }
    /**
     * <pre>
     * Whether the viewport should be resized. Resizing the viewport is an
     * expensive operation, so toggling the resize on/off should be done
     * cautiously.
     * </pre>
     *
     * <code>optional .autofill_assistant.ConfigureBottomSheetProto.ViewportResizing viewport_resizing = 1;</code>
     */
    public Builder setViewportResizing(org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing value) {
      copyOnWrite();
      instance.setViewportResizing(value);
      return this;
    }
    /**
     * <pre>
     * Whether the viewport should be resized. Resizing the viewport is an
     * expensive operation, so toggling the resize on/off should be done
     * cautiously.
     * </pre>
     *
     * <code>optional .autofill_assistant.ConfigureBottomSheetProto.ViewportResizing viewport_resizing = 1;</code>
     */
    public Builder clearViewportResizing() {
      copyOnWrite();
      instance.clearViewportResizing();
      return this;
    }

    /**
     * <pre>
     * Set the peek mode. This will change the peek height of the sheet. If
     * viewport_resizing is set to RESIZE_LAYOUT_VIEWPORT or was set by a previous
     * ConfigureBottomSheet action, the viewport will be resized to match the new
     * peek height.
     * </pre>
     *
     * <code>optional .autofill_assistant.ConfigureBottomSheetProto.PeekMode peek_mode = 2;</code>
     */
    public boolean hasPeekMode() {
      return instance.hasPeekMode();
    }
    /**
     * <pre>
     * Set the peek mode. This will change the peek height of the sheet. If
     * viewport_resizing is set to RESIZE_LAYOUT_VIEWPORT or was set by a previous
     * ConfigureBottomSheet action, the viewport will be resized to match the new
     * peek height.
     * </pre>
     *
     * <code>optional .autofill_assistant.ConfigureBottomSheetProto.PeekMode peek_mode = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode getPeekMode() {
      return instance.getPeekMode();
    }
    /**
     * <pre>
     * Set the peek mode. This will change the peek height of the sheet. If
     * viewport_resizing is set to RESIZE_LAYOUT_VIEWPORT or was set by a previous
     * ConfigureBottomSheet action, the viewport will be resized to match the new
     * peek height.
     * </pre>
     *
     * <code>optional .autofill_assistant.ConfigureBottomSheetProto.PeekMode peek_mode = 2;</code>
     */
    public Builder setPeekMode(org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode value) {
      copyOnWrite();
      instance.setPeekMode(value);
      return this;
    }
    /**
     * <pre>
     * Set the peek mode. This will change the peek height of the sheet. If
     * viewport_resizing is set to RESIZE_LAYOUT_VIEWPORT or was set by a previous
     * ConfigureBottomSheet action, the viewport will be resized to match the new
     * peek height.
     * </pre>
     *
     * <code>optional .autofill_assistant.ConfigureBottomSheetProto.PeekMode peek_mode = 2;</code>
     */
    public Builder clearPeekMode() {
      copyOnWrite();
      instance.clearPeekMode();
      return this;
    }

    /**
     * <pre>
     * Maximum time to wait for the window to resize before continuing with the
     * script. If 0 or unset, the action doesn't wait.
     * </pre>
     *
     * <code>optional int32 resize_timeout_ms = 3;</code>
     */
    public boolean hasResizeTimeoutMs() {
      return instance.hasResizeTimeoutMs();
    }
    /**
     * <pre>
     * Maximum time to wait for the window to resize before continuing with the
     * script. If 0 or unset, the action doesn't wait.
     * </pre>
     *
     * <code>optional int32 resize_timeout_ms = 3;</code>
     */
    public int getResizeTimeoutMs() {
      return instance.getResizeTimeoutMs();
    }
    /**
     * <pre>
     * Maximum time to wait for the window to resize before continuing with the
     * script. If 0 or unset, the action doesn't wait.
     * </pre>
     *
     * <code>optional int32 resize_timeout_ms = 3;</code>
     */
    public Builder setResizeTimeoutMs(int value) {
      copyOnWrite();
      instance.setResizeTimeoutMs(value);
      return this;
    }
    /**
     * <pre>
     * Maximum time to wait for the window to resize before continuing with the
     * script. If 0 or unset, the action doesn't wait.
     * </pre>
     *
     * <code>optional int32 resize_timeout_ms = 3;</code>
     */
    public Builder clearResizeTimeoutMs() {
      copyOnWrite();
      instance.clearResizeTimeoutMs();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.ConfigureBottomSheetProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto other = (org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto) arg1;
        viewportResizing_ = visitor.visitInt(hasViewportResizing(), viewportResizing_,
            other.hasViewportResizing(), other.viewportResizing_);
        peekMode_ = visitor.visitInt(hasPeekMode(), peekMode_,
            other.hasPeekMode(), other.peekMode_);
        resizeTimeoutMs_ = visitor.visitInt(
            hasResizeTimeoutMs(), resizeTimeoutMs_,
            other.hasResizeTimeoutMs(), other.resizeTimeoutMs_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                int rawValue = input.readEnum();
                org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing value = org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.ViewportResizing.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(1, rawValue);
                } else {
                  bitField0_ |= 0x00000001;
                  viewportResizing_ = rawValue;
                }
                break;
              }
              case 16: {
                int rawValue = input.readEnum();
                org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode value = org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.PeekMode.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(2, rawValue);
                } else {
                  bitField0_ |= 0x00000002;
                  peekMode_ = rawValue;
                }
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                resizeTimeoutMs_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.ConfigureBottomSheetProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ConfigureBottomSheetProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.ConfigureBottomSheetProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ConfigureBottomSheetProto> PARSER;

  public static com.google.protobuf.Parser<ConfigureBottomSheetProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

