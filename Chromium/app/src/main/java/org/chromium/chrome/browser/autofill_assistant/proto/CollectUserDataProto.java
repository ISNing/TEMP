// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Asks to provide the data used by UseAddressAction and
 * UseCreditCardAction.
 * Next: 22
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.CollectUserDataProto}
 */
public  final class CollectUserDataProto extends
    com.google.protobuf.GeneratedMessageLite<
        CollectUserDataProto, CollectUserDataProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.CollectUserDataProto)
    CollectUserDataProtoOrBuilder {
  private CollectUserDataProto() {
    prompt_ = "";
    billingAddressName_ = "";
    shippingAddressName_ = "";
    supportedBasicCardNetworks_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    confirmButtonText_ = "";
    requestTermsAndConditions_ = true;
    acceptTermsAndConditionsText_ = "";
    termsRequireReviewText_ = "";
    privacyNoticeText_ = "";
    additionalActions_ = emptyProtobufList();
    billingPostalCodeMissingText_ = "";
    creditCardExpiredText_ = "";
    additionalPrependedSections_ = emptyProtobufList();
    additionalAppendedSections_ = emptyProtobufList();
  }
  /**
   * Protobuf enum {@code autofill_assistant.CollectUserDataProto.TermsAndConditionsState}
   */
  public enum TermsAndConditionsState
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * No choice has been made yet.
     * </pre>
     *
     * <code>NOT_SELECTED = 0;</code>
     */
    NOT_SELECTED(0),
    /**
     * <pre>
     * The 'accept' radio button is toggled.
     * </pre>
     *
     * <code>ACCEPTED = 1;</code>
     */
    ACCEPTED(1),
    /**
     * <pre>
     * The 'review' radio button is toggled.
     * </pre>
     *
     * <code>REVIEW_REQUIRED = 2;</code>
     */
    REVIEW_REQUIRED(2),
    ;

    /**
     * <pre>
     * No choice has been made yet.
     * </pre>
     *
     * <code>NOT_SELECTED = 0;</code>
     */
    public static final int NOT_SELECTED_VALUE = 0;
    /**
     * <pre>
     * The 'accept' radio button is toggled.
     * </pre>
     *
     * <code>ACCEPTED = 1;</code>
     */
    public static final int ACCEPTED_VALUE = 1;
    /**
     * <pre>
     * The 'review' radio button is toggled.
     * </pre>
     *
     * <code>REVIEW_REQUIRED = 2;</code>
     */
    public static final int REVIEW_REQUIRED_VALUE = 2;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TermsAndConditionsState valueOf(int value) {
      return forNumber(value);
    }

    public static TermsAndConditionsState forNumber(int value) {
      switch (value) {
        case 0: return NOT_SELECTED;
        case 1: return ACCEPTED;
        case 2: return REVIEW_REQUIRED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TermsAndConditionsState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TermsAndConditionsState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TermsAndConditionsState>() {
            public TermsAndConditionsState findValueByNumber(int number) {
              return TermsAndConditionsState.forNumber(number);
            }
          };

    private final int value;

    private TermsAndConditionsState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:autofill_assistant.CollectUserDataProto.TermsAndConditionsState)
  }

  private int bitField0_;
  public static final int PROMPT_FIELD_NUMBER = 1;
  private java.lang.String prompt_;
  /**
   * <code>optional string prompt = 1;</code>
   */
  public boolean hasPrompt() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional string prompt = 1;</code>
   */
  public java.lang.String getPrompt() {
    return prompt_;
  }
  /**
   * <code>optional string prompt = 1;</code>
   */
  public com.google.protobuf.ByteString
      getPromptBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(prompt_);
  }
  /**
   * <code>optional string prompt = 1;</code>
   */
  private void setPrompt(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    prompt_ = value;
  }
  /**
   * <code>optional string prompt = 1;</code>
   */
  private void clearPrompt() {
    bitField0_ = (bitField0_ & ~0x00000001);
    prompt_ = getDefaultInstance().getPrompt();
  }
  /**
   * <code>optional string prompt = 1;</code>
   */
  private void setPromptBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    prompt_ = value.toStringUtf8();
  }

  public static final int BILLING_ADDRESS_NAME_FIELD_NUMBER = 2;
  private java.lang.String billingAddressName_;
  /**
   * <pre>
   * NOTE: The action does not ask separately for billing address.
   * The billing address is associated with the credit card that was picked.
   * </pre>
   *
   * <code>optional string billing_address_name = 2;</code>
   */
  public boolean hasBillingAddressName() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * NOTE: The action does not ask separately for billing address.
   * The billing address is associated with the credit card that was picked.
   * </pre>
   *
   * <code>optional string billing_address_name = 2;</code>
   */
  public java.lang.String getBillingAddressName() {
    return billingAddressName_;
  }
  /**
   * <pre>
   * NOTE: The action does not ask separately for billing address.
   * The billing address is associated with the credit card that was picked.
   * </pre>
   *
   * <code>optional string billing_address_name = 2;</code>
   */
  public com.google.protobuf.ByteString
      getBillingAddressNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(billingAddressName_);
  }
  /**
   * <pre>
   * NOTE: The action does not ask separately for billing address.
   * The billing address is associated with the credit card that was picked.
   * </pre>
   *
   * <code>optional string billing_address_name = 2;</code>
   */
  private void setBillingAddressName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    billingAddressName_ = value;
  }
  /**
   * <pre>
   * NOTE: The action does not ask separately for billing address.
   * The billing address is associated with the credit card that was picked.
   * </pre>
   *
   * <code>optional string billing_address_name = 2;</code>
   */
  private void clearBillingAddressName() {
    bitField0_ = (bitField0_ & ~0x00000002);
    billingAddressName_ = getDefaultInstance().getBillingAddressName();
  }
  /**
   * <pre>
   * NOTE: The action does not ask separately for billing address.
   * The billing address is associated with the credit card that was picked.
   * </pre>
   *
   * <code>optional string billing_address_name = 2;</code>
   */
  private void setBillingAddressNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
    billingAddressName_ = value.toStringUtf8();
  }

  public static final int SHIPPING_ADDRESS_NAME_FIELD_NUMBER = 3;
  private java.lang.String shippingAddressName_;
  /**
   * <pre>
   * If present will save the shipping address inside the memory under the
   * specified name. If empty we won't ask for the shipping address. Data saved
   * under this name can be reused by UseAddressAction.
   * </pre>
   *
   * <code>optional string shipping_address_name = 3;</code>
   */
  public boolean hasShippingAddressName() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * If present will save the shipping address inside the memory under the
   * specified name. If empty we won't ask for the shipping address. Data saved
   * under this name can be reused by UseAddressAction.
   * </pre>
   *
   * <code>optional string shipping_address_name = 3;</code>
   */
  public java.lang.String getShippingAddressName() {
    return shippingAddressName_;
  }
  /**
   * <pre>
   * If present will save the shipping address inside the memory under the
   * specified name. If empty we won't ask for the shipping address. Data saved
   * under this name can be reused by UseAddressAction.
   * </pre>
   *
   * <code>optional string shipping_address_name = 3;</code>
   */
  public com.google.protobuf.ByteString
      getShippingAddressNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(shippingAddressName_);
  }
  /**
   * <pre>
   * If present will save the shipping address inside the memory under the
   * specified name. If empty we won't ask for the shipping address. Data saved
   * under this name can be reused by UseAddressAction.
   * </pre>
   *
   * <code>optional string shipping_address_name = 3;</code>
   */
  private void setShippingAddressName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    shippingAddressName_ = value;
  }
  /**
   * <pre>
   * If present will save the shipping address inside the memory under the
   * specified name. If empty we won't ask for the shipping address. Data saved
   * under this name can be reused by UseAddressAction.
   * </pre>
   *
   * <code>optional string shipping_address_name = 3;</code>
   */
  private void clearShippingAddressName() {
    bitField0_ = (bitField0_ & ~0x00000004);
    shippingAddressName_ = getDefaultInstance().getShippingAddressName();
  }
  /**
   * <pre>
   * If present will save the shipping address inside the memory under the
   * specified name. If empty we won't ask for the shipping address. Data saved
   * under this name can be reused by UseAddressAction.
   * </pre>
   *
   * <code>optional string shipping_address_name = 3;</code>
   */
  private void setShippingAddressNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    shippingAddressName_ = value.toStringUtf8();
  }

  public static final int REQUEST_PAYMENT_METHOD_FIELD_NUMBER = 4;
  private boolean requestPaymentMethod_;
  /**
   * <pre>
   * When 'true' will ask for the credit card.
   * </pre>
   *
   * <code>optional bool request_payment_method = 4;</code>
   */
  public boolean hasRequestPaymentMethod() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * When 'true' will ask for the credit card.
   * </pre>
   *
   * <code>optional bool request_payment_method = 4;</code>
   */
  public boolean getRequestPaymentMethod() {
    return requestPaymentMethod_;
  }
  /**
   * <pre>
   * When 'true' will ask for the credit card.
   * </pre>
   *
   * <code>optional bool request_payment_method = 4;</code>
   */
  private void setRequestPaymentMethod(boolean value) {
    bitField0_ |= 0x00000008;
    requestPaymentMethod_ = value;
  }
  /**
   * <pre>
   * When 'true' will ask for the credit card.
   * </pre>
   *
   * <code>optional bool request_payment_method = 4;</code>
   */
  private void clearRequestPaymentMethod() {
    bitField0_ = (bitField0_ & ~0x00000008);
    requestPaymentMethod_ = false;
  }

  public static final int SUPPORTED_BASIC_CARD_NETWORKS_FIELD_NUMBER = 6;
  private com.google.protobuf.Internal.ProtobufList<String> supportedBasicCardNetworks_;
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  public java.util.List<String> getSupportedBasicCardNetworksList() {
    return supportedBasicCardNetworks_;
  }
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  public int getSupportedBasicCardNetworksCount() {
    return supportedBasicCardNetworks_.size();
  }
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  public java.lang.String getSupportedBasicCardNetworks(int index) {
    return supportedBasicCardNetworks_.get(index);
  }
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  public com.google.protobuf.ByteString
      getSupportedBasicCardNetworksBytes(int index) {
    return com.google.protobuf.ByteString.copyFromUtf8(
        supportedBasicCardNetworks_.get(index));
  }
  private void ensureSupportedBasicCardNetworksIsMutable() {
    if (!supportedBasicCardNetworks_.isModifiable()) {
      supportedBasicCardNetworks_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(supportedBasicCardNetworks_);
     }
  }
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  private void setSupportedBasicCardNetworks(
      int index, java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureSupportedBasicCardNetworksIsMutable();
    supportedBasicCardNetworks_.set(index, value);
  }
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  private void addSupportedBasicCardNetworks(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureSupportedBasicCardNetworksIsMutable();
    supportedBasicCardNetworks_.add(value);
  }
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  private void addAllSupportedBasicCardNetworks(
      java.lang.Iterable<java.lang.String> values) {
    ensureSupportedBasicCardNetworksIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, supportedBasicCardNetworks_);
  }
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  private void clearSupportedBasicCardNetworks() {
    supportedBasicCardNetworks_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  /**
   * <pre>
   * If non-empty, the UI will filter the available basic-card networks
   * accordingly (e.g., only `visa' and `mastercard').
   * </pre>
   *
   * <code>repeated string supported_basic_card_networks = 6;</code>
   */
  private void addSupportedBasicCardNetworksBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  ensureSupportedBasicCardNetworksIsMutable();
    supportedBasicCardNetworks_.add(value.toStringUtf8());
  }

  public static final int CONTACT_DETAILS_FIELD_NUMBER = 5;
  private org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto contactDetails_;
  /**
   * <pre>
   * Contact details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
   */
  public boolean hasContactDetails() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * Contact details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto getContactDetails() {
    return contactDetails_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto.getDefaultInstance() : contactDetails_;
  }
  /**
   * <pre>
   * Contact details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
   */
  private void setContactDetails(org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    contactDetails_ = value;
    bitField0_ |= 0x00000010;
    }
  /**
   * <pre>
   * Contact details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
   */
  private void setContactDetails(
      org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto.Builder builderForValue) {
    contactDetails_ = builderForValue.build();
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * Contact details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
   */
  private void mergeContactDetails(org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto value) {
    if (contactDetails_ != null &&
        contactDetails_ != org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto.getDefaultInstance()) {
      contactDetails_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto.newBuilder(contactDetails_).mergeFrom(value).buildPartial();
    } else {
      contactDetails_ = value;
    }
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * Contact details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
   */
  private void clearContactDetails() {  contactDetails_ = null;
    bitField0_ = (bitField0_ & ~0x00000010);
  }

  public static final int CONFIRM_BUTTON_TEXT_FIELD_NUMBER = 7;
  private java.lang.String confirmButtonText_;
  /**
   * <pre>
   * Override for the text of the confirm button.
   * </pre>
   *
   * <code>optional string confirm_button_text = 7;</code>
   */
  public boolean hasConfirmButtonText() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * Override for the text of the confirm button.
   * </pre>
   *
   * <code>optional string confirm_button_text = 7;</code>
   */
  public java.lang.String getConfirmButtonText() {
    return confirmButtonText_;
  }
  /**
   * <pre>
   * Override for the text of the confirm button.
   * </pre>
   *
   * <code>optional string confirm_button_text = 7;</code>
   */
  public com.google.protobuf.ByteString
      getConfirmButtonTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(confirmButtonText_);
  }
  /**
   * <pre>
   * Override for the text of the confirm button.
   * </pre>
   *
   * <code>optional string confirm_button_text = 7;</code>
   */
  private void setConfirmButtonText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    confirmButtonText_ = value;
  }
  /**
   * <pre>
   * Override for the text of the confirm button.
   * </pre>
   *
   * <code>optional string confirm_button_text = 7;</code>
   */
  private void clearConfirmButtonText() {
    bitField0_ = (bitField0_ & ~0x00000020);
    confirmButtonText_ = getDefaultInstance().getConfirmButtonText();
  }
  /**
   * <pre>
   * Override for the text of the confirm button.
   * </pre>
   *
   * <code>optional string confirm_button_text = 7;</code>
   */
  private void setConfirmButtonTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    confirmButtonText_ = value.toStringUtf8();
  }

  public static final int TERMS_AND_CONDITIONS_STATE_FIELD_NUMBER = 8;
  private int termsAndConditionsState_;
  /**
   * <pre>
   * The initial state of the terms &amp; conditions choice.
   * </pre>
   *
   * <code>optional .autofill_assistant.CollectUserDataProto.TermsAndConditionsState terms_and_conditions_state = 8;</code>
   */
  public boolean hasTermsAndConditionsState() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * The initial state of the terms &amp; conditions choice.
   * </pre>
   *
   * <code>optional .autofill_assistant.CollectUserDataProto.TermsAndConditionsState terms_and_conditions_state = 8;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState getTermsAndConditionsState() {
    org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState result = org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState.forNumber(termsAndConditionsState_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState.NOT_SELECTED : result;
  }
  /**
   * <pre>
   * The initial state of the terms &amp; conditions choice.
   * </pre>
   *
   * <code>optional .autofill_assistant.CollectUserDataProto.TermsAndConditionsState terms_and_conditions_state = 8;</code>
   */
  private void setTermsAndConditionsState(org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000040;
    termsAndConditionsState_ = value.getNumber();
  }
  /**
   * <pre>
   * The initial state of the terms &amp; conditions choice.
   * </pre>
   *
   * <code>optional .autofill_assistant.CollectUserDataProto.TermsAndConditionsState terms_and_conditions_state = 8;</code>
   */
  private void clearTermsAndConditionsState() {
    bitField0_ = (bitField0_ & ~0x00000040);
    termsAndConditionsState_ = 0;
  }

  public static final int REQUEST_TERMS_AND_CONDITIONS_FIELD_NUMBER = 9;
  private boolean requestTermsAndConditions_;
  /**
   * <pre>
   * When 'false', hide the terms and conditions box in the UI.
   * </pre>
   *
   * <code>optional bool request_terms_and_conditions = 9 [default = true];</code>
   */
  public boolean hasRequestTermsAndConditions() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <pre>
   * When 'false', hide the terms and conditions box in the UI.
   * </pre>
   *
   * <code>optional bool request_terms_and_conditions = 9 [default = true];</code>
   */
  public boolean getRequestTermsAndConditions() {
    return requestTermsAndConditions_;
  }
  /**
   * <pre>
   * When 'false', hide the terms and conditions box in the UI.
   * </pre>
   *
   * <code>optional bool request_terms_and_conditions = 9 [default = true];</code>
   */
  private void setRequestTermsAndConditions(boolean value) {
    bitField0_ |= 0x00000080;
    requestTermsAndConditions_ = value;
  }
  /**
   * <pre>
   * When 'false', hide the terms and conditions box in the UI.
   * </pre>
   *
   * <code>optional bool request_terms_and_conditions = 9 [default = true];</code>
   */
  private void clearRequestTermsAndConditions() {
    bitField0_ = (bitField0_ & ~0x00000080);
    requestTermsAndConditions_ = true;
  }

  public static final int SHOW_TERMS_AS_CHECKBOX_FIELD_NUMBER = 12;
  private boolean showTermsAsCheckbox_;
  /**
   * <pre>
   * Whether the terms and conditions should be displayed as a single checkbox
   * with |accept_terms_and_conditions_text| as text. If false, the accept terms
   * will be displayed as a radio button next to an additional "Read and agree
   * later on domain.com" choice.
   * </pre>
   *
   * <code>optional bool show_terms_as_checkbox = 12;</code>
   */
  public boolean hasShowTermsAsCheckbox() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <pre>
   * Whether the terms and conditions should be displayed as a single checkbox
   * with |accept_terms_and_conditions_text| as text. If false, the accept terms
   * will be displayed as a radio button next to an additional "Read and agree
   * later on domain.com" choice.
   * </pre>
   *
   * <code>optional bool show_terms_as_checkbox = 12;</code>
   */
  public boolean getShowTermsAsCheckbox() {
    return showTermsAsCheckbox_;
  }
  /**
   * <pre>
   * Whether the terms and conditions should be displayed as a single checkbox
   * with |accept_terms_and_conditions_text| as text. If false, the accept terms
   * will be displayed as a radio button next to an additional "Read and agree
   * later on domain.com" choice.
   * </pre>
   *
   * <code>optional bool show_terms_as_checkbox = 12;</code>
   */
  private void setShowTermsAsCheckbox(boolean value) {
    bitField0_ |= 0x00000100;
    showTermsAsCheckbox_ = value;
  }
  /**
   * <pre>
   * Whether the terms and conditions should be displayed as a single checkbox
   * with |accept_terms_and_conditions_text| as text. If false, the accept terms
   * will be displayed as a radio button next to an additional "Read and agree
   * later on domain.com" choice.
   * </pre>
   *
   * <code>optional bool show_terms_as_checkbox = 12;</code>
   */
  private void clearShowTermsAsCheckbox() {
    bitField0_ = (bitField0_ & ~0x00000100);
    showTermsAsCheckbox_ = false;
  }

  public static final int ACCEPT_TERMS_AND_CONDITIONS_TEXT_FIELD_NUMBER = 13;
  private java.lang.String acceptTermsAndConditionsText_;
  /**
   * <pre>
   * The text for the terms and conditions "I accept..." choice. The text is
   * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
   * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
   * that will finish this action and return the clicked link in the action
   * result.
   * </pre>
   *
   * <code>optional string accept_terms_and_conditions_text = 13;</code>
   */
  public boolean hasAcceptTermsAndConditionsText() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <pre>
   * The text for the terms and conditions "I accept..." choice. The text is
   * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
   * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
   * that will finish this action and return the clicked link in the action
   * result.
   * </pre>
   *
   * <code>optional string accept_terms_and_conditions_text = 13;</code>
   */
  public java.lang.String getAcceptTermsAndConditionsText() {
    return acceptTermsAndConditionsText_;
  }
  /**
   * <pre>
   * The text for the terms and conditions "I accept..." choice. The text is
   * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
   * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
   * that will finish this action and return the clicked link in the action
   * result.
   * </pre>
   *
   * <code>optional string accept_terms_and_conditions_text = 13;</code>
   */
  public com.google.protobuf.ByteString
      getAcceptTermsAndConditionsTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(acceptTermsAndConditionsText_);
  }
  /**
   * <pre>
   * The text for the terms and conditions "I accept..." choice. The text is
   * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
   * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
   * that will finish this action and return the clicked link in the action
   * result.
   * </pre>
   *
   * <code>optional string accept_terms_and_conditions_text = 13;</code>
   */
  private void setAcceptTermsAndConditionsText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
    acceptTermsAndConditionsText_ = value;
  }
  /**
   * <pre>
   * The text for the terms and conditions "I accept..." choice. The text is
   * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
   * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
   * that will finish this action and return the clicked link in the action
   * result.
   * </pre>
   *
   * <code>optional string accept_terms_and_conditions_text = 13;</code>
   */
  private void clearAcceptTermsAndConditionsText() {
    bitField0_ = (bitField0_ & ~0x00000200);
    acceptTermsAndConditionsText_ = getDefaultInstance().getAcceptTermsAndConditionsText();
  }
  /**
   * <pre>
   * The text for the terms and conditions "I accept..." choice. The text is
   * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
   * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
   * that will finish this action and return the clicked link in the action
   * result.
   * </pre>
   *
   * <code>optional string accept_terms_and_conditions_text = 13;</code>
   */
  private void setAcceptTermsAndConditionsTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
    acceptTermsAndConditionsText_ = value.toStringUtf8();
  }

  public static final int TERMS_REQUIRE_REVIEW_TEXT_FIELD_NUMBER = 20;
  private java.lang.String termsRequireReviewText_;
  /**
   * <pre>
   * Message that indicates that the user wants to review the terms and
   * conditions of a 3rd party's domain, e.g., 'example.com'.
   * </pre>
   *
   * <code>optional string terms_require_review_text = 20;</code>
   */
  public boolean hasTermsRequireReviewText() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <pre>
   * Message that indicates that the user wants to review the terms and
   * conditions of a 3rd party's domain, e.g., 'example.com'.
   * </pre>
   *
   * <code>optional string terms_require_review_text = 20;</code>
   */
  public java.lang.String getTermsRequireReviewText() {
    return termsRequireReviewText_;
  }
  /**
   * <pre>
   * Message that indicates that the user wants to review the terms and
   * conditions of a 3rd party's domain, e.g., 'example.com'.
   * </pre>
   *
   * <code>optional string terms_require_review_text = 20;</code>
   */
  public com.google.protobuf.ByteString
      getTermsRequireReviewTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(termsRequireReviewText_);
  }
  /**
   * <pre>
   * Message that indicates that the user wants to review the terms and
   * conditions of a 3rd party's domain, e.g., 'example.com'.
   * </pre>
   *
   * <code>optional string terms_require_review_text = 20;</code>
   */
  private void setTermsRequireReviewText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
    termsRequireReviewText_ = value;
  }
  /**
   * <pre>
   * Message that indicates that the user wants to review the terms and
   * conditions of a 3rd party's domain, e.g., 'example.com'.
   * </pre>
   *
   * <code>optional string terms_require_review_text = 20;</code>
   */
  private void clearTermsRequireReviewText() {
    bitField0_ = (bitField0_ & ~0x00000400);
    termsRequireReviewText_ = getDefaultInstance().getTermsRequireReviewText();
  }
  /**
   * <pre>
   * Message that indicates that the user wants to review the terms and
   * conditions of a 3rd party's domain, e.g., 'example.com'.
   * </pre>
   *
   * <code>optional string terms_require_review_text = 20;</code>
   */
  private void setTermsRequireReviewTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
    termsRequireReviewText_ = value.toStringUtf8();
  }

  public static final int PRIVACY_NOTICE_TEXT_FIELD_NUMBER = 21;
  private java.lang.String privacyNoticeText_;
  /**
   * <pre>
   * Privacy notice telling users that autofill assistant will send personal
   * data to a third party’s website.
   * </pre>
   *
   * <code>optional string privacy_notice_text = 21;</code>
   */
  public boolean hasPrivacyNoticeText() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <pre>
   * Privacy notice telling users that autofill assistant will send personal
   * data to a third party’s website.
   * </pre>
   *
   * <code>optional string privacy_notice_text = 21;</code>
   */
  public java.lang.String getPrivacyNoticeText() {
    return privacyNoticeText_;
  }
  /**
   * <pre>
   * Privacy notice telling users that autofill assistant will send personal
   * data to a third party’s website.
   * </pre>
   *
   * <code>optional string privacy_notice_text = 21;</code>
   */
  public com.google.protobuf.ByteString
      getPrivacyNoticeTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(privacyNoticeText_);
  }
  /**
   * <pre>
   * Privacy notice telling users that autofill assistant will send personal
   * data to a third party’s website.
   * </pre>
   *
   * <code>optional string privacy_notice_text = 21;</code>
   */
  private void setPrivacyNoticeText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    privacyNoticeText_ = value;
  }
  /**
   * <pre>
   * Privacy notice telling users that autofill assistant will send personal
   * data to a third party’s website.
   * </pre>
   *
   * <code>optional string privacy_notice_text = 21;</code>
   */
  private void clearPrivacyNoticeText() {
    bitField0_ = (bitField0_ & ~0x00000800);
    privacyNoticeText_ = getDefaultInstance().getPrivacyNoticeText();
  }
  /**
   * <pre>
   * Privacy notice telling users that autofill assistant will send personal
   * data to a third party’s website.
   * </pre>
   *
   * <code>optional string privacy_notice_text = 21;</code>
   */
  private void setPrivacyNoticeTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
    privacyNoticeText_ = value.toStringUtf8();
  }

  public static final int CONFIRM_DIRECT_ACTION_FIELD_NUMBER = 10;
  private org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto confirmDirectAction_;
  /**
   * <pre>
   * Optionally allows confiriming through the given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
   */
  public boolean hasConfirmDirectAction() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <pre>
   * Optionally allows confiriming through the given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto getConfirmDirectAction() {
    return confirmDirectAction_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.getDefaultInstance() : confirmDirectAction_;
  }
  /**
   * <pre>
   * Optionally allows confiriming through the given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
   */
  private void setConfirmDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    confirmDirectAction_ = value;
    bitField0_ |= 0x00001000;
    }
  /**
   * <pre>
   * Optionally allows confiriming through the given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
   */
  private void setConfirmDirectAction(
      org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.Builder builderForValue) {
    confirmDirectAction_ = builderForValue.build();
    bitField0_ |= 0x00001000;
  }
  /**
   * <pre>
   * Optionally allows confiriming through the given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
   */
  private void mergeConfirmDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
    if (confirmDirectAction_ != null &&
        confirmDirectAction_ != org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.getDefaultInstance()) {
      confirmDirectAction_ =
        org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.newBuilder(confirmDirectAction_).mergeFrom(value).buildPartial();
    } else {
      confirmDirectAction_ = value;
    }
    bitField0_ |= 0x00001000;
  }
  /**
   * <pre>
   * Optionally allows confiriming through the given direct actions.
   * </pre>
   *
   * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
   */
  private void clearConfirmDirectAction() {  confirmDirectAction_ = null;
    bitField0_ = (bitField0_ & ~0x00001000);
  }

  public static final int ADDITIONAL_ACTIONS_FIELD_NUMBER = 11;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto> additionalActions_;
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto> getAdditionalActionsList() {
    return additionalActions_;
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserActionProtoOrBuilder> 
      getAdditionalActionsOrBuilderList() {
    return additionalActions_;
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  public int getAdditionalActionsCount() {
    return additionalActions_.size();
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto getAdditionalActions(int index) {
    return additionalActions_.get(index);
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.UserActionProtoOrBuilder getAdditionalActionsOrBuilder(
      int index) {
    return additionalActions_.get(index);
  }
  private void ensureAdditionalActionsIsMutable() {
    if (!additionalActions_.isModifiable()) {
      additionalActions_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(additionalActions_);
     }
  }

  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void setAdditionalActions(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalActionsIsMutable();
    additionalActions_.set(index, value);
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void setAdditionalActions(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto.Builder builderForValue) {
    ensureAdditionalActionsIsMutable();
    additionalActions_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void addAdditionalActions(org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalActionsIsMutable();
    additionalActions_.add(value);
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void addAdditionalActions(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalActionsIsMutable();
    additionalActions_.add(index, value);
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void addAdditionalActions(
      org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto.Builder builderForValue) {
    ensureAdditionalActionsIsMutable();
    additionalActions_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void addAdditionalActions(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto.Builder builderForValue) {
    ensureAdditionalActionsIsMutable();
    additionalActions_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void addAllAdditionalActions(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto> values) {
    ensureAdditionalActionsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, additionalActions_);
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void clearAdditionalActions() {
    additionalActions_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Additional actions available to the user. This can be used for instance to
   * display a "Show terms" button that will navigate the user to the terms and
   * conditions page when clicked.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
   */
  private void removeAdditionalActions(int index) {
    ensureAdditionalActionsIsMutable();
    additionalActions_.remove(index);
  }

  public static final int REQUIRE_BILLING_POSTAL_CODE_FIELD_NUMBER = 14;
  private boolean requireBillingPostalCode_;
  /**
   * <pre>
   * Optionally requests a payment method with a billing address that has a
   * postcode value.
   * </pre>
   *
   * <code>optional bool require_billing_postal_code = 14;</code>
   */
  public boolean hasRequireBillingPostalCode() {
    return ((bitField0_ & 0x00002000) == 0x00002000);
  }
  /**
   * <pre>
   * Optionally requests a payment method with a billing address that has a
   * postcode value.
   * </pre>
   *
   * <code>optional bool require_billing_postal_code = 14;</code>
   */
  public boolean getRequireBillingPostalCode() {
    return requireBillingPostalCode_;
  }
  /**
   * <pre>
   * Optionally requests a payment method with a billing address that has a
   * postcode value.
   * </pre>
   *
   * <code>optional bool require_billing_postal_code = 14;</code>
   */
  private void setRequireBillingPostalCode(boolean value) {
    bitField0_ |= 0x00002000;
    requireBillingPostalCode_ = value;
  }
  /**
   * <pre>
   * Optionally requests a payment method with a billing address that has a
   * postcode value.
   * </pre>
   *
   * <code>optional bool require_billing_postal_code = 14;</code>
   */
  private void clearRequireBillingPostalCode() {
    bitField0_ = (bitField0_ & ~0x00002000);
    requireBillingPostalCode_ = false;
  }

  public static final int BILLING_POSTAL_CODE_MISSING_TEXT_FIELD_NUMBER = 15;
  private java.lang.String billingPostalCodeMissingText_;
  /**
   * <pre>
   * The error message to display when the billing address is missing the
   * postal code. This field is mandatory if |require_postal_code| is true.
   * </pre>
   *
   * <code>optional string billing_postal_code_missing_text = 15;</code>
   */
  public boolean hasBillingPostalCodeMissingText() {
    return ((bitField0_ & 0x00004000) == 0x00004000);
  }
  /**
   * <pre>
   * The error message to display when the billing address is missing the
   * postal code. This field is mandatory if |require_postal_code| is true.
   * </pre>
   *
   * <code>optional string billing_postal_code_missing_text = 15;</code>
   */
  public java.lang.String getBillingPostalCodeMissingText() {
    return billingPostalCodeMissingText_;
  }
  /**
   * <pre>
   * The error message to display when the billing address is missing the
   * postal code. This field is mandatory if |require_postal_code| is true.
   * </pre>
   *
   * <code>optional string billing_postal_code_missing_text = 15;</code>
   */
  public com.google.protobuf.ByteString
      getBillingPostalCodeMissingTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(billingPostalCodeMissingText_);
  }
  /**
   * <pre>
   * The error message to display when the billing address is missing the
   * postal code. This field is mandatory if |require_postal_code| is true.
   * </pre>
   *
   * <code>optional string billing_postal_code_missing_text = 15;</code>
   */
  private void setBillingPostalCodeMissingText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
    billingPostalCodeMissingText_ = value;
  }
  /**
   * <pre>
   * The error message to display when the billing address is missing the
   * postal code. This field is mandatory if |require_postal_code| is true.
   * </pre>
   *
   * <code>optional string billing_postal_code_missing_text = 15;</code>
   */
  private void clearBillingPostalCodeMissingText() {
    bitField0_ = (bitField0_ & ~0x00004000);
    billingPostalCodeMissingText_ = getDefaultInstance().getBillingPostalCodeMissingText();
  }
  /**
   * <pre>
   * The error message to display when the billing address is missing the
   * postal code. This field is mandatory if |require_postal_code| is true.
   * </pre>
   *
   * <code>optional string billing_postal_code_missing_text = 15;</code>
   */
  private void setBillingPostalCodeMissingTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
    billingPostalCodeMissingText_ = value.toStringUtf8();
  }

  public static final int CREDIT_CARD_EXPIRED_TEXT_FIELD_NUMBER = 23;
  private java.lang.String creditCardExpiredText_;
  /**
   * <pre>
   * The error message to display when the selected credit card is expired.
   * </pre>
   *
   * <code>optional string credit_card_expired_text = 23;</code>
   */
  public boolean hasCreditCardExpiredText() {
    return ((bitField0_ & 0x00008000) == 0x00008000);
  }
  /**
   * <pre>
   * The error message to display when the selected credit card is expired.
   * </pre>
   *
   * <code>optional string credit_card_expired_text = 23;</code>
   */
  public java.lang.String getCreditCardExpiredText() {
    return creditCardExpiredText_;
  }
  /**
   * <pre>
   * The error message to display when the selected credit card is expired.
   * </pre>
   *
   * <code>optional string credit_card_expired_text = 23;</code>
   */
  public com.google.protobuf.ByteString
      getCreditCardExpiredTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(creditCardExpiredText_);
  }
  /**
   * <pre>
   * The error message to display when the selected credit card is expired.
   * </pre>
   *
   * <code>optional string credit_card_expired_text = 23;</code>
   */
  private void setCreditCardExpiredText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
    creditCardExpiredText_ = value;
  }
  /**
   * <pre>
   * The error message to display when the selected credit card is expired.
   * </pre>
   *
   * <code>optional string credit_card_expired_text = 23;</code>
   */
  private void clearCreditCardExpiredText() {
    bitField0_ = (bitField0_ & ~0x00008000);
    creditCardExpiredText_ = getDefaultInstance().getCreditCardExpiredText();
  }
  /**
   * <pre>
   * The error message to display when the selected credit card is expired.
   * </pre>
   *
   * <code>optional string credit_card_expired_text = 23;</code>
   */
  private void setCreditCardExpiredTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
    creditCardExpiredText_ = value.toStringUtf8();
  }

  public static final int LOGIN_DETAILS_FIELD_NUMBER = 16;
  private org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto loginDetails_;
  /**
   * <pre>
   * The login details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
   */
  public boolean hasLoginDetails() {
    return ((bitField0_ & 0x00010000) == 0x00010000);
  }
  /**
   * <pre>
   * The login details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto getLoginDetails() {
    return loginDetails_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto.getDefaultInstance() : loginDetails_;
  }
  /**
   * <pre>
   * The login details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
   */
  private void setLoginDetails(org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    loginDetails_ = value;
    bitField0_ |= 0x00010000;
    }
  /**
   * <pre>
   * The login details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
   */
  private void setLoginDetails(
      org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto.Builder builderForValue) {
    loginDetails_ = builderForValue.build();
    bitField0_ |= 0x00010000;
  }
  /**
   * <pre>
   * The login details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
   */
  private void mergeLoginDetails(org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto value) {
    if (loginDetails_ != null &&
        loginDetails_ != org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto.getDefaultInstance()) {
      loginDetails_ =
        org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto.newBuilder(loginDetails_).mergeFrom(value).buildPartial();
    } else {
      loginDetails_ = value;
    }
    bitField0_ |= 0x00010000;
  }
  /**
   * <pre>
   * The login details that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
   */
  private void clearLoginDetails() {  loginDetails_ = null;
    bitField0_ = (bitField0_ & ~0x00010000);
  }

  public static final int DATE_TIME_RANGE_FIELD_NUMBER = 17;
  private org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto dateTimeRange_;
  /**
   * <pre>
   * The date/time range that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
   */
  public boolean hasDateTimeRange() {
    return ((bitField0_ & 0x00020000) == 0x00020000);
  }
  /**
   * <pre>
   * The date/time range that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto getDateTimeRange() {
    return dateTimeRange_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto.getDefaultInstance() : dateTimeRange_;
  }
  /**
   * <pre>
   * The date/time range that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
   */
  private void setDateTimeRange(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    dateTimeRange_ = value;
    bitField0_ |= 0x00020000;
    }
  /**
   * <pre>
   * The date/time range that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
   */
  private void setDateTimeRange(
      org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto.Builder builderForValue) {
    dateTimeRange_ = builderForValue.build();
    bitField0_ |= 0x00020000;
  }
  /**
   * <pre>
   * The date/time range that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
   */
  private void mergeDateTimeRange(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto value) {
    if (dateTimeRange_ != null &&
        dateTimeRange_ != org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto.getDefaultInstance()) {
      dateTimeRange_ =
        org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto.newBuilder(dateTimeRange_).mergeFrom(value).buildPartial();
    } else {
      dateTimeRange_ = value;
    }
    bitField0_ |= 0x00020000;
  }
  /**
   * <pre>
   * The date/time range that should be gathered.
   * </pre>
   *
   * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
   */
  private void clearDateTimeRange() {  dateTimeRange_ = null;
    bitField0_ = (bitField0_ & ~0x00020000);
  }

  public static final int ADDITIONAL_PREPENDED_SECTIONS_FIELD_NUMBER = 18;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> additionalPrependedSections_;
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> getAdditionalPrependedSectionsList() {
    return additionalPrependedSections_;
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProtoOrBuilder> 
      getAdditionalPrependedSectionsOrBuilderList() {
    return additionalPrependedSections_;
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  public int getAdditionalPrependedSectionsCount() {
    return additionalPrependedSections_.size();
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto getAdditionalPrependedSections(int index) {
    return additionalPrependedSections_.get(index);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProtoOrBuilder getAdditionalPrependedSectionsOrBuilder(
      int index) {
    return additionalPrependedSections_.get(index);
  }
  private void ensureAdditionalPrependedSectionsIsMutable() {
    if (!additionalPrependedSections_.isModifiable()) {
      additionalPrependedSections_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(additionalPrependedSections_);
     }
  }

  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void setAdditionalPrependedSections(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalPrependedSectionsIsMutable();
    additionalPrependedSections_.set(index, value);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void setAdditionalPrependedSections(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
    ensureAdditionalPrependedSectionsIsMutable();
    additionalPrependedSections_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void addAdditionalPrependedSections(org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalPrependedSectionsIsMutable();
    additionalPrependedSections_.add(value);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void addAdditionalPrependedSections(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalPrependedSectionsIsMutable();
    additionalPrependedSections_.add(index, value);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void addAdditionalPrependedSections(
      org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
    ensureAdditionalPrependedSectionsIsMutable();
    additionalPrependedSections_.add(builderForValue.build());
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void addAdditionalPrependedSections(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
    ensureAdditionalPrependedSectionsIsMutable();
    additionalPrependedSections_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void addAllAdditionalPrependedSections(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> values) {
    ensureAdditionalPrependedSectionsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, additionalPrependedSections_);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void clearAdditionalPrependedSections() {
    additionalPrependedSections_ = emptyProtobufList();
  }
  /**
   * <pre>
   * An optional list of additional sections, which is above all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
   */
  private void removeAdditionalPrependedSections(int index) {
    ensureAdditionalPrependedSectionsIsMutable();
    additionalPrependedSections_.remove(index);
  }

  public static final int ADDITIONAL_APPENDED_SECTIONS_FIELD_NUMBER = 19;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> additionalAppendedSections_;
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> getAdditionalAppendedSectionsList() {
    return additionalAppendedSections_;
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProtoOrBuilder> 
      getAdditionalAppendedSectionsOrBuilderList() {
    return additionalAppendedSections_;
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  public int getAdditionalAppendedSectionsCount() {
    return additionalAppendedSections_.size();
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto getAdditionalAppendedSections(int index) {
    return additionalAppendedSections_.get(index);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProtoOrBuilder getAdditionalAppendedSectionsOrBuilder(
      int index) {
    return additionalAppendedSections_.get(index);
  }
  private void ensureAdditionalAppendedSectionsIsMutable() {
    if (!additionalAppendedSections_.isModifiable()) {
      additionalAppendedSections_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(additionalAppendedSections_);
     }
  }

  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void setAdditionalAppendedSections(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalAppendedSectionsIsMutable();
    additionalAppendedSections_.set(index, value);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void setAdditionalAppendedSections(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
    ensureAdditionalAppendedSectionsIsMutable();
    additionalAppendedSections_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void addAdditionalAppendedSections(org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalAppendedSectionsIsMutable();
    additionalAppendedSections_.add(value);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void addAdditionalAppendedSections(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureAdditionalAppendedSectionsIsMutable();
    additionalAppendedSections_.add(index, value);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void addAdditionalAppendedSections(
      org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
    ensureAdditionalAppendedSectionsIsMutable();
    additionalAppendedSections_.add(builderForValue.build());
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void addAdditionalAppendedSections(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
    ensureAdditionalAppendedSectionsIsMutable();
    additionalAppendedSections_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void addAllAdditionalAppendedSections(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> values) {
    ensureAdditionalAppendedSectionsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, additionalAppendedSections_);
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void clearAdditionalAppendedSections() {
    additionalAppendedSections_ = emptyProtobufList();
  }
  /**
   * <pre>
   * An optional list of additional sections, which is below all other sections.
   * </pre>
   *
   * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
   */
  private void removeAdditionalAppendedSections(int index) {
    ensureAdditionalAppendedSectionsIsMutable();
    additionalAppendedSections_.remove(index);
  }

  public static final int GENERIC_USER_INTERFACE_FIELD_NUMBER = 22;
  private org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto genericUserInterface_;
  /**
   * <pre>
   * Backend-configured user interface to show.
   * </pre>
   *
   * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
   */
  public boolean hasGenericUserInterface() {
    return ((bitField0_ & 0x00040000) == 0x00040000);
  }
  /**
   * <pre>
   * Backend-configured user interface to show.
   * </pre>
   *
   * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto getGenericUserInterface() {
    return genericUserInterface_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto.getDefaultInstance() : genericUserInterface_;
  }
  /**
   * <pre>
   * Backend-configured user interface to show.
   * </pre>
   *
   * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
   */
  private void setGenericUserInterface(org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    genericUserInterface_ = value;
    bitField0_ |= 0x00040000;
    }
  /**
   * <pre>
   * Backend-configured user interface to show.
   * </pre>
   *
   * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
   */
  private void setGenericUserInterface(
      org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto.Builder builderForValue) {
    genericUserInterface_ = builderForValue.build();
    bitField0_ |= 0x00040000;
  }
  /**
   * <pre>
   * Backend-configured user interface to show.
   * </pre>
   *
   * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
   */
  private void mergeGenericUserInterface(org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto value) {
    if (genericUserInterface_ != null &&
        genericUserInterface_ != org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto.getDefaultInstance()) {
      genericUserInterface_ =
        org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto.newBuilder(genericUserInterface_).mergeFrom(value).buildPartial();
    } else {
      genericUserInterface_ = value;
    }
    bitField0_ |= 0x00040000;
  }
  /**
   * <pre>
   * Backend-configured user interface to show.
   * </pre>
   *
   * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
   */
  private void clearGenericUserInterface() {  genericUserInterface_ = null;
    bitField0_ = (bitField0_ & ~0x00040000);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getPrompt());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeString(2, getBillingAddressName());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeString(3, getShippingAddressName());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeBool(4, requestPaymentMethod_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeMessage(5, getContactDetails());
    }
    for (int i = 0; i < supportedBasicCardNetworks_.size(); i++) {
      output.writeString(6, supportedBasicCardNetworks_.get(i));
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeString(7, getConfirmButtonText());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeEnum(8, termsAndConditionsState_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(9, requestTermsAndConditions_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeMessage(10, getConfirmDirectAction());
    }
    for (int i = 0; i < additionalActions_.size(); i++) {
      output.writeMessage(11, additionalActions_.get(i));
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeBool(12, showTermsAsCheckbox_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeString(13, getAcceptTermsAndConditionsText());
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      output.writeBool(14, requireBillingPostalCode_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      output.writeString(15, getBillingPostalCodeMissingText());
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      output.writeMessage(16, getLoginDetails());
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      output.writeMessage(17, getDateTimeRange());
    }
    for (int i = 0; i < additionalPrependedSections_.size(); i++) {
      output.writeMessage(18, additionalPrependedSections_.get(i));
    }
    for (int i = 0; i < additionalAppendedSections_.size(); i++) {
      output.writeMessage(19, additionalAppendedSections_.get(i));
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeString(20, getTermsRequireReviewText());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeString(21, getPrivacyNoticeText());
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      output.writeMessage(22, getGenericUserInterface());
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      output.writeString(23, getCreditCardExpiredText());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getPrompt());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getBillingAddressName());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getShippingAddressName());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, requestPaymentMethod_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getContactDetails());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < supportedBasicCardNetworks_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeStringSizeNoTag(supportedBasicCardNetworks_.get(i));
      }
      size += dataSize;
      size += 1 * getSupportedBasicCardNetworksList().size();
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(7, getConfirmButtonText());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, termsAndConditionsState_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, requestTermsAndConditions_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getConfirmDirectAction());
    }
    for (int i = 0; i < additionalActions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, additionalActions_.get(i));
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(12, showTermsAsCheckbox_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(13, getAcceptTermsAndConditionsText());
    }
    if (((bitField0_ & 0x00002000) == 0x00002000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(14, requireBillingPostalCode_);
    }
    if (((bitField0_ & 0x00004000) == 0x00004000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(15, getBillingPostalCodeMissingText());
    }
    if (((bitField0_ & 0x00010000) == 0x00010000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, getLoginDetails());
    }
    if (((bitField0_ & 0x00020000) == 0x00020000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, getDateTimeRange());
    }
    for (int i = 0; i < additionalPrependedSections_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, additionalPrependedSections_.get(i));
    }
    for (int i = 0; i < additionalAppendedSections_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, additionalAppendedSections_.get(i));
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(20, getTermsRequireReviewText());
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(21, getPrivacyNoticeText());
    }
    if (((bitField0_ & 0x00040000) == 0x00040000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, getGenericUserInterface());
    }
    if (((bitField0_ & 0x00008000) == 0x00008000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(23, getCreditCardExpiredText());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Asks to provide the data used by UseAddressAction and
   * UseCreditCardAction.
   * Next: 22
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.CollectUserDataProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.CollectUserDataProto)
      org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>optional string prompt = 1;</code>
     */
    public boolean hasPrompt() {
      return instance.hasPrompt();
    }
    /**
     * <code>optional string prompt = 1;</code>
     */
    public java.lang.String getPrompt() {
      return instance.getPrompt();
    }
    /**
     * <code>optional string prompt = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPromptBytes() {
      return instance.getPromptBytes();
    }
    /**
     * <code>optional string prompt = 1;</code>
     */
    public Builder setPrompt(
        java.lang.String value) {
      copyOnWrite();
      instance.setPrompt(value);
      return this;
    }
    /**
     * <code>optional string prompt = 1;</code>
     */
    public Builder clearPrompt() {
      copyOnWrite();
      instance.clearPrompt();
      return this;
    }
    /**
     * <code>optional string prompt = 1;</code>
     */
    public Builder setPromptBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPromptBytes(value);
      return this;
    }

    /**
     * <pre>
     * NOTE: The action does not ask separately for billing address.
     * The billing address is associated with the credit card that was picked.
     * </pre>
     *
     * <code>optional string billing_address_name = 2;</code>
     */
    public boolean hasBillingAddressName() {
      return instance.hasBillingAddressName();
    }
    /**
     * <pre>
     * NOTE: The action does not ask separately for billing address.
     * The billing address is associated with the credit card that was picked.
     * </pre>
     *
     * <code>optional string billing_address_name = 2;</code>
     */
    public java.lang.String getBillingAddressName() {
      return instance.getBillingAddressName();
    }
    /**
     * <pre>
     * NOTE: The action does not ask separately for billing address.
     * The billing address is associated with the credit card that was picked.
     * </pre>
     *
     * <code>optional string billing_address_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBillingAddressNameBytes() {
      return instance.getBillingAddressNameBytes();
    }
    /**
     * <pre>
     * NOTE: The action does not ask separately for billing address.
     * The billing address is associated with the credit card that was picked.
     * </pre>
     *
     * <code>optional string billing_address_name = 2;</code>
     */
    public Builder setBillingAddressName(
        java.lang.String value) {
      copyOnWrite();
      instance.setBillingAddressName(value);
      return this;
    }
    /**
     * <pre>
     * NOTE: The action does not ask separately for billing address.
     * The billing address is associated with the credit card that was picked.
     * </pre>
     *
     * <code>optional string billing_address_name = 2;</code>
     */
    public Builder clearBillingAddressName() {
      copyOnWrite();
      instance.clearBillingAddressName();
      return this;
    }
    /**
     * <pre>
     * NOTE: The action does not ask separately for billing address.
     * The billing address is associated with the credit card that was picked.
     * </pre>
     *
     * <code>optional string billing_address_name = 2;</code>
     */
    public Builder setBillingAddressNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setBillingAddressNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * If present will save the shipping address inside the memory under the
     * specified name. If empty we won't ask for the shipping address. Data saved
     * under this name can be reused by UseAddressAction.
     * </pre>
     *
     * <code>optional string shipping_address_name = 3;</code>
     */
    public boolean hasShippingAddressName() {
      return instance.hasShippingAddressName();
    }
    /**
     * <pre>
     * If present will save the shipping address inside the memory under the
     * specified name. If empty we won't ask for the shipping address. Data saved
     * under this name can be reused by UseAddressAction.
     * </pre>
     *
     * <code>optional string shipping_address_name = 3;</code>
     */
    public java.lang.String getShippingAddressName() {
      return instance.getShippingAddressName();
    }
    /**
     * <pre>
     * If present will save the shipping address inside the memory under the
     * specified name. If empty we won't ask for the shipping address. Data saved
     * under this name can be reused by UseAddressAction.
     * </pre>
     *
     * <code>optional string shipping_address_name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getShippingAddressNameBytes() {
      return instance.getShippingAddressNameBytes();
    }
    /**
     * <pre>
     * If present will save the shipping address inside the memory under the
     * specified name. If empty we won't ask for the shipping address. Data saved
     * under this name can be reused by UseAddressAction.
     * </pre>
     *
     * <code>optional string shipping_address_name = 3;</code>
     */
    public Builder setShippingAddressName(
        java.lang.String value) {
      copyOnWrite();
      instance.setShippingAddressName(value);
      return this;
    }
    /**
     * <pre>
     * If present will save the shipping address inside the memory under the
     * specified name. If empty we won't ask for the shipping address. Data saved
     * under this name can be reused by UseAddressAction.
     * </pre>
     *
     * <code>optional string shipping_address_name = 3;</code>
     */
    public Builder clearShippingAddressName() {
      copyOnWrite();
      instance.clearShippingAddressName();
      return this;
    }
    /**
     * <pre>
     * If present will save the shipping address inside the memory under the
     * specified name. If empty we won't ask for the shipping address. Data saved
     * under this name can be reused by UseAddressAction.
     * </pre>
     *
     * <code>optional string shipping_address_name = 3;</code>
     */
    public Builder setShippingAddressNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setShippingAddressNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * When 'true' will ask for the credit card.
     * </pre>
     *
     * <code>optional bool request_payment_method = 4;</code>
     */
    public boolean hasRequestPaymentMethod() {
      return instance.hasRequestPaymentMethod();
    }
    /**
     * <pre>
     * When 'true' will ask for the credit card.
     * </pre>
     *
     * <code>optional bool request_payment_method = 4;</code>
     */
    public boolean getRequestPaymentMethod() {
      return instance.getRequestPaymentMethod();
    }
    /**
     * <pre>
     * When 'true' will ask for the credit card.
     * </pre>
     *
     * <code>optional bool request_payment_method = 4;</code>
     */
    public Builder setRequestPaymentMethod(boolean value) {
      copyOnWrite();
      instance.setRequestPaymentMethod(value);
      return this;
    }
    /**
     * <pre>
     * When 'true' will ask for the credit card.
     * </pre>
     *
     * <code>optional bool request_payment_method = 4;</code>
     */
    public Builder clearRequestPaymentMethod() {
      copyOnWrite();
      instance.clearRequestPaymentMethod();
      return this;
    }

    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public java.util.List<String>
        getSupportedBasicCardNetworksList() {
      return java.util.Collections.unmodifiableList(
          instance.getSupportedBasicCardNetworksList());
    }
    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public int getSupportedBasicCardNetworksCount() {
      return instance.getSupportedBasicCardNetworksCount();
    }
    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public java.lang.String getSupportedBasicCardNetworks(int index) {
      return instance.getSupportedBasicCardNetworks(index);
    }
    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public com.google.protobuf.ByteString
        getSupportedBasicCardNetworksBytes(int index) {
      return instance.getSupportedBasicCardNetworksBytes(index);
    }
    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public Builder setSupportedBasicCardNetworks(
        int index, java.lang.String value) {
      copyOnWrite();
      instance.setSupportedBasicCardNetworks(index, value);
      return this;
    }
    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public Builder addSupportedBasicCardNetworks(
        java.lang.String value) {
      copyOnWrite();
      instance.addSupportedBasicCardNetworks(value);
      return this;
    }
    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public Builder addAllSupportedBasicCardNetworks(
        java.lang.Iterable<java.lang.String> values) {
      copyOnWrite();
      instance.addAllSupportedBasicCardNetworks(values);
      return this;
    }
    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public Builder clearSupportedBasicCardNetworks() {
      copyOnWrite();
      instance.clearSupportedBasicCardNetworks();
      return this;
    }
    /**
     * <pre>
     * If non-empty, the UI will filter the available basic-card networks
     * accordingly (e.g., only `visa' and `mastercard').
     * </pre>
     *
     * <code>repeated string supported_basic_card_networks = 6;</code>
     */
    public Builder addSupportedBasicCardNetworksBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addSupportedBasicCardNetworksBytes(value);
      return this;
    }

    /**
     * <pre>
     * Contact details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
     */
    public boolean hasContactDetails() {
      return instance.hasContactDetails();
    }
    /**
     * <pre>
     * Contact details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto getContactDetails() {
      return instance.getContactDetails();
    }
    /**
     * <pre>
     * Contact details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
     */
    public Builder setContactDetails(org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto value) {
      copyOnWrite();
      instance.setContactDetails(value);
      return this;
      }
    /**
     * <pre>
     * Contact details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
     */
    public Builder setContactDetails(
        org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto.Builder builderForValue) {
      copyOnWrite();
      instance.setContactDetails(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Contact details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
     */
    public Builder mergeContactDetails(org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto value) {
      copyOnWrite();
      instance.mergeContactDetails(value);
      return this;
    }
    /**
     * <pre>
     * Contact details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.ContactDetailsProto contact_details = 5;</code>
     */
    public Builder clearContactDetails() {  copyOnWrite();
      instance.clearContactDetails();
      return this;
    }

    /**
     * <pre>
     * Override for the text of the confirm button.
     * </pre>
     *
     * <code>optional string confirm_button_text = 7;</code>
     */
    public boolean hasConfirmButtonText() {
      return instance.hasConfirmButtonText();
    }
    /**
     * <pre>
     * Override for the text of the confirm button.
     * </pre>
     *
     * <code>optional string confirm_button_text = 7;</code>
     */
    public java.lang.String getConfirmButtonText() {
      return instance.getConfirmButtonText();
    }
    /**
     * <pre>
     * Override for the text of the confirm button.
     * </pre>
     *
     * <code>optional string confirm_button_text = 7;</code>
     */
    public com.google.protobuf.ByteString
        getConfirmButtonTextBytes() {
      return instance.getConfirmButtonTextBytes();
    }
    /**
     * <pre>
     * Override for the text of the confirm button.
     * </pre>
     *
     * <code>optional string confirm_button_text = 7;</code>
     */
    public Builder setConfirmButtonText(
        java.lang.String value) {
      copyOnWrite();
      instance.setConfirmButtonText(value);
      return this;
    }
    /**
     * <pre>
     * Override for the text of the confirm button.
     * </pre>
     *
     * <code>optional string confirm_button_text = 7;</code>
     */
    public Builder clearConfirmButtonText() {
      copyOnWrite();
      instance.clearConfirmButtonText();
      return this;
    }
    /**
     * <pre>
     * Override for the text of the confirm button.
     * </pre>
     *
     * <code>optional string confirm_button_text = 7;</code>
     */
    public Builder setConfirmButtonTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setConfirmButtonTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * The initial state of the terms &amp; conditions choice.
     * </pre>
     *
     * <code>optional .autofill_assistant.CollectUserDataProto.TermsAndConditionsState terms_and_conditions_state = 8;</code>
     */
    public boolean hasTermsAndConditionsState() {
      return instance.hasTermsAndConditionsState();
    }
    /**
     * <pre>
     * The initial state of the terms &amp; conditions choice.
     * </pre>
     *
     * <code>optional .autofill_assistant.CollectUserDataProto.TermsAndConditionsState terms_and_conditions_state = 8;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState getTermsAndConditionsState() {
      return instance.getTermsAndConditionsState();
    }
    /**
     * <pre>
     * The initial state of the terms &amp; conditions choice.
     * </pre>
     *
     * <code>optional .autofill_assistant.CollectUserDataProto.TermsAndConditionsState terms_and_conditions_state = 8;</code>
     */
    public Builder setTermsAndConditionsState(org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState value) {
      copyOnWrite();
      instance.setTermsAndConditionsState(value);
      return this;
    }
    /**
     * <pre>
     * The initial state of the terms &amp; conditions choice.
     * </pre>
     *
     * <code>optional .autofill_assistant.CollectUserDataProto.TermsAndConditionsState terms_and_conditions_state = 8;</code>
     */
    public Builder clearTermsAndConditionsState() {
      copyOnWrite();
      instance.clearTermsAndConditionsState();
      return this;
    }

    /**
     * <pre>
     * When 'false', hide the terms and conditions box in the UI.
     * </pre>
     *
     * <code>optional bool request_terms_and_conditions = 9 [default = true];</code>
     */
    public boolean hasRequestTermsAndConditions() {
      return instance.hasRequestTermsAndConditions();
    }
    /**
     * <pre>
     * When 'false', hide the terms and conditions box in the UI.
     * </pre>
     *
     * <code>optional bool request_terms_and_conditions = 9 [default = true];</code>
     */
    public boolean getRequestTermsAndConditions() {
      return instance.getRequestTermsAndConditions();
    }
    /**
     * <pre>
     * When 'false', hide the terms and conditions box in the UI.
     * </pre>
     *
     * <code>optional bool request_terms_and_conditions = 9 [default = true];</code>
     */
    public Builder setRequestTermsAndConditions(boolean value) {
      copyOnWrite();
      instance.setRequestTermsAndConditions(value);
      return this;
    }
    /**
     * <pre>
     * When 'false', hide the terms and conditions box in the UI.
     * </pre>
     *
     * <code>optional bool request_terms_and_conditions = 9 [default = true];</code>
     */
    public Builder clearRequestTermsAndConditions() {
      copyOnWrite();
      instance.clearRequestTermsAndConditions();
      return this;
    }

    /**
     * <pre>
     * Whether the terms and conditions should be displayed as a single checkbox
     * with |accept_terms_and_conditions_text| as text. If false, the accept terms
     * will be displayed as a radio button next to an additional "Read and agree
     * later on domain.com" choice.
     * </pre>
     *
     * <code>optional bool show_terms_as_checkbox = 12;</code>
     */
    public boolean hasShowTermsAsCheckbox() {
      return instance.hasShowTermsAsCheckbox();
    }
    /**
     * <pre>
     * Whether the terms and conditions should be displayed as a single checkbox
     * with |accept_terms_and_conditions_text| as text. If false, the accept terms
     * will be displayed as a radio button next to an additional "Read and agree
     * later on domain.com" choice.
     * </pre>
     *
     * <code>optional bool show_terms_as_checkbox = 12;</code>
     */
    public boolean getShowTermsAsCheckbox() {
      return instance.getShowTermsAsCheckbox();
    }
    /**
     * <pre>
     * Whether the terms and conditions should be displayed as a single checkbox
     * with |accept_terms_and_conditions_text| as text. If false, the accept terms
     * will be displayed as a radio button next to an additional "Read and agree
     * later on domain.com" choice.
     * </pre>
     *
     * <code>optional bool show_terms_as_checkbox = 12;</code>
     */
    public Builder setShowTermsAsCheckbox(boolean value) {
      copyOnWrite();
      instance.setShowTermsAsCheckbox(value);
      return this;
    }
    /**
     * <pre>
     * Whether the terms and conditions should be displayed as a single checkbox
     * with |accept_terms_and_conditions_text| as text. If false, the accept terms
     * will be displayed as a radio button next to an additional "Read and agree
     * later on domain.com" choice.
     * </pre>
     *
     * <code>optional bool show_terms_as_checkbox = 12;</code>
     */
    public Builder clearShowTermsAsCheckbox() {
      copyOnWrite();
      instance.clearShowTermsAsCheckbox();
      return this;
    }

    /**
     * <pre>
     * The text for the terms and conditions "I accept..." choice. The text is
     * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
     * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
     * that will finish this action and return the clicked link in the action
     * result.
     * </pre>
     *
     * <code>optional string accept_terms_and_conditions_text = 13;</code>
     */
    public boolean hasAcceptTermsAndConditionsText() {
      return instance.hasAcceptTermsAndConditionsText();
    }
    /**
     * <pre>
     * The text for the terms and conditions "I accept..." choice. The text is
     * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
     * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
     * that will finish this action and return the clicked link in the action
     * result.
     * </pre>
     *
     * <code>optional string accept_terms_and_conditions_text = 13;</code>
     */
    public java.lang.String getAcceptTermsAndConditionsText() {
      return instance.getAcceptTermsAndConditionsText();
    }
    /**
     * <pre>
     * The text for the terms and conditions "I accept..." choice. The text is
     * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
     * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
     * that will finish this action and return the clicked link in the action
     * result.
     * </pre>
     *
     * <code>optional string accept_terms_and_conditions_text = 13;</code>
     */
    public com.google.protobuf.ByteString
        getAcceptTermsAndConditionsTextBytes() {
      return instance.getAcceptTermsAndConditionsTextBytes();
    }
    /**
     * <pre>
     * The text for the terms and conditions "I accept..." choice. The text is
     * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
     * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
     * that will finish this action and return the clicked link in the action
     * result.
     * </pre>
     *
     * <code>optional string accept_terms_and_conditions_text = 13;</code>
     */
    public Builder setAcceptTermsAndConditionsText(
        java.lang.String value) {
      copyOnWrite();
      instance.setAcceptTermsAndConditionsText(value);
      return this;
    }
    /**
     * <pre>
     * The text for the terms and conditions "I accept..." choice. The text is
     * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
     * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
     * that will finish this action and return the clicked link in the action
     * result.
     * </pre>
     *
     * <code>optional string accept_terms_and_conditions_text = 13;</code>
     */
    public Builder clearAcceptTermsAndConditionsText() {
      copyOnWrite();
      instance.clearAcceptTermsAndConditionsText();
      return this;
    }
    /**
     * <pre>
     * The text for the terms and conditions "I accept..." choice. The text is
     * formatted such that '&lt;b&gt;text&lt;/b&gt;' will be bold and '&lt;link0&gt;clickable
     * link&lt;/link0&gt;', '&lt;link1&gt;other link&lt;/link1&gt;', etc will be clickable links
     * that will finish this action and return the clicked link in the action
     * result.
     * </pre>
     *
     * <code>optional string accept_terms_and_conditions_text = 13;</code>
     */
    public Builder setAcceptTermsAndConditionsTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setAcceptTermsAndConditionsTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Message that indicates that the user wants to review the terms and
     * conditions of a 3rd party's domain, e.g., 'example.com'.
     * </pre>
     *
     * <code>optional string terms_require_review_text = 20;</code>
     */
    public boolean hasTermsRequireReviewText() {
      return instance.hasTermsRequireReviewText();
    }
    /**
     * <pre>
     * Message that indicates that the user wants to review the terms and
     * conditions of a 3rd party's domain, e.g., 'example.com'.
     * </pre>
     *
     * <code>optional string terms_require_review_text = 20;</code>
     */
    public java.lang.String getTermsRequireReviewText() {
      return instance.getTermsRequireReviewText();
    }
    /**
     * <pre>
     * Message that indicates that the user wants to review the terms and
     * conditions of a 3rd party's domain, e.g., 'example.com'.
     * </pre>
     *
     * <code>optional string terms_require_review_text = 20;</code>
     */
    public com.google.protobuf.ByteString
        getTermsRequireReviewTextBytes() {
      return instance.getTermsRequireReviewTextBytes();
    }
    /**
     * <pre>
     * Message that indicates that the user wants to review the terms and
     * conditions of a 3rd party's domain, e.g., 'example.com'.
     * </pre>
     *
     * <code>optional string terms_require_review_text = 20;</code>
     */
    public Builder setTermsRequireReviewText(
        java.lang.String value) {
      copyOnWrite();
      instance.setTermsRequireReviewText(value);
      return this;
    }
    /**
     * <pre>
     * Message that indicates that the user wants to review the terms and
     * conditions of a 3rd party's domain, e.g., 'example.com'.
     * </pre>
     *
     * <code>optional string terms_require_review_text = 20;</code>
     */
    public Builder clearTermsRequireReviewText() {
      copyOnWrite();
      instance.clearTermsRequireReviewText();
      return this;
    }
    /**
     * <pre>
     * Message that indicates that the user wants to review the terms and
     * conditions of a 3rd party's domain, e.g., 'example.com'.
     * </pre>
     *
     * <code>optional string terms_require_review_text = 20;</code>
     */
    public Builder setTermsRequireReviewTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTermsRequireReviewTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Privacy notice telling users that autofill assistant will send personal
     * data to a third party’s website.
     * </pre>
     *
     * <code>optional string privacy_notice_text = 21;</code>
     */
    public boolean hasPrivacyNoticeText() {
      return instance.hasPrivacyNoticeText();
    }
    /**
     * <pre>
     * Privacy notice telling users that autofill assistant will send personal
     * data to a third party’s website.
     * </pre>
     *
     * <code>optional string privacy_notice_text = 21;</code>
     */
    public java.lang.String getPrivacyNoticeText() {
      return instance.getPrivacyNoticeText();
    }
    /**
     * <pre>
     * Privacy notice telling users that autofill assistant will send personal
     * data to a third party’s website.
     * </pre>
     *
     * <code>optional string privacy_notice_text = 21;</code>
     */
    public com.google.protobuf.ByteString
        getPrivacyNoticeTextBytes() {
      return instance.getPrivacyNoticeTextBytes();
    }
    /**
     * <pre>
     * Privacy notice telling users that autofill assistant will send personal
     * data to a third party’s website.
     * </pre>
     *
     * <code>optional string privacy_notice_text = 21;</code>
     */
    public Builder setPrivacyNoticeText(
        java.lang.String value) {
      copyOnWrite();
      instance.setPrivacyNoticeText(value);
      return this;
    }
    /**
     * <pre>
     * Privacy notice telling users that autofill assistant will send personal
     * data to a third party’s website.
     * </pre>
     *
     * <code>optional string privacy_notice_text = 21;</code>
     */
    public Builder clearPrivacyNoticeText() {
      copyOnWrite();
      instance.clearPrivacyNoticeText();
      return this;
    }
    /**
     * <pre>
     * Privacy notice telling users that autofill assistant will send personal
     * data to a third party’s website.
     * </pre>
     *
     * <code>optional string privacy_notice_text = 21;</code>
     */
    public Builder setPrivacyNoticeTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPrivacyNoticeTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Optionally allows confiriming through the given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
     */
    public boolean hasConfirmDirectAction() {
      return instance.hasConfirmDirectAction();
    }
    /**
     * <pre>
     * Optionally allows confiriming through the given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto getConfirmDirectAction() {
      return instance.getConfirmDirectAction();
    }
    /**
     * <pre>
     * Optionally allows confiriming through the given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
     */
    public Builder setConfirmDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
      copyOnWrite();
      instance.setConfirmDirectAction(value);
      return this;
      }
    /**
     * <pre>
     * Optionally allows confiriming through the given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
     */
    public Builder setConfirmDirectAction(
        org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setConfirmDirectAction(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Optionally allows confiriming through the given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
     */
    public Builder mergeConfirmDirectAction(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto value) {
      copyOnWrite();
      instance.mergeConfirmDirectAction(value);
      return this;
    }
    /**
     * <pre>
     * Optionally allows confiriming through the given direct actions.
     * </pre>
     *
     * <code>optional .autofill_assistant.DirectActionProto confirm_direct_action = 10;</code>
     */
    public Builder clearConfirmDirectAction() {  copyOnWrite();
      instance.clearConfirmDirectAction();
      return this;
    }

    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto> getAdditionalActionsList() {
      return java.util.Collections.unmodifiableList(
          instance.getAdditionalActionsList());
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public int getAdditionalActionsCount() {
      return instance.getAdditionalActionsCount();
    }/**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto getAdditionalActions(int index) {
      return instance.getAdditionalActions(index);
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder setAdditionalActions(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto value) {
      copyOnWrite();
      instance.setAdditionalActions(index, value);
      return this;
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder setAdditionalActions(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setAdditionalActions(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder addAdditionalActions(org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto value) {
      copyOnWrite();
      instance.addAdditionalActions(value);
      return this;
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder addAdditionalActions(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto value) {
      copyOnWrite();
      instance.addAdditionalActions(index, value);
      return this;
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder addAdditionalActions(
        org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto.Builder builderForValue) {
      copyOnWrite();
      instance.addAdditionalActions(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder addAdditionalActions(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto.Builder builderForValue) {
      copyOnWrite();
      instance.addAdditionalActions(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder addAllAdditionalActions(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto> values) {
      copyOnWrite();
      instance.addAllAdditionalActions(values);
      return this;
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder clearAdditionalActions() {
      copyOnWrite();
      instance.clearAdditionalActions();
      return this;
    }
    /**
     * <pre>
     * Additional actions available to the user. This can be used for instance to
     * display a "Show terms" button that will navigate the user to the terms and
     * conditions page when clicked.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserActionProto additional_actions = 11;</code>
     */
    public Builder removeAdditionalActions(int index) {
      copyOnWrite();
      instance.removeAdditionalActions(index);
      return this;
    }

    /**
     * <pre>
     * Optionally requests a payment method with a billing address that has a
     * postcode value.
     * </pre>
     *
     * <code>optional bool require_billing_postal_code = 14;</code>
     */
    public boolean hasRequireBillingPostalCode() {
      return instance.hasRequireBillingPostalCode();
    }
    /**
     * <pre>
     * Optionally requests a payment method with a billing address that has a
     * postcode value.
     * </pre>
     *
     * <code>optional bool require_billing_postal_code = 14;</code>
     */
    public boolean getRequireBillingPostalCode() {
      return instance.getRequireBillingPostalCode();
    }
    /**
     * <pre>
     * Optionally requests a payment method with a billing address that has a
     * postcode value.
     * </pre>
     *
     * <code>optional bool require_billing_postal_code = 14;</code>
     */
    public Builder setRequireBillingPostalCode(boolean value) {
      copyOnWrite();
      instance.setRequireBillingPostalCode(value);
      return this;
    }
    /**
     * <pre>
     * Optionally requests a payment method with a billing address that has a
     * postcode value.
     * </pre>
     *
     * <code>optional bool require_billing_postal_code = 14;</code>
     */
    public Builder clearRequireBillingPostalCode() {
      copyOnWrite();
      instance.clearRequireBillingPostalCode();
      return this;
    }

    /**
     * <pre>
     * The error message to display when the billing address is missing the
     * postal code. This field is mandatory if |require_postal_code| is true.
     * </pre>
     *
     * <code>optional string billing_postal_code_missing_text = 15;</code>
     */
    public boolean hasBillingPostalCodeMissingText() {
      return instance.hasBillingPostalCodeMissingText();
    }
    /**
     * <pre>
     * The error message to display when the billing address is missing the
     * postal code. This field is mandatory if |require_postal_code| is true.
     * </pre>
     *
     * <code>optional string billing_postal_code_missing_text = 15;</code>
     */
    public java.lang.String getBillingPostalCodeMissingText() {
      return instance.getBillingPostalCodeMissingText();
    }
    /**
     * <pre>
     * The error message to display when the billing address is missing the
     * postal code. This field is mandatory if |require_postal_code| is true.
     * </pre>
     *
     * <code>optional string billing_postal_code_missing_text = 15;</code>
     */
    public com.google.protobuf.ByteString
        getBillingPostalCodeMissingTextBytes() {
      return instance.getBillingPostalCodeMissingTextBytes();
    }
    /**
     * <pre>
     * The error message to display when the billing address is missing the
     * postal code. This field is mandatory if |require_postal_code| is true.
     * </pre>
     *
     * <code>optional string billing_postal_code_missing_text = 15;</code>
     */
    public Builder setBillingPostalCodeMissingText(
        java.lang.String value) {
      copyOnWrite();
      instance.setBillingPostalCodeMissingText(value);
      return this;
    }
    /**
     * <pre>
     * The error message to display when the billing address is missing the
     * postal code. This field is mandatory if |require_postal_code| is true.
     * </pre>
     *
     * <code>optional string billing_postal_code_missing_text = 15;</code>
     */
    public Builder clearBillingPostalCodeMissingText() {
      copyOnWrite();
      instance.clearBillingPostalCodeMissingText();
      return this;
    }
    /**
     * <pre>
     * The error message to display when the billing address is missing the
     * postal code. This field is mandatory if |require_postal_code| is true.
     * </pre>
     *
     * <code>optional string billing_postal_code_missing_text = 15;</code>
     */
    public Builder setBillingPostalCodeMissingTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setBillingPostalCodeMissingTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * The error message to display when the selected credit card is expired.
     * </pre>
     *
     * <code>optional string credit_card_expired_text = 23;</code>
     */
    public boolean hasCreditCardExpiredText() {
      return instance.hasCreditCardExpiredText();
    }
    /**
     * <pre>
     * The error message to display when the selected credit card is expired.
     * </pre>
     *
     * <code>optional string credit_card_expired_text = 23;</code>
     */
    public java.lang.String getCreditCardExpiredText() {
      return instance.getCreditCardExpiredText();
    }
    /**
     * <pre>
     * The error message to display when the selected credit card is expired.
     * </pre>
     *
     * <code>optional string credit_card_expired_text = 23;</code>
     */
    public com.google.protobuf.ByteString
        getCreditCardExpiredTextBytes() {
      return instance.getCreditCardExpiredTextBytes();
    }
    /**
     * <pre>
     * The error message to display when the selected credit card is expired.
     * </pre>
     *
     * <code>optional string credit_card_expired_text = 23;</code>
     */
    public Builder setCreditCardExpiredText(
        java.lang.String value) {
      copyOnWrite();
      instance.setCreditCardExpiredText(value);
      return this;
    }
    /**
     * <pre>
     * The error message to display when the selected credit card is expired.
     * </pre>
     *
     * <code>optional string credit_card_expired_text = 23;</code>
     */
    public Builder clearCreditCardExpiredText() {
      copyOnWrite();
      instance.clearCreditCardExpiredText();
      return this;
    }
    /**
     * <pre>
     * The error message to display when the selected credit card is expired.
     * </pre>
     *
     * <code>optional string credit_card_expired_text = 23;</code>
     */
    public Builder setCreditCardExpiredTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCreditCardExpiredTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * The login details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
     */
    public boolean hasLoginDetails() {
      return instance.hasLoginDetails();
    }
    /**
     * <pre>
     * The login details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto getLoginDetails() {
      return instance.getLoginDetails();
    }
    /**
     * <pre>
     * The login details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
     */
    public Builder setLoginDetails(org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto value) {
      copyOnWrite();
      instance.setLoginDetails(value);
      return this;
      }
    /**
     * <pre>
     * The login details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
     */
    public Builder setLoginDetails(
        org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto.Builder builderForValue) {
      copyOnWrite();
      instance.setLoginDetails(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The login details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
     */
    public Builder mergeLoginDetails(org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto value) {
      copyOnWrite();
      instance.mergeLoginDetails(value);
      return this;
    }
    /**
     * <pre>
     * The login details that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.LoginDetailsProto login_details = 16;</code>
     */
    public Builder clearLoginDetails() {  copyOnWrite();
      instance.clearLoginDetails();
      return this;
    }

    /**
     * <pre>
     * The date/time range that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
     */
    public boolean hasDateTimeRange() {
      return instance.hasDateTimeRange();
    }
    /**
     * <pre>
     * The date/time range that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto getDateTimeRange() {
      return instance.getDateTimeRange();
    }
    /**
     * <pre>
     * The date/time range that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
     */
    public Builder setDateTimeRange(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto value) {
      copyOnWrite();
      instance.setDateTimeRange(value);
      return this;
      }
    /**
     * <pre>
     * The date/time range that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
     */
    public Builder setDateTimeRange(
        org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto.Builder builderForValue) {
      copyOnWrite();
      instance.setDateTimeRange(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The date/time range that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
     */
    public Builder mergeDateTimeRange(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto value) {
      copyOnWrite();
      instance.mergeDateTimeRange(value);
      return this;
    }
    /**
     * <pre>
     * The date/time range that should be gathered.
     * </pre>
     *
     * <code>optional .autofill_assistant.DateTimeRangeProto date_time_range = 17;</code>
     */
    public Builder clearDateTimeRange() {  copyOnWrite();
      instance.clearDateTimeRange();
      return this;
    }

    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> getAdditionalPrependedSectionsList() {
      return java.util.Collections.unmodifiableList(
          instance.getAdditionalPrependedSectionsList());
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public int getAdditionalPrependedSectionsCount() {
      return instance.getAdditionalPrependedSectionsCount();
    }/**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto getAdditionalPrependedSections(int index) {
      return instance.getAdditionalPrependedSections(index);
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder setAdditionalPrependedSections(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
      copyOnWrite();
      instance.setAdditionalPrependedSections(index, value);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder setAdditionalPrependedSections(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setAdditionalPrependedSections(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder addAdditionalPrependedSections(org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
      copyOnWrite();
      instance.addAdditionalPrependedSections(value);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder addAdditionalPrependedSections(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
      copyOnWrite();
      instance.addAdditionalPrependedSections(index, value);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder addAdditionalPrependedSections(
        org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
      copyOnWrite();
      instance.addAdditionalPrependedSections(builderForValue);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder addAdditionalPrependedSections(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
      copyOnWrite();
      instance.addAdditionalPrependedSections(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder addAllAdditionalPrependedSections(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> values) {
      copyOnWrite();
      instance.addAllAdditionalPrependedSections(values);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder clearAdditionalPrependedSections() {
      copyOnWrite();
      instance.clearAdditionalPrependedSections();
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is above all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_prepended_sections = 18;</code>
     */
    public Builder removeAdditionalPrependedSections(int index) {
      copyOnWrite();
      instance.removeAdditionalPrependedSections(index);
      return this;
    }

    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> getAdditionalAppendedSectionsList() {
      return java.util.Collections.unmodifiableList(
          instance.getAdditionalAppendedSectionsList());
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public int getAdditionalAppendedSectionsCount() {
      return instance.getAdditionalAppendedSectionsCount();
    }/**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto getAdditionalAppendedSections(int index) {
      return instance.getAdditionalAppendedSections(index);
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder setAdditionalAppendedSections(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
      copyOnWrite();
      instance.setAdditionalAppendedSections(index, value);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder setAdditionalAppendedSections(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setAdditionalAppendedSections(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder addAdditionalAppendedSections(org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
      copyOnWrite();
      instance.addAdditionalAppendedSections(value);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder addAdditionalAppendedSections(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto value) {
      copyOnWrite();
      instance.addAdditionalAppendedSections(index, value);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder addAdditionalAppendedSections(
        org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
      copyOnWrite();
      instance.addAdditionalAppendedSections(builderForValue);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder addAdditionalAppendedSections(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.Builder builderForValue) {
      copyOnWrite();
      instance.addAdditionalAppendedSections(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder addAllAdditionalAppendedSections(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto> values) {
      copyOnWrite();
      instance.addAllAdditionalAppendedSections(values);
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder clearAdditionalAppendedSections() {
      copyOnWrite();
      instance.clearAdditionalAppendedSections();
      return this;
    }
    /**
     * <pre>
     * An optional list of additional sections, which is below all other sections.
     * </pre>
     *
     * <code>repeated .autofill_assistant.UserFormSectionProto additional_appended_sections = 19;</code>
     */
    public Builder removeAdditionalAppendedSections(int index) {
      copyOnWrite();
      instance.removeAdditionalAppendedSections(index);
      return this;
    }

    /**
     * <pre>
     * Backend-configured user interface to show.
     * </pre>
     *
     * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
     */
    public boolean hasGenericUserInterface() {
      return instance.hasGenericUserInterface();
    }
    /**
     * <pre>
     * Backend-configured user interface to show.
     * </pre>
     *
     * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto getGenericUserInterface() {
      return instance.getGenericUserInterface();
    }
    /**
     * <pre>
     * Backend-configured user interface to show.
     * </pre>
     *
     * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
     */
    public Builder setGenericUserInterface(org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto value) {
      copyOnWrite();
      instance.setGenericUserInterface(value);
      return this;
      }
    /**
     * <pre>
     * Backend-configured user interface to show.
     * </pre>
     *
     * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
     */
    public Builder setGenericUserInterface(
        org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto.Builder builderForValue) {
      copyOnWrite();
      instance.setGenericUserInterface(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Backend-configured user interface to show.
     * </pre>
     *
     * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
     */
    public Builder mergeGenericUserInterface(org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto value) {
      copyOnWrite();
      instance.mergeGenericUserInterface(value);
      return this;
    }
    /**
     * <pre>
     * Backend-configured user interface to show.
     * </pre>
     *
     * <code>optional .autofill_assistant.GenericUserInterfaceProto generic_user_interface = 22;</code>
     */
    public Builder clearGenericUserInterface() {  copyOnWrite();
      instance.clearGenericUserInterface();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.CollectUserDataProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        supportedBasicCardNetworks_.makeImmutable();
        additionalActions_.makeImmutable();
        additionalPrependedSections_.makeImmutable();
        additionalAppendedSections_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto other = (org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto) arg1;
        prompt_ = visitor.visitString(
            hasPrompt(), prompt_,
            other.hasPrompt(), other.prompt_);
        billingAddressName_ = visitor.visitString(
            hasBillingAddressName(), billingAddressName_,
            other.hasBillingAddressName(), other.billingAddressName_);
        shippingAddressName_ = visitor.visitString(
            hasShippingAddressName(), shippingAddressName_,
            other.hasShippingAddressName(), other.shippingAddressName_);
        requestPaymentMethod_ = visitor.visitBoolean(
            hasRequestPaymentMethod(), requestPaymentMethod_,
            other.hasRequestPaymentMethod(), other.requestPaymentMethod_);
        supportedBasicCardNetworks_= visitor.visitList(supportedBasicCardNetworks_, other.supportedBasicCardNetworks_);
        contactDetails_ = visitor.visitMessage(contactDetails_, other.contactDetails_);
        confirmButtonText_ = visitor.visitString(
            hasConfirmButtonText(), confirmButtonText_,
            other.hasConfirmButtonText(), other.confirmButtonText_);
        termsAndConditionsState_ = visitor.visitInt(hasTermsAndConditionsState(), termsAndConditionsState_,
            other.hasTermsAndConditionsState(), other.termsAndConditionsState_);
        requestTermsAndConditions_ = visitor.visitBoolean(
            hasRequestTermsAndConditions(), requestTermsAndConditions_,
            other.hasRequestTermsAndConditions(), other.requestTermsAndConditions_);
        showTermsAsCheckbox_ = visitor.visitBoolean(
            hasShowTermsAsCheckbox(), showTermsAsCheckbox_,
            other.hasShowTermsAsCheckbox(), other.showTermsAsCheckbox_);
        acceptTermsAndConditionsText_ = visitor.visitString(
            hasAcceptTermsAndConditionsText(), acceptTermsAndConditionsText_,
            other.hasAcceptTermsAndConditionsText(), other.acceptTermsAndConditionsText_);
        termsRequireReviewText_ = visitor.visitString(
            hasTermsRequireReviewText(), termsRequireReviewText_,
            other.hasTermsRequireReviewText(), other.termsRequireReviewText_);
        privacyNoticeText_ = visitor.visitString(
            hasPrivacyNoticeText(), privacyNoticeText_,
            other.hasPrivacyNoticeText(), other.privacyNoticeText_);
        confirmDirectAction_ = visitor.visitMessage(confirmDirectAction_, other.confirmDirectAction_);
        additionalActions_= visitor.visitList(additionalActions_, other.additionalActions_);
        requireBillingPostalCode_ = visitor.visitBoolean(
            hasRequireBillingPostalCode(), requireBillingPostalCode_,
            other.hasRequireBillingPostalCode(), other.requireBillingPostalCode_);
        billingPostalCodeMissingText_ = visitor.visitString(
            hasBillingPostalCodeMissingText(), billingPostalCodeMissingText_,
            other.hasBillingPostalCodeMissingText(), other.billingPostalCodeMissingText_);
        creditCardExpiredText_ = visitor.visitString(
            hasCreditCardExpiredText(), creditCardExpiredText_,
            other.hasCreditCardExpiredText(), other.creditCardExpiredText_);
        loginDetails_ = visitor.visitMessage(loginDetails_, other.loginDetails_);
        dateTimeRange_ = visitor.visitMessage(dateTimeRange_, other.dateTimeRange_);
        additionalPrependedSections_= visitor.visitList(additionalPrependedSections_, other.additionalPrependedSections_);
        additionalAppendedSections_= visitor.visitList(additionalAppendedSections_, other.additionalAppendedSections_);
        genericUserInterface_ = visitor.visitMessage(genericUserInterface_, other.genericUserInterface_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                prompt_ = s;
                break;
              }
              case 18: {
                String s = input.readString();
                bitField0_ |= 0x00000002;
                billingAddressName_ = s;
                break;
              }
              case 26: {
                String s = input.readString();
                bitField0_ |= 0x00000004;
                shippingAddressName_ = s;
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                requestPaymentMethod_ = input.readBool();
                break;
              }
              case 42: {
                org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = contactDetails_.toBuilder();
                }
                contactDetails_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ContactDetailsProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(contactDetails_);
                  contactDetails_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 50: {
                String s = input.readString();
                if (!supportedBasicCardNetworks_.isModifiable()) {
                  supportedBasicCardNetworks_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(supportedBasicCardNetworks_);
                }
                supportedBasicCardNetworks_.add(s);
                break;
              }
              case 58: {
                String s = input.readString();
                bitField0_ |= 0x00000020;
                confirmButtonText_ = s;
                break;
              }
              case 64: {
                int rawValue = input.readEnum();
                org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState value = org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.TermsAndConditionsState.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(8, rawValue);
                } else {
                  bitField0_ |= 0x00000040;
                  termsAndConditionsState_ = rawValue;
                }
                break;
              }
              case 72: {
                bitField0_ |= 0x00000080;
                requestTermsAndConditions_ = input.readBool();
                break;
              }
              case 82: {
                org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00001000) == 0x00001000)) {
                  subBuilder = confirmDirectAction_.toBuilder();
                }
                confirmDirectAction_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.DirectActionProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(confirmDirectAction_);
                  confirmDirectAction_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00001000;
                break;
              }
              case 90: {
                if (!additionalActions_.isModifiable()) {
                  additionalActions_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(additionalActions_);
                }
                additionalActions_.add(
                    input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.UserActionProto.parser(), extensionRegistry));
                break;
              }
              case 96: {
                bitField0_ |= 0x00000100;
                showTermsAsCheckbox_ = input.readBool();
                break;
              }
              case 106: {
                String s = input.readString();
                bitField0_ |= 0x00000200;
                acceptTermsAndConditionsText_ = s;
                break;
              }
              case 112: {
                bitField0_ |= 0x00002000;
                requireBillingPostalCode_ = input.readBool();
                break;
              }
              case 122: {
                String s = input.readString();
                bitField0_ |= 0x00004000;
                billingPostalCodeMissingText_ = s;
                break;
              }
              case 130: {
                org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00010000) == 0x00010000)) {
                  subBuilder = loginDetails_.toBuilder();
                }
                loginDetails_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.LoginDetailsProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(loginDetails_);
                  loginDetails_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00010000;
                break;
              }
              case 138: {
                org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00020000) == 0x00020000)) {
                  subBuilder = dateTimeRange_.toBuilder();
                }
                dateTimeRange_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.DateTimeRangeProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dateTimeRange_);
                  dateTimeRange_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00020000;
                break;
              }
              case 146: {
                if (!additionalPrependedSections_.isModifiable()) {
                  additionalPrependedSections_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(additionalPrependedSections_);
                }
                additionalPrependedSections_.add(
                    input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.parser(), extensionRegistry));
                break;
              }
              case 154: {
                if (!additionalAppendedSections_.isModifiable()) {
                  additionalAppendedSections_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(additionalAppendedSections_);
                }
                additionalAppendedSections_.add(
                    input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.UserFormSectionProto.parser(), extensionRegistry));
                break;
              }
              case 162: {
                String s = input.readString();
                bitField0_ |= 0x00000400;
                termsRequireReviewText_ = s;
                break;
              }
              case 170: {
                String s = input.readString();
                bitField0_ |= 0x00000800;
                privacyNoticeText_ = s;
                break;
              }
              case 178: {
                org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00040000) == 0x00040000)) {
                  subBuilder = genericUserInterface_.toBuilder();
                }
                genericUserInterface_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.GenericUserInterfaceProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(genericUserInterface_);
                  genericUserInterface_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00040000;
                break;
              }
              case 186: {
                String s = input.readString();
                bitField0_ |= 0x00008000;
                creditCardExpiredText_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.CollectUserDataProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new CollectUserDataProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.CollectUserDataProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<CollectUserDataProto> PARSER;

  public static com.google.protobuf.Parser<CollectUserDataProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

