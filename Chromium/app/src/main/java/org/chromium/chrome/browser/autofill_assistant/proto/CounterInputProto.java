// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * An input that is made of one or more counters. This input is considered valid
 * if its |validation_rule| is satisfied or if it doesn't have one.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.CounterInputProto}
 */
public  final class CounterInputProto extends
    com.google.protobuf.GeneratedMessageLite<
        CounterInputProto, CounterInputProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.CounterInputProto)
    CounterInputProtoOrBuilder {
  private CounterInputProto() {
    label_ = "";
    counters_ = emptyProtobufList();
    minimizedCount_ = 2147483647;
    expandText_ = "";
    minimizeText_ = "";
    minCountersSum_ = -9223372036854775808L;
    maxCountersSum_ = 9223372036854775807L;
  }
  public interface CounterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.CounterInputProto.Counter)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    boolean hasLabel();
    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    java.lang.String getLabel();
    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    com.google.protobuf.ByteString
        getLabelBytes();

    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    boolean hasDescriptionLine1();
    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    java.lang.String getDescriptionLine1();
    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    com.google.protobuf.ByteString
        getDescriptionLine1Bytes();

    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    boolean hasDescriptionLine2();
    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    java.lang.String getDescriptionLine2();
    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    com.google.protobuf.ByteString
        getDescriptionLine2Bytes();

    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    java.util.List<java.lang.Integer> getAllowedValuesList();
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    int getAllowedValuesCount();
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    int getAllowedValues(int index);

    /**
     * <pre>
     * The minimum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 min_value = 2 [default = -2147483648];</code>
     */
    boolean hasMinValue();
    /**
     * <pre>
     * The minimum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 min_value = 2 [default = -2147483648];</code>
     */
    int getMinValue();

    /**
     * <pre>
     * The maximum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 max_value = 3 [default = 2147483647];</code>
     */
    boolean hasMaxValue();
    /**
     * <pre>
     * The maximum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 max_value = 3 [default = 2147483647];</code>
     */
    int getMaxValue();

    /**
     * <pre>
     * The initial value of the counter. If |allowed_values| is not empty, it
     * must contain |initial_value| or it will otherwise default to the first
     * value.
     * </pre>
     *
     * <code>optional int32 initial_value = 4 [default = 0];</code>
     */
    boolean hasInitialValue();
    /**
     * <pre>
     * The initial value of the counter. If |allowed_values| is not empty, it
     * must contain |initial_value| or it will otherwise default to the first
     * value.
     * </pre>
     *
     * <code>optional int32 initial_value = 4 [default = 0];</code>
     */
    int getInitialValue();
  }
  /**
   * <pre>
   * A single counter.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.CounterInputProto.Counter}
   */
  public  static final class Counter extends
      com.google.protobuf.GeneratedMessageLite<
          Counter, Counter.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.CounterInputProto.Counter)
      CounterOrBuilder {
    private Counter() {
      label_ = "";
      descriptionLine1_ = "";
      descriptionLine2_ = "";
      allowedValues_ = emptyIntList();
      minValue_ = -2147483648;
      maxValue_ = 2147483647;
    }
    private int bitField0_;
    public static final int LABEL_FIELD_NUMBER = 1;
    private java.lang.String label_;
    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public java.lang.String getLabel() {
      return label_;
    }
    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(label_);
    }
    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    private void setLabel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      label_ = value;
    }
    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    private void clearLabel() {
      bitField0_ = (bitField0_ & ~0x00000001);
      label_ = getDefaultInstance().getLabel();
    }
    /**
     * <pre>
     * The label shown with the counter. All occurrences of the '{value}'
     * substring will be replaced by the current counter value. May contain
     * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    private void setLabelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
      label_ = value.toStringUtf8();
    }

    public static final int DESCRIPTION_LINE_1_FIELD_NUMBER = 5;
    private java.lang.String descriptionLine1_;
    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    public boolean hasDescriptionLine1() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    public java.lang.String getDescriptionLine1() {
      return descriptionLine1_;
    }
    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionLine1Bytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(descriptionLine1_);
    }
    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    private void setDescriptionLine1(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      descriptionLine1_ = value;
    }
    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    private void clearDescriptionLine1() {
      bitField0_ = (bitField0_ & ~0x00000002);
      descriptionLine1_ = getDefaultInstance().getDescriptionLine1();
    }
    /**
     * <pre>
     * Text shown below the label. Optional. May contain links of the form
     * &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_1 = 5;</code>
     */
    private void setDescriptionLine1Bytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      descriptionLine1_ = value.toStringUtf8();
    }

    public static final int DESCRIPTION_LINE_2_FIELD_NUMBER = 8;
    private java.lang.String descriptionLine2_;
    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    public boolean hasDescriptionLine2() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    public java.lang.String getDescriptionLine2() {
      return descriptionLine2_;
    }
    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionLine2Bytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(descriptionLine2_);
    }
    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    private void setDescriptionLine2(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      descriptionLine2_ = value;
    }
    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    private void clearDescriptionLine2() {
      bitField0_ = (bitField0_ & ~0x00000004);
      descriptionLine2_ = getDefaultInstance().getDescriptionLine2();
    }
    /**
     * <pre>
     * Text shown below |description_line_2|. Optional. May contain links of the
     * form &lt;link1&gt;Some text&lt;/link1&gt;.
     * </pre>
     *
     * <code>optional string description_line_2 = 8;</code>
     */
    private void setDescriptionLine2Bytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      descriptionLine2_ = value.toStringUtf8();
    }

    public static final int ALLOWED_VALUES_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.IntList allowedValues_;
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getAllowedValuesList() {
      return allowedValues_;
    }
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    public int getAllowedValuesCount() {
      return allowedValues_.size();
    }
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    public int getAllowedValues(int index) {
      return allowedValues_.getInt(index);
    }
    private void ensureAllowedValuesIsMutable() {
      if (!allowedValues_.isModifiable()) {
        allowedValues_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(allowedValues_);
       }
    }
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    private void setAllowedValues(
        int index, int value) {
      ensureAllowedValuesIsMutable();
      allowedValues_.setInt(index, value);
    }
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    private void addAllowedValues(int value) {
      ensureAllowedValuesIsMutable();
      allowedValues_.addInt(value);
    }
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    private void addAllAllowedValues(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureAllowedValuesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, allowedValues_);
    }
    /**
     * <pre>
     * The possible values this counter can have. If empty, the possible values
     * will be all integer values between |min_value| and |max_value|.
     * Note that the order of the values matters and they will not be
     * automatically sorted.
     * </pre>
     *
     * <code>repeated int32 allowed_values = 6;</code>
     */
    private void clearAllowedValues() {
      allowedValues_ = emptyIntList();
    }

    public static final int MIN_VALUE_FIELD_NUMBER = 2;
    private int minValue_;
    /**
     * <pre>
     * The minimum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 min_value = 2 [default = -2147483648];</code>
     */
    public boolean hasMinValue() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The minimum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 min_value = 2 [default = -2147483648];</code>
     */
    public int getMinValue() {
      return minValue_;
    }
    /**
     * <pre>
     * The minimum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 min_value = 2 [default = -2147483648];</code>
     */
    private void setMinValue(int value) {
      bitField0_ |= 0x00000008;
      minValue_ = value;
    }
    /**
     * <pre>
     * The minimum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 min_value = 2 [default = -2147483648];</code>
     */
    private void clearMinValue() {
      bitField0_ = (bitField0_ & ~0x00000008);
      minValue_ = -2147483648;
    }

    public static final int MAX_VALUE_FIELD_NUMBER = 3;
    private int maxValue_;
    /**
     * <pre>
     * The maximum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 max_value = 3 [default = 2147483647];</code>
     */
    public boolean hasMaxValue() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * The maximum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 max_value = 3 [default = 2147483647];</code>
     */
    public int getMaxValue() {
      return maxValue_;
    }
    /**
     * <pre>
     * The maximum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 max_value = 3 [default = 2147483647];</code>
     */
    private void setMaxValue(int value) {
      bitField0_ |= 0x00000010;
      maxValue_ = value;
    }
    /**
     * <pre>
     * The maximum value this counter can have. Ignored if |allowed_values| is
     * not empty.
     * </pre>
     *
     * <code>optional int32 max_value = 3 [default = 2147483647];</code>
     */
    private void clearMaxValue() {
      bitField0_ = (bitField0_ & ~0x00000010);
      maxValue_ = 2147483647;
    }

    public static final int INITIAL_VALUE_FIELD_NUMBER = 4;
    private int initialValue_;
    /**
     * <pre>
     * The initial value of the counter. If |allowed_values| is not empty, it
     * must contain |initial_value| or it will otherwise default to the first
     * value.
     * </pre>
     *
     * <code>optional int32 initial_value = 4 [default = 0];</code>
     */
    public boolean hasInitialValue() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * The initial value of the counter. If |allowed_values| is not empty, it
     * must contain |initial_value| or it will otherwise default to the first
     * value.
     * </pre>
     *
     * <code>optional int32 initial_value = 4 [default = 0];</code>
     */
    public int getInitialValue() {
      return initialValue_;
    }
    /**
     * <pre>
     * The initial value of the counter. If |allowed_values| is not empty, it
     * must contain |initial_value| or it will otherwise default to the first
     * value.
     * </pre>
     *
     * <code>optional int32 initial_value = 4 [default = 0];</code>
     */
    private void setInitialValue(int value) {
      bitField0_ |= 0x00000020;
      initialValue_ = value;
    }
    /**
     * <pre>
     * The initial value of the counter. If |allowed_values| is not empty, it
     * must contain |initial_value| or it will otherwise default to the first
     * value.
     * </pre>
     *
     * <code>optional int32 initial_value = 4 [default = 0];</code>
     */
    private void clearInitialValue() {
      bitField0_ = (bitField0_ & ~0x00000020);
      initialValue_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeString(1, getLabel());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(2, minValue_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(3, maxValue_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(4, initialValue_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeString(5, getDescriptionLine1());
      }
      for (int i = 0; i < allowedValues_.size(); i++) {
        output.writeInt32(6, allowedValues_.getInt(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeString(8, getDescriptionLine2());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getLabel());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, minValue_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, maxValue_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, initialValue_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getDescriptionLine1());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < allowedValues_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(allowedValues_.getInt(i));
        }
        size += dataSize;
        size += 1 * getAllowedValuesList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getDescriptionLine2());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A single counter.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.CounterInputProto.Counter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.CounterInputProto.Counter)
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.CounterOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The label shown with the counter. All occurrences of the '{value}'
       * substring will be replaced by the current counter value. May contain
       * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public boolean hasLabel() {
        return instance.hasLabel();
      }
      /**
       * <pre>
       * The label shown with the counter. All occurrences of the '{value}'
       * substring will be replaced by the current counter value. May contain
       * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public java.lang.String getLabel() {
        return instance.getLabel();
      }
      /**
       * <pre>
       * The label shown with the counter. All occurrences of the '{value}'
       * substring will be replaced by the current counter value. May contain
       * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLabelBytes() {
        return instance.getLabelBytes();
      }
      /**
       * <pre>
       * The label shown with the counter. All occurrences of the '{value}'
       * substring will be replaced by the current counter value. May contain
       * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public Builder setLabel(
          java.lang.String value) {
        copyOnWrite();
        instance.setLabel(value);
        return this;
      }
      /**
       * <pre>
       * The label shown with the counter. All occurrences of the '{value}'
       * substring will be replaced by the current counter value. May contain
       * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public Builder clearLabel() {
        copyOnWrite();
        instance.clearLabel();
        return this;
      }
      /**
       * <pre>
       * The label shown with the counter. All occurrences of the '{value}'
       * substring will be replaced by the current counter value. May contain
       * links of the form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public Builder setLabelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setLabelBytes(value);
        return this;
      }

      /**
       * <pre>
       * Text shown below the label. Optional. May contain links of the form
       * &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_1 = 5;</code>
       */
      public boolean hasDescriptionLine1() {
        return instance.hasDescriptionLine1();
      }
      /**
       * <pre>
       * Text shown below the label. Optional. May contain links of the form
       * &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_1 = 5;</code>
       */
      public java.lang.String getDescriptionLine1() {
        return instance.getDescriptionLine1();
      }
      /**
       * <pre>
       * Text shown below the label. Optional. May contain links of the form
       * &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_1 = 5;</code>
       */
      public com.google.protobuf.ByteString
          getDescriptionLine1Bytes() {
        return instance.getDescriptionLine1Bytes();
      }
      /**
       * <pre>
       * Text shown below the label. Optional. May contain links of the form
       * &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_1 = 5;</code>
       */
      public Builder setDescriptionLine1(
          java.lang.String value) {
        copyOnWrite();
        instance.setDescriptionLine1(value);
        return this;
      }
      /**
       * <pre>
       * Text shown below the label. Optional. May contain links of the form
       * &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_1 = 5;</code>
       */
      public Builder clearDescriptionLine1() {
        copyOnWrite();
        instance.clearDescriptionLine1();
        return this;
      }
      /**
       * <pre>
       * Text shown below the label. Optional. May contain links of the form
       * &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_1 = 5;</code>
       */
      public Builder setDescriptionLine1Bytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDescriptionLine1Bytes(value);
        return this;
      }

      /**
       * <pre>
       * Text shown below |description_line_2|. Optional. May contain links of the
       * form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_2 = 8;</code>
       */
      public boolean hasDescriptionLine2() {
        return instance.hasDescriptionLine2();
      }
      /**
       * <pre>
       * Text shown below |description_line_2|. Optional. May contain links of the
       * form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_2 = 8;</code>
       */
      public java.lang.String getDescriptionLine2() {
        return instance.getDescriptionLine2();
      }
      /**
       * <pre>
       * Text shown below |description_line_2|. Optional. May contain links of the
       * form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_2 = 8;</code>
       */
      public com.google.protobuf.ByteString
          getDescriptionLine2Bytes() {
        return instance.getDescriptionLine2Bytes();
      }
      /**
       * <pre>
       * Text shown below |description_line_2|. Optional. May contain links of the
       * form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_2 = 8;</code>
       */
      public Builder setDescriptionLine2(
          java.lang.String value) {
        copyOnWrite();
        instance.setDescriptionLine2(value);
        return this;
      }
      /**
       * <pre>
       * Text shown below |description_line_2|. Optional. May contain links of the
       * form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_2 = 8;</code>
       */
      public Builder clearDescriptionLine2() {
        copyOnWrite();
        instance.clearDescriptionLine2();
        return this;
      }
      /**
       * <pre>
       * Text shown below |description_line_2|. Optional. May contain links of the
       * form &lt;link1&gt;Some text&lt;/link1&gt;.
       * </pre>
       *
       * <code>optional string description_line_2 = 8;</code>
       */
      public Builder setDescriptionLine2Bytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDescriptionLine2Bytes(value);
        return this;
      }

      /**
       * <pre>
       * The possible values this counter can have. If empty, the possible values
       * will be all integer values between |min_value| and |max_value|.
       * Note that the order of the values matters and they will not be
       * automatically sorted.
       * </pre>
       *
       * <code>repeated int32 allowed_values = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getAllowedValuesList() {
        return java.util.Collections.unmodifiableList(
            instance.getAllowedValuesList());
      }
      /**
       * <pre>
       * The possible values this counter can have. If empty, the possible values
       * will be all integer values between |min_value| and |max_value|.
       * Note that the order of the values matters and they will not be
       * automatically sorted.
       * </pre>
       *
       * <code>repeated int32 allowed_values = 6;</code>
       */
      public int getAllowedValuesCount() {
        return instance.getAllowedValuesCount();
      }
      /**
       * <pre>
       * The possible values this counter can have. If empty, the possible values
       * will be all integer values between |min_value| and |max_value|.
       * Note that the order of the values matters and they will not be
       * automatically sorted.
       * </pre>
       *
       * <code>repeated int32 allowed_values = 6;</code>
       */
      public int getAllowedValues(int index) {
        return instance.getAllowedValues(index);
      }
      /**
       * <pre>
       * The possible values this counter can have. If empty, the possible values
       * will be all integer values between |min_value| and |max_value|.
       * Note that the order of the values matters and they will not be
       * automatically sorted.
       * </pre>
       *
       * <code>repeated int32 allowed_values = 6;</code>
       */
      public Builder setAllowedValues(
          int index, int value) {
        copyOnWrite();
        instance.setAllowedValues(index, value);
        return this;
      }
      /**
       * <pre>
       * The possible values this counter can have. If empty, the possible values
       * will be all integer values between |min_value| and |max_value|.
       * Note that the order of the values matters and they will not be
       * automatically sorted.
       * </pre>
       *
       * <code>repeated int32 allowed_values = 6;</code>
       */
      public Builder addAllowedValues(int value) {
        copyOnWrite();
        instance.addAllowedValues(value);
        return this;
      }
      /**
       * <pre>
       * The possible values this counter can have. If empty, the possible values
       * will be all integer values between |min_value| and |max_value|.
       * Note that the order of the values matters and they will not be
       * automatically sorted.
       * </pre>
       *
       * <code>repeated int32 allowed_values = 6;</code>
       */
      public Builder addAllAllowedValues(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllAllowedValues(values);
        return this;
      }
      /**
       * <pre>
       * The possible values this counter can have. If empty, the possible values
       * will be all integer values between |min_value| and |max_value|.
       * Note that the order of the values matters and they will not be
       * automatically sorted.
       * </pre>
       *
       * <code>repeated int32 allowed_values = 6;</code>
       */
      public Builder clearAllowedValues() {
        copyOnWrite();
        instance.clearAllowedValues();
        return this;
      }

      /**
       * <pre>
       * The minimum value this counter can have. Ignored if |allowed_values| is
       * not empty.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      public boolean hasMinValue() {
        return instance.hasMinValue();
      }
      /**
       * <pre>
       * The minimum value this counter can have. Ignored if |allowed_values| is
       * not empty.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      public int getMinValue() {
        return instance.getMinValue();
      }
      /**
       * <pre>
       * The minimum value this counter can have. Ignored if |allowed_values| is
       * not empty.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      public Builder setMinValue(int value) {
        copyOnWrite();
        instance.setMinValue(value);
        return this;
      }
      /**
       * <pre>
       * The minimum value this counter can have. Ignored if |allowed_values| is
       * not empty.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      public Builder clearMinValue() {
        copyOnWrite();
        instance.clearMinValue();
        return this;
      }

      /**
       * <pre>
       * The maximum value this counter can have. Ignored if |allowed_values| is
       * not empty.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      public boolean hasMaxValue() {
        return instance.hasMaxValue();
      }
      /**
       * <pre>
       * The maximum value this counter can have. Ignored if |allowed_values| is
       * not empty.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      public int getMaxValue() {
        return instance.getMaxValue();
      }
      /**
       * <pre>
       * The maximum value this counter can have. Ignored if |allowed_values| is
       * not empty.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      public Builder setMaxValue(int value) {
        copyOnWrite();
        instance.setMaxValue(value);
        return this;
      }
      /**
       * <pre>
       * The maximum value this counter can have. Ignored if |allowed_values| is
       * not empty.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      public Builder clearMaxValue() {
        copyOnWrite();
        instance.clearMaxValue();
        return this;
      }

      /**
       * <pre>
       * The initial value of the counter. If |allowed_values| is not empty, it
       * must contain |initial_value| or it will otherwise default to the first
       * value.
       * </pre>
       *
       * <code>optional int32 initial_value = 4 [default = 0];</code>
       */
      public boolean hasInitialValue() {
        return instance.hasInitialValue();
      }
      /**
       * <pre>
       * The initial value of the counter. If |allowed_values| is not empty, it
       * must contain |initial_value| or it will otherwise default to the first
       * value.
       * </pre>
       *
       * <code>optional int32 initial_value = 4 [default = 0];</code>
       */
      public int getInitialValue() {
        return instance.getInitialValue();
      }
      /**
       * <pre>
       * The initial value of the counter. If |allowed_values| is not empty, it
       * must contain |initial_value| or it will otherwise default to the first
       * value.
       * </pre>
       *
       * <code>optional int32 initial_value = 4 [default = 0];</code>
       */
      public Builder setInitialValue(int value) {
        copyOnWrite();
        instance.setInitialValue(value);
        return this;
      }
      /**
       * <pre>
       * The initial value of the counter. If |allowed_values| is not empty, it
       * must contain |initial_value| or it will otherwise default to the first
       * value.
       * </pre>
       *
       * <code>optional int32 initial_value = 4 [default = 0];</code>
       */
      public Builder clearInitialValue() {
        copyOnWrite();
        instance.clearInitialValue();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.CounterInputProto.Counter)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          allowedValues_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter other = (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter) arg1;
          label_ = visitor.visitString(
              hasLabel(), label_,
              other.hasLabel(), other.label_);
          descriptionLine1_ = visitor.visitString(
              hasDescriptionLine1(), descriptionLine1_,
              other.hasDescriptionLine1(), other.descriptionLine1_);
          descriptionLine2_ = visitor.visitString(
              hasDescriptionLine2(), descriptionLine2_,
              other.hasDescriptionLine2(), other.descriptionLine2_);
          allowedValues_= visitor.visitIntList(allowedValues_, other.allowedValues_);
          minValue_ = visitor.visitInt(
              hasMinValue(), minValue_,
              other.hasMinValue(), other.minValue_);
          maxValue_ = visitor.visitInt(
              hasMaxValue(), maxValue_,
              other.hasMaxValue(), other.maxValue_);
          initialValue_ = visitor.visitInt(
              hasInitialValue(), initialValue_,
              other.hasInitialValue(), other.initialValue_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readString();
                  bitField0_ |= 0x00000001;
                  label_ = s;
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000008;
                  minValue_ = input.readInt32();
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000010;
                  maxValue_ = input.readInt32();
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000020;
                  initialValue_ = input.readInt32();
                  break;
                }
                case 42: {
                  String s = input.readString();
                  bitField0_ |= 0x00000002;
                  descriptionLine1_ = s;
                  break;
                }
                case 48: {
                  if (!allowedValues_.isModifiable()) {
                    allowedValues_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(allowedValues_);
                  }
                  allowedValues_.addInt(input.readInt32());
                  break;
                }
                case 50: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!allowedValues_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    allowedValues_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(allowedValues_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    allowedValues_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
                case 66: {
                  String s = input.readString();
                  bitField0_ |= 0x00000004;
                  descriptionLine2_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.CounterInputProto.Counter)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Counter();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Counter> PARSER;

    public static com.google.protobuf.Parser<Counter> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.CounterInputProto.Result)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    java.util.List<java.lang.Integer> getValuesList();
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    int getValuesCount();
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    int getValues(int index);
  }
  /**
   * <pre>
   * A result associated to this counter.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.CounterInputProto.Result}
   */
  public  static final class Result extends
      com.google.protobuf.GeneratedMessageLite<
          Result, Result.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.CounterInputProto.Result)
      ResultOrBuilder {
    private Result() {
      values_ = emptyIntList();
    }
    public static final int VALUES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.IntList values_;
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getValuesList() {
      return values_;
    }
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    public int getValuesCount() {
      return values_.size();
    }
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    public int getValues(int index) {
      return values_.getInt(index);
    }
    private void ensureValuesIsMutable() {
      if (!values_.isModifiable()) {
        values_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
       }
    }
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    private void setValues(
        int index, int value) {
      ensureValuesIsMutable();
      values_.setInt(index, value);
    }
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    private void addValues(int value) {
      ensureValuesIsMutable();
      values_.addInt(value);
    }
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    private void addAllValues(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      ensureValuesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, values_);
    }
    /**
     * <pre>
     * The values of all counters from this CounterInputProto, such that
     * |values[i]| is the value of |counters[i]|.
     * </pre>
     *
     * <code>repeated int32 values = 1;</code>
     */
    private void clearValues() {
      values_ = emptyIntList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < values_.size(); i++) {
        output.writeInt32(1, values_.getInt(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < values_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(values_.getInt(i));
        }
        size += dataSize;
        size += 1 * getValuesList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A result associated to this counter.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.CounterInputProto.Result}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.CounterInputProto.Result)
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ResultOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The values of all counters from this CounterInputProto, such that
       * |values[i]| is the value of |counters[i]|.
       * </pre>
       *
       * <code>repeated int32 values = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getValuesList() {
        return java.util.Collections.unmodifiableList(
            instance.getValuesList());
      }
      /**
       * <pre>
       * The values of all counters from this CounterInputProto, such that
       * |values[i]| is the value of |counters[i]|.
       * </pre>
       *
       * <code>repeated int32 values = 1;</code>
       */
      public int getValuesCount() {
        return instance.getValuesCount();
      }
      /**
       * <pre>
       * The values of all counters from this CounterInputProto, such that
       * |values[i]| is the value of |counters[i]|.
       * </pre>
       *
       * <code>repeated int32 values = 1;</code>
       */
      public int getValues(int index) {
        return instance.getValues(index);
      }
      /**
       * <pre>
       * The values of all counters from this CounterInputProto, such that
       * |values[i]| is the value of |counters[i]|.
       * </pre>
       *
       * <code>repeated int32 values = 1;</code>
       */
      public Builder setValues(
          int index, int value) {
        copyOnWrite();
        instance.setValues(index, value);
        return this;
      }
      /**
       * <pre>
       * The values of all counters from this CounterInputProto, such that
       * |values[i]| is the value of |counters[i]|.
       * </pre>
       *
       * <code>repeated int32 values = 1;</code>
       */
      public Builder addValues(int value) {
        copyOnWrite();
        instance.addValues(value);
        return this;
      }
      /**
       * <pre>
       * The values of all counters from this CounterInputProto, such that
       * |values[i]| is the value of |counters[i]|.
       * </pre>
       *
       * <code>repeated int32 values = 1;</code>
       */
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        copyOnWrite();
        instance.addAllValues(values);
        return this;
      }
      /**
       * <pre>
       * The values of all counters from this CounterInputProto, such that
       * |values[i]| is the value of |counters[i]|.
       * </pre>
       *
       * <code>repeated int32 values = 1;</code>
       */
      public Builder clearValues() {
        copyOnWrite();
        instance.clearValues();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.CounterInputProto.Result)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          values_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result other = (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result) arg1;
          values_= visitor.visitIntList(values_, other.values_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  if (!values_.isModifiable()) {
                    values_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
                  }
                  values_.addInt(input.readInt32());
                  break;
                }
                case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!values_.isModifiable() && input.getBytesUntilLimit() > 0) {
                    values_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(values_);
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    values_.addInt(input.readInt32());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.CounterInputProto.Result)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Result();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Result getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Result> PARSER;

    public static com.google.protobuf.Parser<Result> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ValidationRuleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.CounterInputProto.ValidationRule)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
     */
    boolean hasBoolean();
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule getBoolean();

    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
     */
    boolean hasCounter();
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule getCounter();

    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
     */
    boolean hasCountersSum();
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule getCountersSum();

    public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.RuleTypeCase getRuleTypeCase();
  }
  /**
   * <pre>
   * A validation rule to validate this input values.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.CounterInputProto.ValidationRule}
   */
  public  static final class ValidationRule extends
      com.google.protobuf.GeneratedMessageLite<
          ValidationRule, ValidationRule.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.CounterInputProto.ValidationRule)
      ValidationRuleOrBuilder {
    private ValidationRule() {
    }
    public interface BooleanRuleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:autofill_assistant.CounterInputProto.ValidationRule.BooleanRule)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule> 
          getSubRulesList();
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule getSubRules(int index);
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      int getSubRulesCount();

      /**
       * <pre>
       * The minimum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
       */
      boolean hasMinSatisfiedRules();
      /**
       * <pre>
       * The minimum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
       */
      int getMinSatisfiedRules();

      /**
       * <pre>
       * The maximum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
       */
      boolean hasMaxSatisfiedRules();
      /**
       * <pre>
       * The maximum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
       */
      int getMaxSatisfiedRules();
    }
    /**
     * <pre>
     * A rule to combine sub rules. This rule allows to express the following:
     *  - Rule A and Rule B must be satisfied.
     *  - Rule A or Rule B must be satisfied.
     *  - Rule A must not be satisfied.
     *  - At least 2 of Rules A, B or C must be satisfied.
     * This rule is satisfied if the number of satisfied |sub_rules| is &gt;=
     * min_satisfied_rules and &lt;= max_satisfied_rules.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.CounterInputProto.ValidationRule.BooleanRule}
     */
    public  static final class BooleanRule extends
        com.google.protobuf.GeneratedMessageLite<
            BooleanRule, BooleanRule.Builder> implements
        // @@protoc_insertion_point(message_implements:autofill_assistant.CounterInputProto.ValidationRule.BooleanRule)
        BooleanRuleOrBuilder {
      private BooleanRule() {
        subRules_ = emptyProtobufList();
        maxSatisfiedRules_ = 2147483647;
      }
      private int bitField0_;
      public static final int SUB_RULES_FIELD_NUMBER = 1;
      private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule> subRules_;
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule> getSubRulesList() {
        return subRules_;
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRuleOrBuilder> 
          getSubRulesOrBuilderList() {
        return subRules_;
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      public int getSubRulesCount() {
        return subRules_.size();
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule getSubRules(int index) {
        return subRules_.get(index);
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRuleOrBuilder getSubRulesOrBuilder(
          int index) {
        return subRules_.get(index);
      }
      private void ensureSubRulesIsMutable() {
        if (!subRules_.isModifiable()) {
          subRules_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(subRules_);
         }
      }

      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void setSubRules(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubRulesIsMutable();
        subRules_.set(index, value);
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void setSubRules(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder builderForValue) {
        ensureSubRulesIsMutable();
        subRules_.set(index, builderForValue.build());
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void addSubRules(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubRulesIsMutable();
        subRules_.add(value);
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void addSubRules(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubRulesIsMutable();
        subRules_.add(index, value);
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void addSubRules(
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder builderForValue) {
        ensureSubRulesIsMutable();
        subRules_.add(builderForValue.build());
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void addSubRules(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder builderForValue) {
        ensureSubRulesIsMutable();
        subRules_.add(index, builderForValue.build());
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void addAllSubRules(
          java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule> values) {
        ensureSubRulesIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, subRules_);
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void clearSubRules() {
        subRules_ = emptyProtobufList();
      }
      /**
       * <pre>
       * The sub rules to check.
       * </pre>
       *
       * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
       */
      private void removeSubRules(int index) {
        ensureSubRulesIsMutable();
        subRules_.remove(index);
      }

      public static final int MIN_SATISFIED_RULES_FIELD_NUMBER = 2;
      private int minSatisfiedRules_;
      /**
       * <pre>
       * The minimum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
       */
      public boolean hasMinSatisfiedRules() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The minimum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
       */
      public int getMinSatisfiedRules() {
        return minSatisfiedRules_;
      }
      /**
       * <pre>
       * The minimum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
       */
      private void setMinSatisfiedRules(int value) {
        bitField0_ |= 0x00000001;
        minSatisfiedRules_ = value;
      }
      /**
       * <pre>
       * The minimum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
       */
      private void clearMinSatisfiedRules() {
        bitField0_ = (bitField0_ & ~0x00000001);
        minSatisfiedRules_ = 0;
      }

      public static final int MAX_SATISFIED_RULES_FIELD_NUMBER = 3;
      private int maxSatisfiedRules_;
      /**
       * <pre>
       * The maximum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
       */
      public boolean hasMaxSatisfiedRules() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The maximum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
       */
      public int getMaxSatisfiedRules() {
        return maxSatisfiedRules_;
      }
      /**
       * <pre>
       * The maximum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
       */
      private void setMaxSatisfiedRules(int value) {
        bitField0_ |= 0x00000002;
        maxSatisfiedRules_ = value;
      }
      /**
       * <pre>
       * The maximum number of rules that must be satisfied.
       * </pre>
       *
       * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
       */
      private void clearMaxSatisfiedRules() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxSatisfiedRules_ = 2147483647;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < subRules_.size(); i++) {
          output.writeMessage(1, subRules_.get(i));
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(2, minSatisfiedRules_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(3, maxSatisfiedRules_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < subRules_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, subRules_.get(i));
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, minSatisfiedRules_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, maxSatisfiedRules_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * <pre>
       * A rule to combine sub rules. This rule allows to express the following:
       *  - Rule A and Rule B must be satisfied.
       *  - Rule A or Rule B must be satisfied.
       *  - Rule A must not be satisfied.
       *  - At least 2 of Rules A, B or C must be satisfied.
       * This rule is satisfied if the number of satisfied |sub_rules| is &gt;=
       * min_satisfied_rules and &lt;= max_satisfied_rules.
       * </pre>
       *
       * Protobuf type {@code autofill_assistant.CounterInputProto.ValidationRule.BooleanRule}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule, Builder> implements
          // @@protoc_insertion_point(builder_implements:autofill_assistant.CounterInputProto.ValidationRule.BooleanRule)
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRuleOrBuilder {
        // Construct using org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule> getSubRulesList() {
          return java.util.Collections.unmodifiableList(
              instance.getSubRulesList());
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public int getSubRulesCount() {
          return instance.getSubRulesCount();
        }/**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule getSubRules(int index) {
          return instance.getSubRules(index);
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder setSubRules(
            int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
          copyOnWrite();
          instance.setSubRules(index, value);
          return this;
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder setSubRules(
            int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder builderForValue) {
          copyOnWrite();
          instance.setSubRules(index, builderForValue);
          return this;
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder addSubRules(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
          copyOnWrite();
          instance.addSubRules(value);
          return this;
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder addSubRules(
            int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
          copyOnWrite();
          instance.addSubRules(index, value);
          return this;
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder addSubRules(
            org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder builderForValue) {
          copyOnWrite();
          instance.addSubRules(builderForValue);
          return this;
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder addSubRules(
            int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder builderForValue) {
          copyOnWrite();
          instance.addSubRules(index, builderForValue);
          return this;
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder addAllSubRules(
            java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule> values) {
          copyOnWrite();
          instance.addAllSubRules(values);
          return this;
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder clearSubRules() {
          copyOnWrite();
          instance.clearSubRules();
          return this;
        }
        /**
         * <pre>
         * The sub rules to check.
         * </pre>
         *
         * <code>repeated .autofill_assistant.CounterInputProto.ValidationRule sub_rules = 1;</code>
         */
        public Builder removeSubRules(int index) {
          copyOnWrite();
          instance.removeSubRules(index);
          return this;
        }

        /**
         * <pre>
         * The minimum number of rules that must be satisfied.
         * </pre>
         *
         * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
         */
        public boolean hasMinSatisfiedRules() {
          return instance.hasMinSatisfiedRules();
        }
        /**
         * <pre>
         * The minimum number of rules that must be satisfied.
         * </pre>
         *
         * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
         */
        public int getMinSatisfiedRules() {
          return instance.getMinSatisfiedRules();
        }
        /**
         * <pre>
         * The minimum number of rules that must be satisfied.
         * </pre>
         *
         * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
         */
        public Builder setMinSatisfiedRules(int value) {
          copyOnWrite();
          instance.setMinSatisfiedRules(value);
          return this;
        }
        /**
         * <pre>
         * The minimum number of rules that must be satisfied.
         * </pre>
         *
         * <code>optional int32 min_satisfied_rules = 2 [default = 0];</code>
         */
        public Builder clearMinSatisfiedRules() {
          copyOnWrite();
          instance.clearMinSatisfiedRules();
          return this;
        }

        /**
         * <pre>
         * The maximum number of rules that must be satisfied.
         * </pre>
         *
         * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
         */
        public boolean hasMaxSatisfiedRules() {
          return instance.hasMaxSatisfiedRules();
        }
        /**
         * <pre>
         * The maximum number of rules that must be satisfied.
         * </pre>
         *
         * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
         */
        public int getMaxSatisfiedRules() {
          return instance.getMaxSatisfiedRules();
        }
        /**
         * <pre>
         * The maximum number of rules that must be satisfied.
         * </pre>
         *
         * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
         */
        public Builder setMaxSatisfiedRules(int value) {
          copyOnWrite();
          instance.setMaxSatisfiedRules(value);
          return this;
        }
        /**
         * <pre>
         * The maximum number of rules that must be satisfied.
         * </pre>
         *
         * <code>optional int32 max_satisfied_rules = 3 [default = 2147483647];</code>
         */
        public Builder clearMaxSatisfiedRules() {
          copyOnWrite();
          instance.clearMaxSatisfiedRules();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:autofill_assistant.CounterInputProto.ValidationRule.BooleanRule)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            subRules_.makeImmutable();
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule other = (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule) arg1;
            subRules_= visitor.visitList(subRules_, other.subRules_);
            minSatisfiedRules_ = visitor.visitInt(
                hasMinSatisfiedRules(), minSatisfiedRules_,
                other.hasMinSatisfiedRules(), other.minSatisfiedRules_);
            maxSatisfiedRules_ = visitor.visitInt(
                hasMaxSatisfiedRules(), maxSatisfiedRules_,
                other.hasMaxSatisfiedRules(), other.maxSatisfiedRules_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(tag, input)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    if (!subRules_.isModifiable()) {
                      subRules_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(subRules_);
                    }
                    subRules_.add(
                        input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.parser(), extensionRegistry));
                    break;
                  }
                  case 16: {
                    bitField0_ |= 0x00000001;
                    minSatisfiedRules_ = input.readInt32();
                    break;
                  }
                  case 24: {
                    bitField0_ |= 0x00000002;
                    maxSatisfiedRules_ = input.readInt32();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:autofill_assistant.CounterInputProto.ValidationRule.BooleanRule)
      private static final org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new BooleanRule();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<BooleanRule> PARSER;

      public static com.google.protobuf.Parser<BooleanRule> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface CounterRuleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:autofill_assistant.CounterInputProto.ValidationRule.CounterRule)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
       * |counters.size|.
       * </pre>
       *
       * <code>optional int32 counter_index = 1;</code>
       */
      boolean hasCounterIndex();
      /**
       * <pre>
       * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
       * |counters.size|.
       * </pre>
       *
       * <code>optional int32 counter_index = 1;</code>
       */
      int getCounterIndex();

      /**
       * <pre>
       * The minimum value this counter can have.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      boolean hasMinValue();
      /**
       * <pre>
       * The minimum value this counter can have.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      int getMinValue();

      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      boolean hasMaxValue();
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      int getMaxValue();
    }
    /**
     * <pre>
     * A rule on the value of one of the |counters|. This rule is satisfied if
     * min_value &lt;= counter.value &lt;= max_value.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.CounterInputProto.ValidationRule.CounterRule}
     */
    public  static final class CounterRule extends
        com.google.protobuf.GeneratedMessageLite<
            CounterRule, CounterRule.Builder> implements
        // @@protoc_insertion_point(message_implements:autofill_assistant.CounterInputProto.ValidationRule.CounterRule)
        CounterRuleOrBuilder {
      private CounterRule() {
        minValue_ = -2147483648;
        maxValue_ = 2147483647;
      }
      private int bitField0_;
      public static final int COUNTER_INDEX_FIELD_NUMBER = 1;
      private int counterIndex_;
      /**
       * <pre>
       * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
       * |counters.size|.
       * </pre>
       *
       * <code>optional int32 counter_index = 1;</code>
       */
      public boolean hasCounterIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
       * |counters.size|.
       * </pre>
       *
       * <code>optional int32 counter_index = 1;</code>
       */
      public int getCounterIndex() {
        return counterIndex_;
      }
      /**
       * <pre>
       * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
       * |counters.size|.
       * </pre>
       *
       * <code>optional int32 counter_index = 1;</code>
       */
      private void setCounterIndex(int value) {
        bitField0_ |= 0x00000001;
        counterIndex_ = value;
      }
      /**
       * <pre>
       * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
       * |counters.size|.
       * </pre>
       *
       * <code>optional int32 counter_index = 1;</code>
       */
      private void clearCounterIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        counterIndex_ = 0;
      }

      public static final int MIN_VALUE_FIELD_NUMBER = 2;
      private int minValue_;
      /**
       * <pre>
       * The minimum value this counter can have.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      public boolean hasMinValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The minimum value this counter can have.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      public int getMinValue() {
        return minValue_;
      }
      /**
       * <pre>
       * The minimum value this counter can have.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      private void setMinValue(int value) {
        bitField0_ |= 0x00000002;
        minValue_ = value;
      }
      /**
       * <pre>
       * The minimum value this counter can have.
       * </pre>
       *
       * <code>optional int32 min_value = 2 [default = -2147483648];</code>
       */
      private void clearMinValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        minValue_ = -2147483648;
      }

      public static final int MAX_VALUE_FIELD_NUMBER = 3;
      private int maxValue_;
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      public boolean hasMaxValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      public int getMaxValue() {
        return maxValue_;
      }
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      private void setMaxValue(int value) {
        bitField0_ |= 0x00000004;
        maxValue_ = value;
      }
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int32 max_value = 3 [default = 2147483647];</code>
       */
      private void clearMaxValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxValue_ = 2147483647;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, counterIndex_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, minValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, maxValue_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, counterIndex_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, minValue_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, maxValue_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * <pre>
       * A rule on the value of one of the |counters|. This rule is satisfied if
       * min_value &lt;= counter.value &lt;= max_value.
       * </pre>
       *
       * Protobuf type {@code autofill_assistant.CounterInputProto.ValidationRule.CounterRule}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule, Builder> implements
          // @@protoc_insertion_point(builder_implements:autofill_assistant.CounterInputProto.ValidationRule.CounterRule)
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRuleOrBuilder {
        // Construct using org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
         * |counters.size|.
         * </pre>
         *
         * <code>optional int32 counter_index = 1;</code>
         */
        public boolean hasCounterIndex() {
          return instance.hasCounterIndex();
        }
        /**
         * <pre>
         * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
         * |counters.size|.
         * </pre>
         *
         * <code>optional int32 counter_index = 1;</code>
         */
        public int getCounterIndex() {
          return instance.getCounterIndex();
        }
        /**
         * <pre>
         * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
         * |counters.size|.
         * </pre>
         *
         * <code>optional int32 counter_index = 1;</code>
         */
        public Builder setCounterIndex(int value) {
          copyOnWrite();
          instance.setCounterIndex(value);
          return this;
        }
        /**
         * <pre>
         * The index of the counter in |counters|. Must be &gt;= 0 and &lt;
         * |counters.size|.
         * </pre>
         *
         * <code>optional int32 counter_index = 1;</code>
         */
        public Builder clearCounterIndex() {
          copyOnWrite();
          instance.clearCounterIndex();
          return this;
        }

        /**
         * <pre>
         * The minimum value this counter can have.
         * </pre>
         *
         * <code>optional int32 min_value = 2 [default = -2147483648];</code>
         */
        public boolean hasMinValue() {
          return instance.hasMinValue();
        }
        /**
         * <pre>
         * The minimum value this counter can have.
         * </pre>
         *
         * <code>optional int32 min_value = 2 [default = -2147483648];</code>
         */
        public int getMinValue() {
          return instance.getMinValue();
        }
        /**
         * <pre>
         * The minimum value this counter can have.
         * </pre>
         *
         * <code>optional int32 min_value = 2 [default = -2147483648];</code>
         */
        public Builder setMinValue(int value) {
          copyOnWrite();
          instance.setMinValue(value);
          return this;
        }
        /**
         * <pre>
         * The minimum value this counter can have.
         * </pre>
         *
         * <code>optional int32 min_value = 2 [default = -2147483648];</code>
         */
        public Builder clearMinValue() {
          copyOnWrite();
          instance.clearMinValue();
          return this;
        }

        /**
         * <pre>
         * The maximum value this counter can have.
         * </pre>
         *
         * <code>optional int32 max_value = 3 [default = 2147483647];</code>
         */
        public boolean hasMaxValue() {
          return instance.hasMaxValue();
        }
        /**
         * <pre>
         * The maximum value this counter can have.
         * </pre>
         *
         * <code>optional int32 max_value = 3 [default = 2147483647];</code>
         */
        public int getMaxValue() {
          return instance.getMaxValue();
        }
        /**
         * <pre>
         * The maximum value this counter can have.
         * </pre>
         *
         * <code>optional int32 max_value = 3 [default = 2147483647];</code>
         */
        public Builder setMaxValue(int value) {
          copyOnWrite();
          instance.setMaxValue(value);
          return this;
        }
        /**
         * <pre>
         * The maximum value this counter can have.
         * </pre>
         *
         * <code>optional int32 max_value = 3 [default = 2147483647];</code>
         */
        public Builder clearMaxValue() {
          copyOnWrite();
          instance.clearMaxValue();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:autofill_assistant.CounterInputProto.ValidationRule.CounterRule)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule other = (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule) arg1;
            counterIndex_ = visitor.visitInt(
                hasCounterIndex(), counterIndex_,
                other.hasCounterIndex(), other.counterIndex_);
            minValue_ = visitor.visitInt(
                hasMinValue(), minValue_,
                other.hasMinValue(), other.minValue_);
            maxValue_ = visitor.visitInt(
                hasMaxValue(), maxValue_,
                other.hasMaxValue(), other.maxValue_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(tag, input)) {
                      done = true;
                    }
                    break;
                  }
                  case 8: {
                    bitField0_ |= 0x00000001;
                    counterIndex_ = input.readInt32();
                    break;
                  }
                  case 16: {
                    bitField0_ |= 0x00000002;
                    minValue_ = input.readInt32();
                    break;
                  }
                  case 24: {
                    bitField0_ |= 0x00000004;
                    maxValue_ = input.readInt32();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:autofill_assistant.CounterInputProto.ValidationRule.CounterRule)
      private static final org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new CounterRule();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<CounterRule> PARSER;

      public static com.google.protobuf.Parser<CounterRule> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface CountersSumRuleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The minimum value the total can have.
       * </pre>
       *
       * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
       */
      boolean hasMinValue();
      /**
       * <pre>
       * The minimum value the total can have.
       * </pre>
       *
       * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
       */
      long getMinValue();

      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
       */
      boolean hasMaxValue();
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
       */
      long getMaxValue();
    }
    /**
     * <pre>
     * A rule on the sum of the |counters|. This rule satisfied if the sum of
     * all |counters| is &gt;= min_value and &lt;= max_value. If there is an overflow
     * when computing the sum, the behavior is undefined.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule}
     */
    public  static final class CountersSumRule extends
        com.google.protobuf.GeneratedMessageLite<
            CountersSumRule, CountersSumRule.Builder> implements
        // @@protoc_insertion_point(message_implements:autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule)
        CountersSumRuleOrBuilder {
      private CountersSumRule() {
        minValue_ = -9223372036854775808L;
        maxValue_ = 9223372036854775807L;
      }
      private int bitField0_;
      public static final int MIN_VALUE_FIELD_NUMBER = 1;
      private long minValue_;
      /**
       * <pre>
       * The minimum value the total can have.
       * </pre>
       *
       * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
       */
      public boolean hasMinValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <pre>
       * The minimum value the total can have.
       * </pre>
       *
       * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
       */
      public long getMinValue() {
        return minValue_;
      }
      /**
       * <pre>
       * The minimum value the total can have.
       * </pre>
       *
       * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
       */
      private void setMinValue(long value) {
        bitField0_ |= 0x00000001;
        minValue_ = value;
      }
      /**
       * <pre>
       * The minimum value the total can have.
       * </pre>
       *
       * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
       */
      private void clearMinValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        minValue_ = -9223372036854775808L;
      }

      public static final int MAX_VALUE_FIELD_NUMBER = 2;
      private long maxValue_;
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
       */
      public boolean hasMaxValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
       */
      public long getMaxValue() {
        return maxValue_;
      }
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
       */
      private void setMaxValue(long value) {
        bitField0_ |= 0x00000002;
        maxValue_ = value;
      }
      /**
       * <pre>
       * The maximum value this counter can have.
       * </pre>
       *
       * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
       */
      private void clearMaxValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxValue_ = 9223372036854775807L;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt64(1, minValue_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt64(2, maxValue_);
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(1, minValue_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, maxValue_);
        }
        size += unknownFields.getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * <pre>
       * A rule on the sum of the |counters|. This rule satisfied if the sum of
       * all |counters| is &gt;= min_value and &lt;= max_value. If there is an overflow
       * when computing the sum, the behavior is undefined.
       * </pre>
       *
       * Protobuf type {@code autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule, Builder> implements
          // @@protoc_insertion_point(builder_implements:autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule)
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRuleOrBuilder {
        // Construct using org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The minimum value the total can have.
         * </pre>
         *
         * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
         */
        public boolean hasMinValue() {
          return instance.hasMinValue();
        }
        /**
         * <pre>
         * The minimum value the total can have.
         * </pre>
         *
         * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
         */
        public long getMinValue() {
          return instance.getMinValue();
        }
        /**
         * <pre>
         * The minimum value the total can have.
         * </pre>
         *
         * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
         */
        public Builder setMinValue(long value) {
          copyOnWrite();
          instance.setMinValue(value);
          return this;
        }
        /**
         * <pre>
         * The minimum value the total can have.
         * </pre>
         *
         * <code>optional int64 min_value = 1 [default = -9223372036854775808];</code>
         */
        public Builder clearMinValue() {
          copyOnWrite();
          instance.clearMinValue();
          return this;
        }

        /**
         * <pre>
         * The maximum value this counter can have.
         * </pre>
         *
         * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
         */
        public boolean hasMaxValue() {
          return instance.hasMaxValue();
        }
        /**
         * <pre>
         * The maximum value this counter can have.
         * </pre>
         *
         * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
         */
        public long getMaxValue() {
          return instance.getMaxValue();
        }
        /**
         * <pre>
         * The maximum value this counter can have.
         * </pre>
         *
         * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
         */
        public Builder setMaxValue(long value) {
          copyOnWrite();
          instance.setMaxValue(value);
          return this;
        }
        /**
         * <pre>
         * The maximum value this counter can have.
         * </pre>
         *
         * <code>optional int64 max_value = 2 [default = 9223372036854775807];</code>
         */
        public Builder clearMaxValue() {
          copyOnWrite();
          instance.clearMaxValue();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule other = (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule) arg1;
            minValue_ = visitor.visitLong(
                hasMinValue(), minValue_,
                other.hasMinValue(), other.minValue_);
            maxValue_ = visitor.visitLong(
                hasMaxValue(), maxValue_,
                other.hasMaxValue(), other.maxValue_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!parseUnknownField(tag, input)) {
                      done = true;
                    }
                    break;
                  }
                  case 8: {
                    bitField0_ |= 0x00000001;
                    minValue_ = input.readInt64();
                    break;
                  }
                  case 16: {
                    bitField0_ |= 0x00000002;
                    maxValue_ = input.readInt64();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule)
      private static final org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new CountersSumRule();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<CountersSumRule> PARSER;

      public static com.google.protobuf.Parser<CountersSumRule> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    private int ruleTypeCase_ = 0;
    private java.lang.Object ruleType_;
    public enum RuleTypeCase
        implements com.google.protobuf.Internal.EnumLite {
      BOOLEAN(1),
      COUNTER(2),
      COUNTERS_SUM(3),
      RULETYPE_NOT_SET(0);
      private final int value;
      private RuleTypeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RuleTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static RuleTypeCase forNumber(int value) {
        switch (value) {
          case 1: return BOOLEAN;
          case 2: return COUNTER;
          case 3: return COUNTERS_SUM;
          case 0: return RULETYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RuleTypeCase
    getRuleTypeCase() {
      return RuleTypeCase.forNumber(
          ruleTypeCase_);
    }

    private void clearRuleType() {
      ruleTypeCase_ = 0;
      ruleType_ = null;
    }

    public static final int BOOLEAN_FIELD_NUMBER = 1;
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
     */
    public boolean hasBoolean() {
      return ruleTypeCase_ == 1;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule getBoolean() {
      if (ruleTypeCase_ == 1) {
         return (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule) ruleType_;
      }
      return org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.getDefaultInstance();
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
     */
    private void setBoolean(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ruleType_ = value;
      ruleTypeCase_ = 1;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
     */
    private void setBoolean(
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.Builder builderForValue) {
      ruleType_ = builderForValue.build();
      ruleTypeCase_ = 1;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
     */
    private void mergeBoolean(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule value) {
      if (ruleTypeCase_ == 1 &&
          ruleType_ != org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.getDefaultInstance()) {
        ruleType_ = org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule) ruleType_)
            .mergeFrom(value).buildPartial();
      } else {
        ruleType_ = value;
      }
      ruleTypeCase_ = 1;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
     */
    private void clearBoolean() {
      if (ruleTypeCase_ == 1) {
        ruleTypeCase_ = 0;
        ruleType_ = null;
      }
    }

    public static final int COUNTER_FIELD_NUMBER = 2;
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
     */
    public boolean hasCounter() {
      return ruleTypeCase_ == 2;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule getCounter() {
      if (ruleTypeCase_ == 2) {
         return (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule) ruleType_;
      }
      return org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.getDefaultInstance();
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
     */
    private void setCounter(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ruleType_ = value;
      ruleTypeCase_ = 2;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
     */
    private void setCounter(
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.Builder builderForValue) {
      ruleType_ = builderForValue.build();
      ruleTypeCase_ = 2;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
     */
    private void mergeCounter(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule value) {
      if (ruleTypeCase_ == 2 &&
          ruleType_ != org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.getDefaultInstance()) {
        ruleType_ = org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule) ruleType_)
            .mergeFrom(value).buildPartial();
      } else {
        ruleType_ = value;
      }
      ruleTypeCase_ = 2;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
     */
    private void clearCounter() {
      if (ruleTypeCase_ == 2) {
        ruleTypeCase_ = 0;
        ruleType_ = null;
      }
    }

    public static final int COUNTERS_SUM_FIELD_NUMBER = 3;
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
     */
    public boolean hasCountersSum() {
      return ruleTypeCase_ == 3;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule getCountersSum() {
      if (ruleTypeCase_ == 3) {
         return (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule) ruleType_;
      }
      return org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.getDefaultInstance();
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
     */
    private void setCountersSum(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ruleType_ = value;
      ruleTypeCase_ = 3;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
     */
    private void setCountersSum(
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.Builder builderForValue) {
      ruleType_ = builderForValue.build();
      ruleTypeCase_ = 3;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
     */
    private void mergeCountersSum(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule value) {
      if (ruleTypeCase_ == 3 &&
          ruleType_ != org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.getDefaultInstance()) {
        ruleType_ = org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule) ruleType_)
            .mergeFrom(value).buildPartial();
      } else {
        ruleType_ = value;
      }
      ruleTypeCase_ = 3;
    }
    /**
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
     */
    private void clearCountersSum() {
      if (ruleTypeCase_ == 3) {
        ruleTypeCase_ = 0;
        ruleType_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (ruleTypeCase_ == 1) {
        output.writeMessage(1, (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule) ruleType_);
      }
      if (ruleTypeCase_ == 2) {
        output.writeMessage(2, (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule) ruleType_);
      }
      if (ruleTypeCase_ == 3) {
        output.writeMessage(3, (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule) ruleType_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (ruleTypeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule) ruleType_);
      }
      if (ruleTypeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule) ruleType_);
      }
      if (ruleTypeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule) ruleType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A validation rule to validate this input values.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.CounterInputProto.ValidationRule}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.CounterInputProto.ValidationRule)
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRuleOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public RuleTypeCase
          getRuleTypeCase() {
        return instance.getRuleTypeCase();
      }

      public Builder clearRuleType() {
        copyOnWrite();
        instance.clearRuleType();
        return this;
      }


      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
       */
      public boolean hasBoolean() {
        return instance.hasBoolean();
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule getBoolean() {
        return instance.getBoolean();
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
       */
      public Builder setBoolean(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule value) {
        copyOnWrite();
        instance.setBoolean(value);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
       */
      public Builder setBoolean(
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.Builder builderForValue) {
        copyOnWrite();
        instance.setBoolean(builderForValue);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
       */
      public Builder mergeBoolean(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule value) {
        copyOnWrite();
        instance.mergeBoolean(value);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.BooleanRule boolean = 1;</code>
       */
      public Builder clearBoolean() {
        copyOnWrite();
        instance.clearBoolean();
        return this;
      }

      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
       */
      public boolean hasCounter() {
        return instance.hasCounter();
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule getCounter() {
        return instance.getCounter();
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
       */
      public Builder setCounter(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule value) {
        copyOnWrite();
        instance.setCounter(value);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
       */
      public Builder setCounter(
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.Builder builderForValue) {
        copyOnWrite();
        instance.setCounter(builderForValue);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
       */
      public Builder mergeCounter(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule value) {
        copyOnWrite();
        instance.mergeCounter(value);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CounterRule counter = 2;</code>
       */
      public Builder clearCounter() {
        copyOnWrite();
        instance.clearCounter();
        return this;
      }

      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
       */
      public boolean hasCountersSum() {
        return instance.hasCountersSum();
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule getCountersSum() {
        return instance.getCountersSum();
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
       */
      public Builder setCountersSum(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule value) {
        copyOnWrite();
        instance.setCountersSum(value);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
       */
      public Builder setCountersSum(
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.Builder builderForValue) {
        copyOnWrite();
        instance.setCountersSum(builderForValue);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
       */
      public Builder mergeCountersSum(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule value) {
        copyOnWrite();
        instance.mergeCountersSum(value);
        return this;
      }
      /**
       * <code>optional .autofill_assistant.CounterInputProto.ValidationRule.CountersSumRule counters_sum = 3;</code>
       */
      public Builder clearCountersSum() {
        copyOnWrite();
        instance.clearCountersSum();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.CounterInputProto.ValidationRule)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule other = (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule) arg1;
          switch (other.getRuleTypeCase()) {
            case BOOLEAN: {
              ruleType_ = visitor.visitOneofMessage(
                  ruleTypeCase_ == 1,
                  ruleType_,
                  other.ruleType_);
              break;
            }
            case COUNTER: {
              ruleType_ = visitor.visitOneofMessage(
                  ruleTypeCase_ == 2,
                  ruleType_,
                  other.ruleType_);
              break;
            }
            case COUNTERS_SUM: {
              ruleType_ = visitor.visitOneofMessage(
                  ruleTypeCase_ == 3,
                  ruleType_,
                  other.ruleType_);
              break;
            }
            case RULETYPE_NOT_SET: {
              visitor.visitOneofNotSet(ruleTypeCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.ruleTypeCase_ != 0) {
              ruleTypeCase_ = other.ruleTypeCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.Builder subBuilder = null;
                  if (ruleTypeCase_ == 1) {
                    subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule) ruleType_).toBuilder();
                  }
                  ruleType_ =
                       input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.BooleanRule) ruleType_);
                    ruleType_ = subBuilder.buildPartial();
                  }
                  ruleTypeCase_ = 1;
                  break;
                }
                case 18: {
                  org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.Builder subBuilder = null;
                  if (ruleTypeCase_ == 2) {
                    subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule) ruleType_).toBuilder();
                  }
                  ruleType_ =
                       input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CounterRule) ruleType_);
                    ruleType_ = subBuilder.buildPartial();
                  }
                  ruleTypeCase_ = 2;
                  break;
                }
                case 26: {
                  org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.Builder subBuilder = null;
                  if (ruleTypeCase_ == 3) {
                    subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule) ruleType_).toBuilder();
                  }
                  ruleType_ =
                       input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.CountersSumRule) ruleType_);
                    ruleType_ = subBuilder.buildPartial();
                  }
                  ruleTypeCase_ = 3;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.CounterInputProto.ValidationRule)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ValidationRule();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ValidationRule> PARSER;

    public static com.google.protobuf.Parser<ValidationRule> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int LABEL_FIELD_NUMBER = 1;
  private java.lang.String label_;
  /**
   * <pre>
   * An optional label shown above the different counters.
   * </pre>
   *
   * <code>optional string label = 1;</code>
   */
  public boolean hasLabel() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * An optional label shown above the different counters.
   * </pre>
   *
   * <code>optional string label = 1;</code>
   */
  public java.lang.String getLabel() {
    return label_;
  }
  /**
   * <pre>
   * An optional label shown above the different counters.
   * </pre>
   *
   * <code>optional string label = 1;</code>
   */
  public com.google.protobuf.ByteString
      getLabelBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(label_);
  }
  /**
   * <pre>
   * An optional label shown above the different counters.
   * </pre>
   *
   * <code>optional string label = 1;</code>
   */
  private void setLabel(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    label_ = value;
  }
  /**
   * <pre>
   * An optional label shown above the different counters.
   * </pre>
   *
   * <code>optional string label = 1;</code>
   */
  private void clearLabel() {
    bitField0_ = (bitField0_ & ~0x00000001);
    label_ = getDefaultInstance().getLabel();
  }
  /**
   * <pre>
   * An optional label shown above the different counters.
   * </pre>
   *
   * <code>optional string label = 1;</code>
   */
  private void setLabelBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    label_ = value.toStringUtf8();
  }

  public static final int COUNTERS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter> counters_;
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter> getCountersList() {
    return counters_;
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.CounterOrBuilder> 
      getCountersOrBuilderList() {
    return counters_;
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  public int getCountersCount() {
    return counters_.size();
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter getCounters(int index) {
    return counters_.get(index);
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.CounterOrBuilder getCountersOrBuilder(
      int index) {
    return counters_.get(index);
  }
  private void ensureCountersIsMutable() {
    if (!counters_.isModifiable()) {
      counters_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(counters_);
     }
  }

  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void setCounters(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureCountersIsMutable();
    counters_.set(index, value);
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void setCounters(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.Builder builderForValue) {
    ensureCountersIsMutable();
    counters_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void addCounters(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureCountersIsMutable();
    counters_.add(value);
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void addCounters(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureCountersIsMutable();
    counters_.add(index, value);
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void addCounters(
      org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.Builder builderForValue) {
    ensureCountersIsMutable();
    counters_.add(builderForValue.build());
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void addCounters(
      int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.Builder builderForValue) {
    ensureCountersIsMutable();
    counters_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void addAllCounters(
      java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter> values) {
    ensureCountersIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, counters_);
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void clearCounters() {
    counters_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The counters to display.
   * </pre>
   *
   * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
   */
  private void removeCounters(int index) {
    ensureCountersIsMutable();
    counters_.remove(index);
  }

  public static final int MINIMIZED_COUNT_FIELD_NUMBER = 3;
  private int minimizedCount_;
  /**
   * <pre>
   * If specified, the input will initially display maximum |minimized_count|
   * counters. If |counters|.size &gt; |minimized_count|, the remaining counters
   * will be displayed in an expandable section below the first
   * |minimized_count| counters. Setting this value will have no effect if
   * |expand_text| and |minimize_text| are not set.
   * </pre>
   *
   * <code>optional int32 minimized_count = 3 [default = 2147483647];</code>
   */
  public boolean hasMinimizedCount() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * If specified, the input will initially display maximum |minimized_count|
   * counters. If |counters|.size &gt; |minimized_count|, the remaining counters
   * will be displayed in an expandable section below the first
   * |minimized_count| counters. Setting this value will have no effect if
   * |expand_text| and |minimize_text| are not set.
   * </pre>
   *
   * <code>optional int32 minimized_count = 3 [default = 2147483647];</code>
   */
  public int getMinimizedCount() {
    return minimizedCount_;
  }
  /**
   * <pre>
   * If specified, the input will initially display maximum |minimized_count|
   * counters. If |counters|.size &gt; |minimized_count|, the remaining counters
   * will be displayed in an expandable section below the first
   * |minimized_count| counters. Setting this value will have no effect if
   * |expand_text| and |minimize_text| are not set.
   * </pre>
   *
   * <code>optional int32 minimized_count = 3 [default = 2147483647];</code>
   */
  private void setMinimizedCount(int value) {
    bitField0_ |= 0x00000002;
    minimizedCount_ = value;
  }
  /**
   * <pre>
   * If specified, the input will initially display maximum |minimized_count|
   * counters. If |counters|.size &gt; |minimized_count|, the remaining counters
   * will be displayed in an expandable section below the first
   * |minimized_count| counters. Setting this value will have no effect if
   * |expand_text| and |minimize_text| are not set.
   * </pre>
   *
   * <code>optional int32 minimized_count = 3 [default = 2147483647];</code>
   */
  private void clearMinimizedCount() {
    bitField0_ = (bitField0_ & ~0x00000002);
    minimizedCount_ = 2147483647;
  }

  public static final int EXPAND_TEXT_FIELD_NUMBER = 4;
  private java.lang.String expandText_;
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is minimized. Clicking this text will expand the section and show the
   * remaining counters.
   * </pre>
   *
   * <code>optional string expand_text = 4;</code>
   */
  public boolean hasExpandText() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is minimized. Clicking this text will expand the section and show the
   * remaining counters.
   * </pre>
   *
   * <code>optional string expand_text = 4;</code>
   */
  public java.lang.String getExpandText() {
    return expandText_;
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is minimized. Clicking this text will expand the section and show the
   * remaining counters.
   * </pre>
   *
   * <code>optional string expand_text = 4;</code>
   */
  public com.google.protobuf.ByteString
      getExpandTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(expandText_);
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is minimized. Clicking this text will expand the section and show the
   * remaining counters.
   * </pre>
   *
   * <code>optional string expand_text = 4;</code>
   */
  private void setExpandText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    expandText_ = value;
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is minimized. Clicking this text will expand the section and show the
   * remaining counters.
   * </pre>
   *
   * <code>optional string expand_text = 4;</code>
   */
  private void clearExpandText() {
    bitField0_ = (bitField0_ & ~0x00000004);
    expandText_ = getDefaultInstance().getExpandText();
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is minimized. Clicking this text will expand the section and show the
   * remaining counters.
   * </pre>
   *
   * <code>optional string expand_text = 4;</code>
   */
  private void setExpandTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
    expandText_ = value.toStringUtf8();
  }

  public static final int MINIMIZE_TEXT_FIELD_NUMBER = 5;
  private java.lang.String minimizeText_;
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is expanded. Clicking this text will minimize the section and hide the
   * counters inside it.
   * </pre>
   *
   * <code>optional string minimize_text = 5;</code>
   */
  public boolean hasMinimizeText() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is expanded. Clicking this text will minimize the section and hide the
   * counters inside it.
   * </pre>
   *
   * <code>optional string minimize_text = 5;</code>
   */
  public java.lang.String getMinimizeText() {
    return minimizeText_;
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is expanded. Clicking this text will minimize the section and hide the
   * counters inside it.
   * </pre>
   *
   * <code>optional string minimize_text = 5;</code>
   */
  public com.google.protobuf.ByteString
      getMinimizeTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(minimizeText_);
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is expanded. Clicking this text will minimize the section and hide the
   * counters inside it.
   * </pre>
   *
   * <code>optional string minimize_text = 5;</code>
   */
  private void setMinimizeText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    minimizeText_ = value;
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is expanded. Clicking this text will minimize the section and hide the
   * counters inside it.
   * </pre>
   *
   * <code>optional string minimize_text = 5;</code>
   */
  private void clearMinimizeText() {
    bitField0_ = (bitField0_ & ~0x00000008);
    minimizeText_ = getDefaultInstance().getMinimizeText();
  }
  /**
   * <pre>
   * Text shown when counters are inside the expandable section and the section
   * is expanded. Clicking this text will minimize the section and hide the
   * counters inside it.
   * </pre>
   *
   * <code>optional string minimize_text = 5;</code>
   */
  private void setMinimizeTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
    minimizeText_ = value.toStringUtf8();
  }

  public static final int VALIDATION_RULE_FIELD_NUMBER = 6;
  private org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule validationRule_;
  /**
   * <pre>
   * Validation rule used to check whether the current values of this input are
   * valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
   */
  public boolean hasValidationRule() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * Validation rule used to check whether the current values of this input are
   * valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule getValidationRule() {
    return validationRule_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.getDefaultInstance() : validationRule_;
  }
  /**
   * <pre>
   * Validation rule used to check whether the current values of this input are
   * valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
   */
  private void setValidationRule(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
    if (value == null) {
      throw new NullPointerException();
    }
    validationRule_ = value;
    bitField0_ |= 0x00000010;
    }
  /**
   * <pre>
   * Validation rule used to check whether the current values of this input are
   * valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
   */
  private void setValidationRule(
      org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder builderForValue) {
    validationRule_ = builderForValue.build();
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * Validation rule used to check whether the current values of this input are
   * valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
   */
  private void mergeValidationRule(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
    if (validationRule_ != null &&
        validationRule_ != org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.getDefaultInstance()) {
      validationRule_ =
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.newBuilder(validationRule_).mergeFrom(value).buildPartial();
    } else {
      validationRule_ = value;
    }
    bitField0_ |= 0x00000010;
  }
  /**
   * <pre>
   * Validation rule used to check whether the current values of this input are
   * valid.
   * </pre>
   *
   * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
   */
  private void clearValidationRule() {  validationRule_ = null;
    bitField0_ = (bitField0_ & ~0x00000010);
  }

  public static final int MIN_COUNTERS_SUM_FIELD_NUMBER = 7;
  private long minCountersSum_;
  /**
   * <pre>
   * The minimum value of the sum of the counters. All counters decrease button
   * will be disabled if sum &lt;= min_counters_sum.
   * </pre>
   *
   * <code>optional int64 min_counters_sum = 7 [default = -9223372036854775808];</code>
   */
  public boolean hasMinCountersSum() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * The minimum value of the sum of the counters. All counters decrease button
   * will be disabled if sum &lt;= min_counters_sum.
   * </pre>
   *
   * <code>optional int64 min_counters_sum = 7 [default = -9223372036854775808];</code>
   */
  public long getMinCountersSum() {
    return minCountersSum_;
  }
  /**
   * <pre>
   * The minimum value of the sum of the counters. All counters decrease button
   * will be disabled if sum &lt;= min_counters_sum.
   * </pre>
   *
   * <code>optional int64 min_counters_sum = 7 [default = -9223372036854775808];</code>
   */
  private void setMinCountersSum(long value) {
    bitField0_ |= 0x00000020;
    minCountersSum_ = value;
  }
  /**
   * <pre>
   * The minimum value of the sum of the counters. All counters decrease button
   * will be disabled if sum &lt;= min_counters_sum.
   * </pre>
   *
   * <code>optional int64 min_counters_sum = 7 [default = -9223372036854775808];</code>
   */
  private void clearMinCountersSum() {
    bitField0_ = (bitField0_ & ~0x00000020);
    minCountersSum_ = -9223372036854775808L;
  }

  public static final int MAX_COUNTERS_SUM_FIELD_NUMBER = 8;
  private long maxCountersSum_;
  /**
   * <pre>
   * The maximum value of the sum of the counters. All counters increase button
   * will be disabled if sum &gt;= max_counters_sum.
   * </pre>
   *
   * <code>optional int64 max_counters_sum = 8 [default = 9223372036854775807];</code>
   */
  public boolean hasMaxCountersSum() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * The maximum value of the sum of the counters. All counters increase button
   * will be disabled if sum &gt;= max_counters_sum.
   * </pre>
   *
   * <code>optional int64 max_counters_sum = 8 [default = 9223372036854775807];</code>
   */
  public long getMaxCountersSum() {
    return maxCountersSum_;
  }
  /**
   * <pre>
   * The maximum value of the sum of the counters. All counters increase button
   * will be disabled if sum &gt;= max_counters_sum.
   * </pre>
   *
   * <code>optional int64 max_counters_sum = 8 [default = 9223372036854775807];</code>
   */
  private void setMaxCountersSum(long value) {
    bitField0_ |= 0x00000040;
    maxCountersSum_ = value;
  }
  /**
   * <pre>
   * The maximum value of the sum of the counters. All counters increase button
   * will be disabled if sum &gt;= max_counters_sum.
   * </pre>
   *
   * <code>optional int64 max_counters_sum = 8 [default = 9223372036854775807];</code>
   */
  private void clearMaxCountersSum() {
    bitField0_ = (bitField0_ & ~0x00000040);
    maxCountersSum_ = 9223372036854775807L;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getLabel());
    }
    for (int i = 0; i < counters_.size(); i++) {
      output.writeMessage(2, counters_.get(i));
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt32(3, minimizedCount_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeString(4, getExpandText());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeString(5, getMinimizeText());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeMessage(6, getValidationRule());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeInt64(7, minCountersSum_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeInt64(8, maxCountersSum_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getLabel());
    }
    for (int i = 0; i < counters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, counters_.get(i));
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, minimizedCount_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getExpandText());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getMinimizeText());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getValidationRule());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, minCountersSum_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, maxCountersSum_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * An input that is made of one or more counters. This input is considered valid
   * if its |validation_rule| is satisfied or if it doesn't have one.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.CounterInputProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.CounterInputProto)
      org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * An optional label shown above the different counters.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public boolean hasLabel() {
      return instance.hasLabel();
    }
    /**
     * <pre>
     * An optional label shown above the different counters.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public java.lang.String getLabel() {
      return instance.getLabel();
    }
    /**
     * <pre>
     * An optional label shown above the different counters.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      return instance.getLabelBytes();
    }
    /**
     * <pre>
     * An optional label shown above the different counters.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public Builder setLabel(
        java.lang.String value) {
      copyOnWrite();
      instance.setLabel(value);
      return this;
    }
    /**
     * <pre>
     * An optional label shown above the different counters.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public Builder clearLabel() {
      copyOnWrite();
      instance.clearLabel();
      return this;
    }
    /**
     * <pre>
     * An optional label shown above the different counters.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public Builder setLabelBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLabelBytes(value);
      return this;
    }

    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter> getCountersList() {
      return java.util.Collections.unmodifiableList(
          instance.getCountersList());
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public int getCountersCount() {
      return instance.getCountersCount();
    }/**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter getCounters(int index) {
      return instance.getCounters(index);
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder setCounters(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter value) {
      copyOnWrite();
      instance.setCounters(index, value);
      return this;
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder setCounters(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.Builder builderForValue) {
      copyOnWrite();
      instance.setCounters(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder addCounters(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter value) {
      copyOnWrite();
      instance.addCounters(value);
      return this;
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder addCounters(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter value) {
      copyOnWrite();
      instance.addCounters(index, value);
      return this;
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder addCounters(
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.Builder builderForValue) {
      copyOnWrite();
      instance.addCounters(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder addCounters(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.Builder builderForValue) {
      copyOnWrite();
      instance.addCounters(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder addAllCounters(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter> values) {
      copyOnWrite();
      instance.addAllCounters(values);
      return this;
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder clearCounters() {
      copyOnWrite();
      instance.clearCounters();
      return this;
    }
    /**
     * <pre>
     * The counters to display.
     * </pre>
     *
     * <code>repeated .autofill_assistant.CounterInputProto.Counter counters = 2;</code>
     */
    public Builder removeCounters(int index) {
      copyOnWrite();
      instance.removeCounters(index);
      return this;
    }

    /**
     * <pre>
     * If specified, the input will initially display maximum |minimized_count|
     * counters. If |counters|.size &gt; |minimized_count|, the remaining counters
     * will be displayed in an expandable section below the first
     * |minimized_count| counters. Setting this value will have no effect if
     * |expand_text| and |minimize_text| are not set.
     * </pre>
     *
     * <code>optional int32 minimized_count = 3 [default = 2147483647];</code>
     */
    public boolean hasMinimizedCount() {
      return instance.hasMinimizedCount();
    }
    /**
     * <pre>
     * If specified, the input will initially display maximum |minimized_count|
     * counters. If |counters|.size &gt; |minimized_count|, the remaining counters
     * will be displayed in an expandable section below the first
     * |minimized_count| counters. Setting this value will have no effect if
     * |expand_text| and |minimize_text| are not set.
     * </pre>
     *
     * <code>optional int32 minimized_count = 3 [default = 2147483647];</code>
     */
    public int getMinimizedCount() {
      return instance.getMinimizedCount();
    }
    /**
     * <pre>
     * If specified, the input will initially display maximum |minimized_count|
     * counters. If |counters|.size &gt; |minimized_count|, the remaining counters
     * will be displayed in an expandable section below the first
     * |minimized_count| counters. Setting this value will have no effect if
     * |expand_text| and |minimize_text| are not set.
     * </pre>
     *
     * <code>optional int32 minimized_count = 3 [default = 2147483647];</code>
     */
    public Builder setMinimizedCount(int value) {
      copyOnWrite();
      instance.setMinimizedCount(value);
      return this;
    }
    /**
     * <pre>
     * If specified, the input will initially display maximum |minimized_count|
     * counters. If |counters|.size &gt; |minimized_count|, the remaining counters
     * will be displayed in an expandable section below the first
     * |minimized_count| counters. Setting this value will have no effect if
     * |expand_text| and |minimize_text| are not set.
     * </pre>
     *
     * <code>optional int32 minimized_count = 3 [default = 2147483647];</code>
     */
    public Builder clearMinimizedCount() {
      copyOnWrite();
      instance.clearMinimizedCount();
      return this;
    }

    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is minimized. Clicking this text will expand the section and show the
     * remaining counters.
     * </pre>
     *
     * <code>optional string expand_text = 4;</code>
     */
    public boolean hasExpandText() {
      return instance.hasExpandText();
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is minimized. Clicking this text will expand the section and show the
     * remaining counters.
     * </pre>
     *
     * <code>optional string expand_text = 4;</code>
     */
    public java.lang.String getExpandText() {
      return instance.getExpandText();
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is minimized. Clicking this text will expand the section and show the
     * remaining counters.
     * </pre>
     *
     * <code>optional string expand_text = 4;</code>
     */
    public com.google.protobuf.ByteString
        getExpandTextBytes() {
      return instance.getExpandTextBytes();
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is minimized. Clicking this text will expand the section and show the
     * remaining counters.
     * </pre>
     *
     * <code>optional string expand_text = 4;</code>
     */
    public Builder setExpandText(
        java.lang.String value) {
      copyOnWrite();
      instance.setExpandText(value);
      return this;
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is minimized. Clicking this text will expand the section and show the
     * remaining counters.
     * </pre>
     *
     * <code>optional string expand_text = 4;</code>
     */
    public Builder clearExpandText() {
      copyOnWrite();
      instance.clearExpandText();
      return this;
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is minimized. Clicking this text will expand the section and show the
     * remaining counters.
     * </pre>
     *
     * <code>optional string expand_text = 4;</code>
     */
    public Builder setExpandTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setExpandTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is expanded. Clicking this text will minimize the section and hide the
     * counters inside it.
     * </pre>
     *
     * <code>optional string minimize_text = 5;</code>
     */
    public boolean hasMinimizeText() {
      return instance.hasMinimizeText();
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is expanded. Clicking this text will minimize the section and hide the
     * counters inside it.
     * </pre>
     *
     * <code>optional string minimize_text = 5;</code>
     */
    public java.lang.String getMinimizeText() {
      return instance.getMinimizeText();
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is expanded. Clicking this text will minimize the section and hide the
     * counters inside it.
     * </pre>
     *
     * <code>optional string minimize_text = 5;</code>
     */
    public com.google.protobuf.ByteString
        getMinimizeTextBytes() {
      return instance.getMinimizeTextBytes();
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is expanded. Clicking this text will minimize the section and hide the
     * counters inside it.
     * </pre>
     *
     * <code>optional string minimize_text = 5;</code>
     */
    public Builder setMinimizeText(
        java.lang.String value) {
      copyOnWrite();
      instance.setMinimizeText(value);
      return this;
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is expanded. Clicking this text will minimize the section and hide the
     * counters inside it.
     * </pre>
     *
     * <code>optional string minimize_text = 5;</code>
     */
    public Builder clearMinimizeText() {
      copyOnWrite();
      instance.clearMinimizeText();
      return this;
    }
    /**
     * <pre>
     * Text shown when counters are inside the expandable section and the section
     * is expanded. Clicking this text will minimize the section and hide the
     * counters inside it.
     * </pre>
     *
     * <code>optional string minimize_text = 5;</code>
     */
    public Builder setMinimizeTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMinimizeTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Validation rule used to check whether the current values of this input are
     * valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
     */
    public boolean hasValidationRule() {
      return instance.hasValidationRule();
    }
    /**
     * <pre>
     * Validation rule used to check whether the current values of this input are
     * valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule getValidationRule() {
      return instance.getValidationRule();
    }
    /**
     * <pre>
     * Validation rule used to check whether the current values of this input are
     * valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
     */
    public Builder setValidationRule(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
      copyOnWrite();
      instance.setValidationRule(value);
      return this;
      }
    /**
     * <pre>
     * Validation rule used to check whether the current values of this input are
     * valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
     */
    public Builder setValidationRule(
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder builderForValue) {
      copyOnWrite();
      instance.setValidationRule(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Validation rule used to check whether the current values of this input are
     * valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
     */
    public Builder mergeValidationRule(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule value) {
      copyOnWrite();
      instance.mergeValidationRule(value);
      return this;
    }
    /**
     * <pre>
     * Validation rule used to check whether the current values of this input are
     * valid.
     * </pre>
     *
     * <code>optional .autofill_assistant.CounterInputProto.ValidationRule validation_rule = 6;</code>
     */
    public Builder clearValidationRule() {  copyOnWrite();
      instance.clearValidationRule();
      return this;
    }

    /**
     * <pre>
     * The minimum value of the sum of the counters. All counters decrease button
     * will be disabled if sum &lt;= min_counters_sum.
     * </pre>
     *
     * <code>optional int64 min_counters_sum = 7 [default = -9223372036854775808];</code>
     */
    public boolean hasMinCountersSum() {
      return instance.hasMinCountersSum();
    }
    /**
     * <pre>
     * The minimum value of the sum of the counters. All counters decrease button
     * will be disabled if sum &lt;= min_counters_sum.
     * </pre>
     *
     * <code>optional int64 min_counters_sum = 7 [default = -9223372036854775808];</code>
     */
    public long getMinCountersSum() {
      return instance.getMinCountersSum();
    }
    /**
     * <pre>
     * The minimum value of the sum of the counters. All counters decrease button
     * will be disabled if sum &lt;= min_counters_sum.
     * </pre>
     *
     * <code>optional int64 min_counters_sum = 7 [default = -9223372036854775808];</code>
     */
    public Builder setMinCountersSum(long value) {
      copyOnWrite();
      instance.setMinCountersSum(value);
      return this;
    }
    /**
     * <pre>
     * The minimum value of the sum of the counters. All counters decrease button
     * will be disabled if sum &lt;= min_counters_sum.
     * </pre>
     *
     * <code>optional int64 min_counters_sum = 7 [default = -9223372036854775808];</code>
     */
    public Builder clearMinCountersSum() {
      copyOnWrite();
      instance.clearMinCountersSum();
      return this;
    }

    /**
     * <pre>
     * The maximum value of the sum of the counters. All counters increase button
     * will be disabled if sum &gt;= max_counters_sum.
     * </pre>
     *
     * <code>optional int64 max_counters_sum = 8 [default = 9223372036854775807];</code>
     */
    public boolean hasMaxCountersSum() {
      return instance.hasMaxCountersSum();
    }
    /**
     * <pre>
     * The maximum value of the sum of the counters. All counters increase button
     * will be disabled if sum &gt;= max_counters_sum.
     * </pre>
     *
     * <code>optional int64 max_counters_sum = 8 [default = 9223372036854775807];</code>
     */
    public long getMaxCountersSum() {
      return instance.getMaxCountersSum();
    }
    /**
     * <pre>
     * The maximum value of the sum of the counters. All counters increase button
     * will be disabled if sum &gt;= max_counters_sum.
     * </pre>
     *
     * <code>optional int64 max_counters_sum = 8 [default = 9223372036854775807];</code>
     */
    public Builder setMaxCountersSum(long value) {
      copyOnWrite();
      instance.setMaxCountersSum(value);
      return this;
    }
    /**
     * <pre>
     * The maximum value of the sum of the counters. All counters increase button
     * will be disabled if sum &gt;= max_counters_sum.
     * </pre>
     *
     * <code>optional int64 max_counters_sum = 8 [default = 9223372036854775807];</code>
     */
    public Builder clearMaxCountersSum() {
      copyOnWrite();
      instance.clearMaxCountersSum();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.CounterInputProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        counters_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto other = (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto) arg1;
        label_ = visitor.visitString(
            hasLabel(), label_,
            other.hasLabel(), other.label_);
        counters_= visitor.visitList(counters_, other.counters_);
        minimizedCount_ = visitor.visitInt(
            hasMinimizedCount(), minimizedCount_,
            other.hasMinimizedCount(), other.minimizedCount_);
        expandText_ = visitor.visitString(
            hasExpandText(), expandText_,
            other.hasExpandText(), other.expandText_);
        minimizeText_ = visitor.visitString(
            hasMinimizeText(), minimizeText_,
            other.hasMinimizeText(), other.minimizeText_);
        validationRule_ = visitor.visitMessage(validationRule_, other.validationRule_);
        minCountersSum_ = visitor.visitLong(
            hasMinCountersSum(), minCountersSum_,
            other.hasMinCountersSum(), other.minCountersSum_);
        maxCountersSum_ = visitor.visitLong(
            hasMaxCountersSum(), maxCountersSum_,
            other.hasMaxCountersSum(), other.maxCountersSum_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                label_ = s;
                break;
              }
              case 18: {
                if (!counters_.isModifiable()) {
                  counters_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(counters_);
                }
                counters_.add(
                    input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.Counter.parser(), extensionRegistry));
                break;
              }
              case 24: {
                bitField0_ |= 0x00000002;
                minimizedCount_ = input.readInt32();
                break;
              }
              case 34: {
                String s = input.readString();
                bitField0_ |= 0x00000004;
                expandText_ = s;
                break;
              }
              case 42: {
                String s = input.readString();
                bitField0_ |= 0x00000008;
                minimizeText_ = s;
                break;
              }
              case 50: {
                org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = validationRule_.toBuilder();
                }
                validationRule_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.ValidationRule.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(validationRule_);
                  validationRule_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
              case 56: {
                bitField0_ |= 0x00000020;
                minCountersSum_ = input.readInt64();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000040;
                maxCountersSum_ = input.readInt64();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.CounterInputProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new CounterInputProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.CounterInputProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<CounterInputProto> PARSER;

  public static com.google.protobuf.Parser<CounterInputProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

