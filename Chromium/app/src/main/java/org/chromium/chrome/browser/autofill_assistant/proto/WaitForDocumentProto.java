// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Wait for the document to be ready before proceeding.
 * Client errors:
 *   TIMED_OUT if timed out waiting for an acceptable state.
 *   ELEMENT_RESOLUTION_FAILED if the specified frame selector could not be
 *   found.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.WaitForDocumentProto}
 */
public  final class WaitForDocumentProto extends
    com.google.protobuf.GeneratedMessageLite<
        WaitForDocumentProto, WaitForDocumentProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.WaitForDocumentProto)
    WaitForDocumentProtoOrBuilder {
  private WaitForDocumentProto() {
    timeoutMs_ = 5000;
    minReadyState_ = 4;
  }
  public interface ResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.WaitForDocumentProto.Result)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The ready state found when the action started.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
     */
    boolean hasStartReadyState();
    /**
     * <pre>
     * The ready state found when the action started.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState getStartReadyState();

    /**
     * <pre>
     * The ready state found when the action ended.
     * This is filled even when the action fails, so it is not guaranteed to
     * match min_ready_state.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
     */
    boolean hasEndReadyState();
    /**
     * <pre>
     * The ready state found when the action ended.
     * This is filled even when the action fails, so it is not guaranteed to
     * match min_ready_state.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState getEndReadyState();
  }
  /**
   * Protobuf type {@code autofill_assistant.WaitForDocumentProto.Result}
   */
  public  static final class Result extends
      com.google.protobuf.GeneratedMessageLite<
          Result, Result.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.WaitForDocumentProto.Result)
      ResultOrBuilder {
    private Result() {
    }
    private int bitField0_;
    public static final int START_READY_STATE_FIELD_NUMBER = 1;
    private int startReadyState_;
    /**
     * <pre>
     * The ready state found when the action started.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
     */
    public boolean hasStartReadyState() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The ready state found when the action started.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState getStartReadyState() {
      org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState result = org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.forNumber(startReadyState_);
      return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.DOCUMENT_UNKNOWN_READY_STATE : result;
    }
    /**
     * <pre>
     * The ready state found when the action started.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
     */
    private void setStartReadyState(org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      startReadyState_ = value.getNumber();
    }
    /**
     * <pre>
     * The ready state found when the action started.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
     */
    private void clearStartReadyState() {
      bitField0_ = (bitField0_ & ~0x00000001);
      startReadyState_ = 0;
    }

    public static final int END_READY_STATE_FIELD_NUMBER = 2;
    private int endReadyState_;
    /**
     * <pre>
     * The ready state found when the action ended.
     * This is filled even when the action fails, so it is not guaranteed to
     * match min_ready_state.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
     */
    public boolean hasEndReadyState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The ready state found when the action ended.
     * This is filled even when the action fails, so it is not guaranteed to
     * match min_ready_state.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState getEndReadyState() {
      org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState result = org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.forNumber(endReadyState_);
      return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.DOCUMENT_UNKNOWN_READY_STATE : result;
    }
    /**
     * <pre>
     * The ready state found when the action ended.
     * This is filled even when the action fails, so it is not guaranteed to
     * match min_ready_state.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
     */
    private void setEndReadyState(org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      endReadyState_ = value.getNumber();
    }
    /**
     * <pre>
     * The ready state found when the action ended.
     * This is filled even when the action fails, so it is not guaranteed to
     * match min_ready_state.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
     */
    private void clearEndReadyState() {
      bitField0_ = (bitField0_ & ~0x00000002);
      endReadyState_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, startReadyState_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, endReadyState_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, startReadyState_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, endReadyState_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code autofill_assistant.WaitForDocumentProto.Result}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.WaitForDocumentProto.Result)
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.ResultOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The ready state found when the action started.
       * </pre>
       *
       * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
       */
      public boolean hasStartReadyState() {
        return instance.hasStartReadyState();
      }
      /**
       * <pre>
       * The ready state found when the action started.
       * </pre>
       *
       * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState getStartReadyState() {
        return instance.getStartReadyState();
      }
      /**
       * <pre>
       * The ready state found when the action started.
       * </pre>
       *
       * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
       */
      public Builder setStartReadyState(org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value) {
        copyOnWrite();
        instance.setStartReadyState(value);
        return this;
      }
      /**
       * <pre>
       * The ready state found when the action started.
       * </pre>
       *
       * <code>optional .autofill_assistant.DocumentReadyState start_ready_state = 1;</code>
       */
      public Builder clearStartReadyState() {
        copyOnWrite();
        instance.clearStartReadyState();
        return this;
      }

      /**
       * <pre>
       * The ready state found when the action ended.
       * This is filled even when the action fails, so it is not guaranteed to
       * match min_ready_state.
       * </pre>
       *
       * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
       */
      public boolean hasEndReadyState() {
        return instance.hasEndReadyState();
      }
      /**
       * <pre>
       * The ready state found when the action ended.
       * This is filled even when the action fails, so it is not guaranteed to
       * match min_ready_state.
       * </pre>
       *
       * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState getEndReadyState() {
        return instance.getEndReadyState();
      }
      /**
       * <pre>
       * The ready state found when the action ended.
       * This is filled even when the action fails, so it is not guaranteed to
       * match min_ready_state.
       * </pre>
       *
       * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
       */
      public Builder setEndReadyState(org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value) {
        copyOnWrite();
        instance.setEndReadyState(value);
        return this;
      }
      /**
       * <pre>
       * The ready state found when the action ended.
       * This is filled even when the action fails, so it is not guaranteed to
       * match min_ready_state.
       * </pre>
       *
       * <code>optional .autofill_assistant.DocumentReadyState end_ready_state = 2;</code>
       */
      public Builder clearEndReadyState() {
        copyOnWrite();
        instance.clearEndReadyState();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.WaitForDocumentProto.Result)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result other = (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result) arg1;
          startReadyState_ = visitor.visitInt(hasStartReadyState(), startReadyState_,
              other.hasStartReadyState(), other.startReadyState_);
          endReadyState_ = visitor.visitInt(hasEndReadyState(), endReadyState_,
              other.hasEndReadyState(), other.endReadyState_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();
                  org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value = org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(1, rawValue);
                  } else {
                    bitField0_ |= 0x00000001;
                    startReadyState_ = rawValue;
                  }
                  break;
                }
                case 16: {
                  int rawValue = input.readEnum();
                  org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value = org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(2, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    endReadyState_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.WaitForDocumentProto.Result)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Result();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.Result getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Result> PARSER;

    public static com.google.protobuf.Parser<Result> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  public static final int TIMEOUT_MS_FIELD_NUMBER = 1;
  private int timeoutMs_;
  /**
   * <pre>
   * Maximum amount of time to wait for the state to change. Set it to 0 to
   * check once and report the result immediately, without waiting.
   * </pre>
   *
   * <code>optional int32 timeout_ms = 1 [default = 5000];</code>
   */
  public boolean hasTimeoutMs() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Maximum amount of time to wait for the state to change. Set it to 0 to
   * check once and report the result immediately, without waiting.
   * </pre>
   *
   * <code>optional int32 timeout_ms = 1 [default = 5000];</code>
   */
  public int getTimeoutMs() {
    return timeoutMs_;
  }
  /**
   * <pre>
   * Maximum amount of time to wait for the state to change. Set it to 0 to
   * check once and report the result immediately, without waiting.
   * </pre>
   *
   * <code>optional int32 timeout_ms = 1 [default = 5000];</code>
   */
  private void setTimeoutMs(int value) {
    bitField0_ |= 0x00000001;
    timeoutMs_ = value;
  }
  /**
   * <pre>
   * Maximum amount of time to wait for the state to change. Set it to 0 to
   * check once and report the result immediately, without waiting.
   * </pre>
   *
   * <code>optional int32 timeout_ms = 1 [default = 5000];</code>
   */
  private void clearTimeoutMs() {
    bitField0_ = (bitField0_ & ~0x00000001);
    timeoutMs_ = 5000;
  }

  public static final int FRAME_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto frame_;
  /**
   * <pre>
   * If specified, check the document in the given frame, instead
   * of the main document.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
   */
  public boolean hasFrame() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * If specified, check the document in the given frame, instead
   * of the main document.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getFrame() {
    return frame_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance() : frame_;
  }
  /**
   * <pre>
   * If specified, check the document in the given frame, instead
   * of the main document.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
   */
  private void setFrame(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    frame_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * If specified, check the document in the given frame, instead
   * of the main document.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
   */
  private void setFrame(
      org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
    frame_ = builderForValue.build();
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * If specified, check the document in the given frame, instead
   * of the main document.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
   */
  private void mergeFrame(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (frame_ != null &&
        frame_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
      frame_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder(frame_).mergeFrom(value).buildPartial();
    } else {
      frame_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * If specified, check the document in the given frame, instead
   * of the main document.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
   */
  private void clearFrame() {  frame_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int MIN_READY_STATE_FIELD_NUMBER = 3;
  private int minReadyState_;
  /**
   * <pre>
   * The minimum ready state needed to satisfy the requirement.
   * </pre>
   *
   * <code>optional .autofill_assistant.DocumentReadyState min_ready_state = 3 [default = DOCUMENT_INTERACTIVE];</code>
   */
  public boolean hasMinReadyState() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * The minimum ready state needed to satisfy the requirement.
   * </pre>
   *
   * <code>optional .autofill_assistant.DocumentReadyState min_ready_state = 3 [default = DOCUMENT_INTERACTIVE];</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState getMinReadyState() {
    org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState result = org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.forNumber(minReadyState_);
    return result == null ? org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.DOCUMENT_INTERACTIVE : result;
  }
  /**
   * <pre>
   * The minimum ready state needed to satisfy the requirement.
   * </pre>
   *
   * <code>optional .autofill_assistant.DocumentReadyState min_ready_state = 3 [default = DOCUMENT_INTERACTIVE];</code>
   */
  private void setMinReadyState(org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value) {
    if (value == null) {
      throw new NullPointerException();
    }
    bitField0_ |= 0x00000004;
    minReadyState_ = value.getNumber();
  }
  /**
   * <pre>
   * The minimum ready state needed to satisfy the requirement.
   * </pre>
   *
   * <code>optional .autofill_assistant.DocumentReadyState min_ready_state = 3 [default = DOCUMENT_INTERACTIVE];</code>
   */
  private void clearMinReadyState() {
    bitField0_ = (bitField0_ & ~0x00000004);
    minReadyState_ = 4;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, timeoutMs_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, getFrame());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeEnum(3, minReadyState_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, timeoutMs_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getFrame());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, minReadyState_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Wait for the document to be ready before proceeding.
   * Client errors:
   *   TIMED_OUT if timed out waiting for an acceptable state.
   *   ELEMENT_RESOLUTION_FAILED if the specified frame selector could not be
   *   found.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.WaitForDocumentProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.WaitForDocumentProto)
      org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Maximum amount of time to wait for the state to change. Set it to 0 to
     * check once and report the result immediately, without waiting.
     * </pre>
     *
     * <code>optional int32 timeout_ms = 1 [default = 5000];</code>
     */
    public boolean hasTimeoutMs() {
      return instance.hasTimeoutMs();
    }
    /**
     * <pre>
     * Maximum amount of time to wait for the state to change. Set it to 0 to
     * check once and report the result immediately, without waiting.
     * </pre>
     *
     * <code>optional int32 timeout_ms = 1 [default = 5000];</code>
     */
    public int getTimeoutMs() {
      return instance.getTimeoutMs();
    }
    /**
     * <pre>
     * Maximum amount of time to wait for the state to change. Set it to 0 to
     * check once and report the result immediately, without waiting.
     * </pre>
     *
     * <code>optional int32 timeout_ms = 1 [default = 5000];</code>
     */
    public Builder setTimeoutMs(int value) {
      copyOnWrite();
      instance.setTimeoutMs(value);
      return this;
    }
    /**
     * <pre>
     * Maximum amount of time to wait for the state to change. Set it to 0 to
     * check once and report the result immediately, without waiting.
     * </pre>
     *
     * <code>optional int32 timeout_ms = 1 [default = 5000];</code>
     */
    public Builder clearTimeoutMs() {
      copyOnWrite();
      instance.clearTimeoutMs();
      return this;
    }

    /**
     * <pre>
     * If specified, check the document in the given frame, instead
     * of the main document.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
     */
    public boolean hasFrame() {
      return instance.hasFrame();
    }
    /**
     * <pre>
     * If specified, check the document in the given frame, instead
     * of the main document.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getFrame() {
      return instance.getFrame();
    }
    /**
     * <pre>
     * If specified, check the document in the given frame, instead
     * of the main document.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
     */
    public Builder setFrame(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.setFrame(value);
      return this;
      }
    /**
     * <pre>
     * If specified, check the document in the given frame, instead
     * of the main document.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
     */
    public Builder setFrame(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      copyOnWrite();
      instance.setFrame(builderForValue);
      return this;
    }
    /**
     * <pre>
     * If specified, check the document in the given frame, instead
     * of the main document.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
     */
    public Builder mergeFrame(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.mergeFrame(value);
      return this;
    }
    /**
     * <pre>
     * If specified, check the document in the given frame, instead
     * of the main document.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto frame = 2;</code>
     */
    public Builder clearFrame() {  copyOnWrite();
      instance.clearFrame();
      return this;
    }

    /**
     * <pre>
     * The minimum ready state needed to satisfy the requirement.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState min_ready_state = 3 [default = DOCUMENT_INTERACTIVE];</code>
     */
    public boolean hasMinReadyState() {
      return instance.hasMinReadyState();
    }
    /**
     * <pre>
     * The minimum ready state needed to satisfy the requirement.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState min_ready_state = 3 [default = DOCUMENT_INTERACTIVE];</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState getMinReadyState() {
      return instance.getMinReadyState();
    }
    /**
     * <pre>
     * The minimum ready state needed to satisfy the requirement.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState min_ready_state = 3 [default = DOCUMENT_INTERACTIVE];</code>
     */
    public Builder setMinReadyState(org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value) {
      copyOnWrite();
      instance.setMinReadyState(value);
      return this;
    }
    /**
     * <pre>
     * The minimum ready state needed to satisfy the requirement.
     * </pre>
     *
     * <code>optional .autofill_assistant.DocumentReadyState min_ready_state = 3 [default = DOCUMENT_INTERACTIVE];</code>
     */
    public Builder clearMinReadyState() {
      copyOnWrite();
      instance.clearMinReadyState();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.WaitForDocumentProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto other = (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto) arg1;
        timeoutMs_ = visitor.visitInt(
            hasTimeoutMs(), timeoutMs_,
            other.hasTimeoutMs(), other.timeoutMs_);
        frame_ = visitor.visitMessage(frame_, other.frame_);
        minReadyState_ = visitor.visitInt(hasMinReadyState(), minReadyState_,
            other.hasMinReadyState(), other.minReadyState_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                timeoutMs_ = input.readInt32();
                break;
              }
              case 18: {
                org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = frame_.toBuilder();
                }
                frame_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(frame_);
                  frame_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 24: {
                int rawValue = input.readEnum();
                org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState value = org.chromium.chrome.browser.autofill_assistant.proto.DocumentReadyState.forNumber(rawValue);
                if (value == null) {
                  super.mergeVarintField(3, rawValue);
                } else {
                  bitField0_ |= 0x00000004;
                  minReadyState_ = rawValue;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.WaitForDocumentProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new WaitForDocumentProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDocumentProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<WaitForDocumentProto> PARSER;

  public static com.google.protobuf.Parser<WaitForDocumentProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

