// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Ask Chrome to wait for an element in the DOM. This can be used to only
 * proceed to the next action once the page is ready.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.WaitForDomProto}
 */
public  final class WaitForDomProto extends
    com.google.protobuf.GeneratedMessageLite<
        WaitForDomProto, WaitForDomProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.WaitForDomProto)
    WaitForDomProtoOrBuilder {
  private WaitForDomProto() {
  }
  public interface ElementConditionsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.WaitForDomProto.ElementConditions)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition> 
        getConditionsList();
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition getConditions(int index);
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    int getConditionsCount();
  }
  /**
   * <pre>
   * Multiple element conditions.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.WaitForDomProto.ElementConditions}
   */
  public  static final class ElementConditions extends
      com.google.protobuf.GeneratedMessageLite<
          ElementConditions, ElementConditions.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.WaitForDomProto.ElementConditions)
      ElementConditionsOrBuilder {
    private ElementConditions() {
      conditions_ = emptyProtobufList();
    }
    public static final int CONDITIONS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition> conditions_;
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition> getConditionsList() {
      return conditions_;
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    public java.util.List<? extends org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditionOrBuilder> 
        getConditionsOrBuilderList() {
      return conditions_;
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    public int getConditionsCount() {
      return conditions_.size();
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition getConditions(int index) {
      return conditions_.get(index);
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditionOrBuilder getConditionsOrBuilder(
        int index) {
      return conditions_.get(index);
    }
    private void ensureConditionsIsMutable() {
      if (!conditions_.isModifiable()) {
        conditions_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(conditions_);
       }
    }

    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void setConditions(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureConditionsIsMutable();
      conditions_.set(index, value);
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void setConditions(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.Builder builderForValue) {
      ensureConditionsIsMutable();
      conditions_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void addConditions(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureConditionsIsMutable();
      conditions_.add(value);
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void addConditions(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureConditionsIsMutable();
      conditions_.add(index, value);
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void addConditions(
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.Builder builderForValue) {
      ensureConditionsIsMutable();
      conditions_.add(builderForValue.build());
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void addConditions(
        int index, org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.Builder builderForValue) {
      ensureConditionsIsMutable();
      conditions_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void addAllConditions(
        java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition> values) {
      ensureConditionsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, conditions_);
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void clearConditions() {
      conditions_ = emptyProtobufList();
    }
    /**
     * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
     */
    private void removeConditions(int index) {
      ensureConditionsIsMutable();
      conditions_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < conditions_.size(); i++) {
        output.writeMessage(1, conditions_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < conditions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, conditions_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Multiple element conditions.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.WaitForDomProto.ElementConditions}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.WaitForDomProto.ElementConditions)
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditionsOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public java.util.List<org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition> getConditionsList() {
        return java.util.Collections.unmodifiableList(
            instance.getConditionsList());
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public int getConditionsCount() {
        return instance.getConditionsCount();
      }/**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition getConditions(int index) {
        return instance.getConditions(index);
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder setConditions(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition value) {
        copyOnWrite();
        instance.setConditions(index, value);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder setConditions(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.Builder builderForValue) {
        copyOnWrite();
        instance.setConditions(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder addConditions(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition value) {
        copyOnWrite();
        instance.addConditions(value);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder addConditions(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition value) {
        copyOnWrite();
        instance.addConditions(index, value);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder addConditions(
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.Builder builderForValue) {
        copyOnWrite();
        instance.addConditions(builderForValue);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder addConditions(
          int index, org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.Builder builderForValue) {
        copyOnWrite();
        instance.addConditions(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder addAllConditions(
          java.lang.Iterable<? extends org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition> values) {
        copyOnWrite();
        instance.addAllConditions(values);
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder clearConditions() {
        copyOnWrite();
        instance.clearConditions();
        return this;
      }
      /**
       * <code>repeated .autofill_assistant.WaitForDomProto.ElementCondition conditions = 1;</code>
       */
      public Builder removeConditions(int index) {
        copyOnWrite();
        instance.removeConditions(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.WaitForDomProto.ElementConditions)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          conditions_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions other = (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) arg1;
          conditions_= visitor.visitList(conditions_, other.conditions_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!conditions_.isModifiable()) {
                    conditions_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(conditions_);
                  }
                  conditions_.add(
                      input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.WaitForDomProto.ElementConditions)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ElementConditions();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ElementConditions> PARSER;

    public static com.google.protobuf.Parser<ElementConditions> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ElementConditionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.WaitForDomProto.ElementCondition)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * There must be at least one matching element.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
     */
    boolean hasMustMatch();
    /**
     * <pre>
     * There must be at least one matching element.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getMustMatch();

    /**
     * <pre>
     * There must not be any matching elements.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
     */
    boolean hasMustNotMatch();
    /**
     * <pre>
     * There must not be any matching elements.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
     */
    org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getMustNotMatch();

    /**
     * <pre>
     * If this condition is met and this is nonempty, put the following payload
     * into the result.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    boolean hasServerPayload();
    /**
     * <pre>
     * If this condition is met and this is nonempty, put the following payload
     * into the result.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    com.google.protobuf.ByteString getServerPayload();

    public org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.ConditionCase getConditionCase();
  }
  /**
   * <pre>
   * A single element condition.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.WaitForDomProto.ElementCondition}
   */
  public  static final class ElementCondition extends
      com.google.protobuf.GeneratedMessageLite<
          ElementCondition, ElementCondition.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.WaitForDomProto.ElementCondition)
      ElementConditionOrBuilder {
    private ElementCondition() {
      serverPayload_ = com.google.protobuf.ByteString.EMPTY;
    }
    private int bitField0_;
    private int conditionCase_ = 0;
    private java.lang.Object condition_;
    public enum ConditionCase
        implements com.google.protobuf.Internal.EnumLite {
      MUST_MATCH(1),
      MUST_NOT_MATCH(2),
      CONDITION_NOT_SET(0);
      private final int value;
      private ConditionCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConditionCase valueOf(int value) {
        return forNumber(value);
      }

      public static ConditionCase forNumber(int value) {
        switch (value) {
          case 1: return MUST_MATCH;
          case 2: return MUST_NOT_MATCH;
          case 0: return CONDITION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ConditionCase
    getConditionCase() {
      return ConditionCase.forNumber(
          conditionCase_);
    }

    private void clearCondition() {
      conditionCase_ = 0;
      condition_ = null;
    }

    public static final int MUST_MATCH_FIELD_NUMBER = 1;
    /**
     * <pre>
     * There must be at least one matching element.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
     */
    public boolean hasMustMatch() {
      return conditionCase_ == 1;
    }
    /**
     * <pre>
     * There must be at least one matching element.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getMustMatch() {
      if (conditionCase_ == 1) {
         return (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_;
      }
      return org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance();
    }
    /**
     * <pre>
     * There must be at least one matching element.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
     */
    private void setMustMatch(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      condition_ = value;
      conditionCase_ = 1;
    }
    /**
     * <pre>
     * There must be at least one matching element.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
     */
    private void setMustMatch(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      condition_ = builderForValue.build();
      conditionCase_ = 1;
    }
    /**
     * <pre>
     * There must be at least one matching element.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
     */
    private void mergeMustMatch(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      if (conditionCase_ == 1 &&
          condition_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
        condition_ = org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_)
            .mergeFrom(value).buildPartial();
      } else {
        condition_ = value;
      }
      conditionCase_ = 1;
    }
    /**
     * <pre>
     * There must be at least one matching element.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
     */
    private void clearMustMatch() {
      if (conditionCase_ == 1) {
        conditionCase_ = 0;
        condition_ = null;
      }
    }

    public static final int MUST_NOT_MATCH_FIELD_NUMBER = 2;
    /**
     * <pre>
     * There must not be any matching elements.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
     */
    public boolean hasMustNotMatch() {
      return conditionCase_ == 2;
    }
    /**
     * <pre>
     * There must not be any matching elements.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getMustNotMatch() {
      if (conditionCase_ == 2) {
         return (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_;
      }
      return org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance();
    }
    /**
     * <pre>
     * There must not be any matching elements.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
     */
    private void setMustNotMatch(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      condition_ = value;
      conditionCase_ = 2;
    }
    /**
     * <pre>
     * There must not be any matching elements.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
     */
    private void setMustNotMatch(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      condition_ = builderForValue.build();
      conditionCase_ = 2;
    }
    /**
     * <pre>
     * There must not be any matching elements.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
     */
    private void mergeMustNotMatch(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      if (conditionCase_ == 2 &&
          condition_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
        condition_ = org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_)
            .mergeFrom(value).buildPartial();
      } else {
        condition_ = value;
      }
      conditionCase_ = 2;
    }
    /**
     * <pre>
     * There must not be any matching elements.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
     */
    private void clearMustNotMatch() {
      if (conditionCase_ == 2) {
        conditionCase_ = 0;
        condition_ = null;
      }
    }

    public static final int SERVER_PAYLOAD_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString serverPayload_;
    /**
     * <pre>
     * If this condition is met and this is nonempty, put the following payload
     * into the result.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    public boolean hasServerPayload() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * If this condition is met and this is nonempty, put the following payload
     * into the result.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    public com.google.protobuf.ByteString getServerPayload() {
      return serverPayload_;
    }
    /**
     * <pre>
     * If this condition is met and this is nonempty, put the following payload
     * into the result.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    private void setServerPayload(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      serverPayload_ = value;
    }
    /**
     * <pre>
     * If this condition is met and this is nonempty, put the following payload
     * into the result.
     * </pre>
     *
     * <code>optional bytes server_payload = 5;</code>
     */
    private void clearServerPayload() {
      bitField0_ = (bitField0_ & ~0x00000004);
      serverPayload_ = getDefaultInstance().getServerPayload();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (conditionCase_ == 1) {
        output.writeMessage(1, (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_);
      }
      if (conditionCase_ == 2) {
        output.writeMessage(2, (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(5, serverPayload_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (conditionCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_);
      }
      if (conditionCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, serverPayload_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A single element condition.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.WaitForDomProto.ElementCondition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.WaitForDomProto.ElementCondition)
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditionOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ConditionCase
          getConditionCase() {
        return instance.getConditionCase();
      }

      public Builder clearCondition() {
        copyOnWrite();
        instance.clearCondition();
        return this;
      }


      /**
       * <pre>
       * There must be at least one matching element.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
       */
      public boolean hasMustMatch() {
        return instance.hasMustMatch();
      }
      /**
       * <pre>
       * There must be at least one matching element.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getMustMatch() {
        return instance.getMustMatch();
      }
      /**
       * <pre>
       * There must be at least one matching element.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
       */
      public Builder setMustMatch(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
        copyOnWrite();
        instance.setMustMatch(value);
        return this;
      }
      /**
       * <pre>
       * There must be at least one matching element.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
       */
      public Builder setMustMatch(
          org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
        copyOnWrite();
        instance.setMustMatch(builderForValue);
        return this;
      }
      /**
       * <pre>
       * There must be at least one matching element.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
       */
      public Builder mergeMustMatch(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
        copyOnWrite();
        instance.mergeMustMatch(value);
        return this;
      }
      /**
       * <pre>
       * There must be at least one matching element.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_match = 1;</code>
       */
      public Builder clearMustMatch() {
        copyOnWrite();
        instance.clearMustMatch();
        return this;
      }

      /**
       * <pre>
       * There must not be any matching elements.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
       */
      public boolean hasMustNotMatch() {
        return instance.hasMustNotMatch();
      }
      /**
       * <pre>
       * There must not be any matching elements.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
       */
      public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getMustNotMatch() {
        return instance.getMustNotMatch();
      }
      /**
       * <pre>
       * There must not be any matching elements.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
       */
      public Builder setMustNotMatch(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
        copyOnWrite();
        instance.setMustNotMatch(value);
        return this;
      }
      /**
       * <pre>
       * There must not be any matching elements.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
       */
      public Builder setMustNotMatch(
          org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
        copyOnWrite();
        instance.setMustNotMatch(builderForValue);
        return this;
      }
      /**
       * <pre>
       * There must not be any matching elements.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
       */
      public Builder mergeMustNotMatch(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
        copyOnWrite();
        instance.mergeMustNotMatch(value);
        return this;
      }
      /**
       * <pre>
       * There must not be any matching elements.
       * </pre>
       *
       * <code>optional .autofill_assistant.ElementReferenceProto must_not_match = 2;</code>
       */
      public Builder clearMustNotMatch() {
        copyOnWrite();
        instance.clearMustNotMatch();
        return this;
      }

      /**
       * <pre>
       * If this condition is met and this is nonempty, put the following payload
       * into the result.
       * </pre>
       *
       * <code>optional bytes server_payload = 5;</code>
       */
      public boolean hasServerPayload() {
        return instance.hasServerPayload();
      }
      /**
       * <pre>
       * If this condition is met and this is nonempty, put the following payload
       * into the result.
       * </pre>
       *
       * <code>optional bytes server_payload = 5;</code>
       */
      public com.google.protobuf.ByteString getServerPayload() {
        return instance.getServerPayload();
      }
      /**
       * <pre>
       * If this condition is met and this is nonempty, put the following payload
       * into the result.
       * </pre>
       *
       * <code>optional bytes server_payload = 5;</code>
       */
      public Builder setServerPayload(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setServerPayload(value);
        return this;
      }
      /**
       * <pre>
       * If this condition is met and this is nonempty, put the following payload
       * into the result.
       * </pre>
       *
       * <code>optional bytes server_payload = 5;</code>
       */
      public Builder clearServerPayload() {
        copyOnWrite();
        instance.clearServerPayload();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.WaitForDomProto.ElementCondition)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition other = (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition) arg1;
          serverPayload_ = visitor.visitByteString(
              hasServerPayload(), serverPayload_,
              other.hasServerPayload(), other.serverPayload_);
          switch (other.getConditionCase()) {
            case MUST_MATCH: {
              condition_ = visitor.visitOneofMessage(
                  conditionCase_ == 1,
                  condition_,
                  other.condition_);
              break;
            }
            case MUST_NOT_MATCH: {
              condition_ = visitor.visitOneofMessage(
                  conditionCase_ == 2,
                  condition_,
                  other.condition_);
              break;
            }
            case CONDITION_NOT_SET: {
              visitor.visitOneofNotSet(conditionCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.conditionCase_ != 0) {
              conditionCase_ = other.conditionCase_;
            }
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                  if (conditionCase_ == 1) {
                    subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_).toBuilder();
                  }
                  condition_ =
                       input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_);
                    condition_ = subBuilder.buildPartial();
                  }
                  conditionCase_ = 1;
                  break;
                }
                case 18: {
                  org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                  if (conditionCase_ == 2) {
                    subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_).toBuilder();
                  }
                  condition_ =
                       input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) condition_);
                    condition_ = subBuilder.buildPartial();
                  }
                  conditionCase_ = 2;
                  break;
                }
                case 42: {
                  bitField0_ |= 0x00000004;
                  serverPayload_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.WaitForDomProto.ElementCondition)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ElementCondition();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementCondition getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ElementCondition> PARSER;

    public static com.google.protobuf.Parser<ElementCondition> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:autofill_assistant.WaitForDomProto.Result)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getMatchingConditionPayloadsList();
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    int getMatchingConditionPayloadsCount();
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    com.google.protobuf.ByteString getMatchingConditionPayloads(int index);
  }
  /**
   * <pre>
   * Result to include into ProcessedActionProto.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.WaitForDomProto.Result}
   */
  public  static final class Result extends
      com.google.protobuf.GeneratedMessageLite<
          Result, Result.Builder> implements
      // @@protoc_insertion_point(message_implements:autofill_assistant.WaitForDomProto.Result)
      ResultOrBuilder {
    private Result() {
      matchingConditionPayloads_ = emptyProtobufList();
    }
    public static final int MATCHING_CONDITION_PAYLOADS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> matchingConditionPayloads_;
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getMatchingConditionPayloadsList() {
      return matchingConditionPayloads_;
    }
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    public int getMatchingConditionPayloadsCount() {
      return matchingConditionPayloads_.size();
    }
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    public com.google.protobuf.ByteString getMatchingConditionPayloads(int index) {
      return matchingConditionPayloads_.get(index);
    }
    private void ensureMatchingConditionPayloadsIsMutable() {
      if (!matchingConditionPayloads_.isModifiable()) {
        matchingConditionPayloads_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(matchingConditionPayloads_);
       }
    }
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    private void setMatchingConditionPayloads(
        int index, com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureMatchingConditionPayloadsIsMutable();
      matchingConditionPayloads_.set(index, value);
    }
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    private void addMatchingConditionPayloads(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureMatchingConditionPayloadsIsMutable();
      matchingConditionPayloads_.add(value);
    }
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    private void addAllMatchingConditionPayloads(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureMatchingConditionPayloadsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, matchingConditionPayloads_);
    }
    /**
     * <pre>
     * Payload of all matching conditions, if one is set.
     * </pre>
     *
     * <code>repeated bytes matching_condition_payloads = 1;</code>
     */
    private void clearMatchingConditionPayloads() {
      matchingConditionPayloads_ = emptyProtobufList();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < matchingConditionPayloads_.size(); i++) {
        output.writeBytes(1, matchingConditionPayloads_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < matchingConditionPayloads_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(matchingConditionPayloads_.get(i));
        }
        size += dataSize;
        size += 1 * getMatchingConditionPayloadsList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Result to include into ProcessedActionProto.
     * </pre>
     *
     * Protobuf type {@code autofill_assistant.WaitForDomProto.Result}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result, Builder> implements
        // @@protoc_insertion_point(builder_implements:autofill_assistant.WaitForDomProto.Result)
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ResultOrBuilder {
      // Construct using org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Payload of all matching conditions, if one is set.
       * </pre>
       *
       * <code>repeated bytes matching_condition_payloads = 1;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getMatchingConditionPayloadsList() {
        return java.util.Collections.unmodifiableList(
            instance.getMatchingConditionPayloadsList());
      }
      /**
       * <pre>
       * Payload of all matching conditions, if one is set.
       * </pre>
       *
       * <code>repeated bytes matching_condition_payloads = 1;</code>
       */
      public int getMatchingConditionPayloadsCount() {
        return instance.getMatchingConditionPayloadsCount();
      }
      /**
       * <pre>
       * Payload of all matching conditions, if one is set.
       * </pre>
       *
       * <code>repeated bytes matching_condition_payloads = 1;</code>
       */
      public com.google.protobuf.ByteString getMatchingConditionPayloads(int index) {
        return instance.getMatchingConditionPayloads(index);
      }
      /**
       * <pre>
       * Payload of all matching conditions, if one is set.
       * </pre>
       *
       * <code>repeated bytes matching_condition_payloads = 1;</code>
       */
      public Builder setMatchingConditionPayloads(
          int index, com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMatchingConditionPayloads(index, value);
        return this;
      }
      /**
       * <pre>
       * Payload of all matching conditions, if one is set.
       * </pre>
       *
       * <code>repeated bytes matching_condition_payloads = 1;</code>
       */
      public Builder addMatchingConditionPayloads(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addMatchingConditionPayloads(value);
        return this;
      }
      /**
       * <pre>
       * Payload of all matching conditions, if one is set.
       * </pre>
       *
       * <code>repeated bytes matching_condition_payloads = 1;</code>
       */
      public Builder addAllMatchingConditionPayloads(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.addAllMatchingConditionPayloads(values);
        return this;
      }
      /**
       * <pre>
       * Payload of all matching conditions, if one is set.
       * </pre>
       *
       * <code>repeated bytes matching_condition_payloads = 1;</code>
       */
      public Builder clearMatchingConditionPayloads() {
        copyOnWrite();
        instance.clearMatchingConditionPayloads();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:autofill_assistant.WaitForDomProto.Result)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          matchingConditionPayloads_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result other = (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result) arg1;
          matchingConditionPayloads_= visitor.visitList(matchingConditionPayloads_, other.matchingConditionPayloads_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!matchingConditionPayloads_.isModifiable()) {
                    matchingConditionPayloads_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(matchingConditionPayloads_);
                  }
                  matchingConditionPayloads_.add(input.readBytes());
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:autofill_assistant.WaitForDomProto.Result)
    private static final org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Result();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.Result getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Result> PARSER;

    public static com.google.protobuf.Parser<Result> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  private int waitOnCase_ = 0;
  private java.lang.Object waitOn_;
  public enum WaitOnCase
      implements com.google.protobuf.Internal.EnumLite {
    WAIT_UNTIL(5),
    WAIT_WHILE(6),
    WAIT_FOR_ANY(7),
    WAIT_FOR_ALL(8),
    WAITON_NOT_SET(0);
    private final int value;
    private WaitOnCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static WaitOnCase valueOf(int value) {
      return forNumber(value);
    }

    public static WaitOnCase forNumber(int value) {
      switch (value) {
        case 5: return WAIT_UNTIL;
        case 6: return WAIT_WHILE;
        case 7: return WAIT_FOR_ANY;
        case 8: return WAIT_FOR_ALL;
        case 0: return WAITON_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public WaitOnCase
  getWaitOnCase() {
    return WaitOnCase.forNumber(
        waitOnCase_);
  }

  private void clearWaitOn() {
    waitOnCase_ = 0;
    waitOn_ = null;
  }

  public static final int TIMEOUT_MS_FIELD_NUMBER = 1;
  private int timeoutMs_;
  /**
   * <pre>
   * Fail after waiting this amount of time.
   * </pre>
   *
   * <code>optional int32 timeout_ms = 1;</code>
   */
  public boolean hasTimeoutMs() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * Fail after waiting this amount of time.
   * </pre>
   *
   * <code>optional int32 timeout_ms = 1;</code>
   */
  public int getTimeoutMs() {
    return timeoutMs_;
  }
  /**
   * <pre>
   * Fail after waiting this amount of time.
   * </pre>
   *
   * <code>optional int32 timeout_ms = 1;</code>
   */
  private void setTimeoutMs(int value) {
    bitField0_ |= 0x00000001;
    timeoutMs_ = value;
  }
  /**
   * <pre>
   * Fail after waiting this amount of time.
   * </pre>
   *
   * <code>optional int32 timeout_ms = 1;</code>
   */
  private void clearTimeoutMs() {
    bitField0_ = (bitField0_ & ~0x00000001);
    timeoutMs_ = 0;
  }

  public static final int WAIT_UNTIL_FIELD_NUMBER = 5;
  /**
   * <pre>
   * Wait until there exists at least one element that matches the given
   * selector.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
   */
  public boolean hasWaitUntil() {
    return waitOnCase_ == 5;
  }
  /**
   * <pre>
   * Wait until there exists at least one element that matches the given
   * selector.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getWaitUntil() {
    if (waitOnCase_ == 5) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance();
  }
  /**
   * <pre>
   * Wait until there exists at least one element that matches the given
   * selector.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
   */
  private void setWaitUntil(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    waitOn_ = value;
    waitOnCase_ = 5;
  }
  /**
   * <pre>
   * Wait until there exists at least one element that matches the given
   * selector.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
   */
  private void setWaitUntil(
      org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
    waitOn_ = builderForValue.build();
    waitOnCase_ = 5;
  }
  /**
   * <pre>
   * Wait until there exists at least one element that matches the given
   * selector.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
   */
  private void mergeWaitUntil(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (waitOnCase_ == 5 &&
        waitOn_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
      waitOn_ = org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_)
          .mergeFrom(value).buildPartial();
    } else {
      waitOn_ = value;
    }
    waitOnCase_ = 5;
  }
  /**
   * <pre>
   * Wait until there exists at least one element that matches the given
   * selector.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
   */
  private void clearWaitUntil() {
    if (waitOnCase_ == 5) {
      waitOnCase_ = 0;
      waitOn_ = null;
    }
  }

  public static final int WAIT_WHILE_FIELD_NUMBER = 6;
  /**
   * <pre>
   * Wait as long as there's at least one element that matches the given
   * reference.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
   */
  public boolean hasWaitWhile() {
    return waitOnCase_ == 6;
  }
  /**
   * <pre>
   * Wait as long as there's at least one element that matches the given
   * reference.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getWaitWhile() {
    if (waitOnCase_ == 6) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance();
  }
  /**
   * <pre>
   * Wait as long as there's at least one element that matches the given
   * reference.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
   */
  private void setWaitWhile(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    waitOn_ = value;
    waitOnCase_ = 6;
  }
  /**
   * <pre>
   * Wait as long as there's at least one element that matches the given
   * reference.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
   */
  private void setWaitWhile(
      org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
    waitOn_ = builderForValue.build();
    waitOnCase_ = 6;
  }
  /**
   * <pre>
   * Wait as long as there's at least one element that matches the given
   * reference.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
   */
  private void mergeWaitWhile(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
    if (waitOnCase_ == 6 &&
        waitOn_ != org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.getDefaultInstance()) {
      waitOn_ = org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_)
          .mergeFrom(value).buildPartial();
    } else {
      waitOn_ = value;
    }
    waitOnCase_ = 6;
  }
  /**
   * <pre>
   * Wait as long as there's at least one element that matches the given
   * reference.
   * </pre>
   *
   * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
   */
  private void clearWaitWhile() {
    if (waitOnCase_ == 6) {
      waitOnCase_ = 0;
      waitOn_ = null;
    }
  }

  public static final int WAIT_FOR_ANY_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Wait until at least one condition is met.
   * If, at the end of the timeout, no conditions are not met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
   */
  public boolean hasWaitForAny() {
    return waitOnCase_ == 7;
  }
  /**
   * <pre>
   * Wait until at least one condition is met.
   * If, at the end of the timeout, no conditions are not met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions getWaitForAny() {
    if (waitOnCase_ == 7) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.getDefaultInstance();
  }
  /**
   * <pre>
   * Wait until at least one condition is met.
   * If, at the end of the timeout, no conditions are not met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
   */
  private void setWaitForAny(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions value) {
    if (value == null) {
      throw new NullPointerException();
    }
    waitOn_ = value;
    waitOnCase_ = 7;
  }
  /**
   * <pre>
   * Wait until at least one condition is met.
   * If, at the end of the timeout, no conditions are not met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
   */
  private void setWaitForAny(
      org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.Builder builderForValue) {
    waitOn_ = builderForValue.build();
    waitOnCase_ = 7;
  }
  /**
   * <pre>
   * Wait until at least one condition is met.
   * If, at the end of the timeout, no conditions are not met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
   */
  private void mergeWaitForAny(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions value) {
    if (waitOnCase_ == 7 &&
        waitOn_ != org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.getDefaultInstance()) {
      waitOn_ = org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_)
          .mergeFrom(value).buildPartial();
    } else {
      waitOn_ = value;
    }
    waitOnCase_ = 7;
  }
  /**
   * <pre>
   * Wait until at least one condition is met.
   * If, at the end of the timeout, no conditions are not met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
   */
  private void clearWaitForAny() {
    if (waitOnCase_ == 7) {
      waitOnCase_ = 0;
      waitOn_ = null;
    }
  }

  public static final int WAIT_FOR_ALL_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Wait until all conditions are met.
   * If, at the end of the timeout, not all condition are met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
   */
  public boolean hasWaitForAll() {
    return waitOnCase_ == 8;
  }
  /**
   * <pre>
   * Wait until all conditions are met.
   * If, at the end of the timeout, not all condition are met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions getWaitForAll() {
    if (waitOnCase_ == 8) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.getDefaultInstance();
  }
  /**
   * <pre>
   * Wait until all conditions are met.
   * If, at the end of the timeout, not all condition are met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
   */
  private void setWaitForAll(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions value) {
    if (value == null) {
      throw new NullPointerException();
    }
    waitOn_ = value;
    waitOnCase_ = 8;
  }
  /**
   * <pre>
   * Wait until all conditions are met.
   * If, at the end of the timeout, not all condition are met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
   */
  private void setWaitForAll(
      org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.Builder builderForValue) {
    waitOn_ = builderForValue.build();
    waitOnCase_ = 8;
  }
  /**
   * <pre>
   * Wait until all conditions are met.
   * If, at the end of the timeout, not all condition are met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
   */
  private void mergeWaitForAll(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions value) {
    if (waitOnCase_ == 8 &&
        waitOn_ != org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.getDefaultInstance()) {
      waitOn_ = org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_)
          .mergeFrom(value).buildPartial();
    } else {
      waitOn_ = value;
    }
    waitOnCase_ = 8;
  }
  /**
   * <pre>
   * Wait until all conditions are met.
   * If, at the end of the timeout, not all condition are met, the action
   * returns ELEMENT_RESOLUTION_FAILED.
   * </pre>
   *
   * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
   */
  private void clearWaitForAll() {
    if (waitOnCase_ == 8) {
      waitOnCase_ = 0;
      waitOn_ = null;
    }
  }

  public static final int ALLOW_INTERRUPT_FIELD_NUMBER = 3;
  private boolean allowInterrupt_;
  /**
   * <pre>
   * If true, run scripts flagged with 'interrupt=true' as soon as their
   * preconditions match.
   * </pre>
   *
   * <code>optional bool allow_interrupt = 3;</code>
   */
  public boolean hasAllowInterrupt() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * If true, run scripts flagged with 'interrupt=true' as soon as their
   * preconditions match.
   * </pre>
   *
   * <code>optional bool allow_interrupt = 3;</code>
   */
  public boolean getAllowInterrupt() {
    return allowInterrupt_;
  }
  /**
   * <pre>
   * If true, run scripts flagged with 'interrupt=true' as soon as their
   * preconditions match.
   * </pre>
   *
   * <code>optional bool allow_interrupt = 3;</code>
   */
  private void setAllowInterrupt(boolean value) {
    bitField0_ |= 0x00000020;
    allowInterrupt_ = value;
  }
  /**
   * <pre>
   * If true, run scripts flagged with 'interrupt=true' as soon as their
   * preconditions match.
   * </pre>
   *
   * <code>optional bool allow_interrupt = 3;</code>
   */
  private void clearAllowInterrupt() {
    bitField0_ = (bitField0_ & ~0x00000020);
    allowInterrupt_ = false;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeInt32(1, timeoutMs_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeBool(3, allowInterrupt_);
    }
    if (waitOnCase_ == 5) {
      output.writeMessage(5, (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_);
    }
    if (waitOnCase_ == 6) {
      output.writeMessage(6, (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_);
    }
    if (waitOnCase_ == 7) {
      output.writeMessage(7, (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_);
    }
    if (waitOnCase_ == 8) {
      output.writeMessage(8, (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, timeoutMs_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, allowInterrupt_);
    }
    if (waitOnCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_);
    }
    if (waitOnCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_);
    }
    if (waitOnCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_);
    }
    if (waitOnCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Ask Chrome to wait for an element in the DOM. This can be used to only
   * proceed to the next action once the page is ready.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.WaitForDomProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.WaitForDomProto)
      org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public WaitOnCase
        getWaitOnCase() {
      return instance.getWaitOnCase();
    }

    public Builder clearWaitOn() {
      copyOnWrite();
      instance.clearWaitOn();
      return this;
    }


    /**
     * <pre>
     * Fail after waiting this amount of time.
     * </pre>
     *
     * <code>optional int32 timeout_ms = 1;</code>
     */
    public boolean hasTimeoutMs() {
      return instance.hasTimeoutMs();
    }
    /**
     * <pre>
     * Fail after waiting this amount of time.
     * </pre>
     *
     * <code>optional int32 timeout_ms = 1;</code>
     */
    public int getTimeoutMs() {
      return instance.getTimeoutMs();
    }
    /**
     * <pre>
     * Fail after waiting this amount of time.
     * </pre>
     *
     * <code>optional int32 timeout_ms = 1;</code>
     */
    public Builder setTimeoutMs(int value) {
      copyOnWrite();
      instance.setTimeoutMs(value);
      return this;
    }
    /**
     * <pre>
     * Fail after waiting this amount of time.
     * </pre>
     *
     * <code>optional int32 timeout_ms = 1;</code>
     */
    public Builder clearTimeoutMs() {
      copyOnWrite();
      instance.clearTimeoutMs();
      return this;
    }

    /**
     * <pre>
     * Wait until there exists at least one element that matches the given
     * selector.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
     */
    public boolean hasWaitUntil() {
      return instance.hasWaitUntil();
    }
    /**
     * <pre>
     * Wait until there exists at least one element that matches the given
     * selector.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getWaitUntil() {
      return instance.getWaitUntil();
    }
    /**
     * <pre>
     * Wait until there exists at least one element that matches the given
     * selector.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
     */
    public Builder setWaitUntil(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.setWaitUntil(value);
      return this;
    }
    /**
     * <pre>
     * Wait until there exists at least one element that matches the given
     * selector.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
     */
    public Builder setWaitUntil(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      copyOnWrite();
      instance.setWaitUntil(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Wait until there exists at least one element that matches the given
     * selector.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
     */
    public Builder mergeWaitUntil(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.mergeWaitUntil(value);
      return this;
    }
    /**
     * <pre>
     * Wait until there exists at least one element that matches the given
     * selector.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_until = 5;</code>
     */
    public Builder clearWaitUntil() {
      copyOnWrite();
      instance.clearWaitUntil();
      return this;
    }

    /**
     * <pre>
     * Wait as long as there's at least one element that matches the given
     * reference.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
     */
    public boolean hasWaitWhile() {
      return instance.hasWaitWhile();
    }
    /**
     * <pre>
     * Wait as long as there's at least one element that matches the given
     * reference.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto getWaitWhile() {
      return instance.getWaitWhile();
    }
    /**
     * <pre>
     * Wait as long as there's at least one element that matches the given
     * reference.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
     */
    public Builder setWaitWhile(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.setWaitWhile(value);
      return this;
    }
    /**
     * <pre>
     * Wait as long as there's at least one element that matches the given
     * reference.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
     */
    public Builder setWaitWhile(
        org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder builderForValue) {
      copyOnWrite();
      instance.setWaitWhile(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Wait as long as there's at least one element that matches the given
     * reference.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
     */
    public Builder mergeWaitWhile(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto value) {
      copyOnWrite();
      instance.mergeWaitWhile(value);
      return this;
    }
    /**
     * <pre>
     * Wait as long as there's at least one element that matches the given
     * reference.
     * </pre>
     *
     * <code>optional .autofill_assistant.ElementReferenceProto wait_while = 6;</code>
     */
    public Builder clearWaitWhile() {
      copyOnWrite();
      instance.clearWaitWhile();
      return this;
    }

    /**
     * <pre>
     * Wait until at least one condition is met.
     * If, at the end of the timeout, no conditions are not met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
     */
    public boolean hasWaitForAny() {
      return instance.hasWaitForAny();
    }
    /**
     * <pre>
     * Wait until at least one condition is met.
     * If, at the end of the timeout, no conditions are not met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions getWaitForAny() {
      return instance.getWaitForAny();
    }
    /**
     * <pre>
     * Wait until at least one condition is met.
     * If, at the end of the timeout, no conditions are not met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
     */
    public Builder setWaitForAny(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions value) {
      copyOnWrite();
      instance.setWaitForAny(value);
      return this;
    }
    /**
     * <pre>
     * Wait until at least one condition is met.
     * If, at the end of the timeout, no conditions are not met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
     */
    public Builder setWaitForAny(
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.Builder builderForValue) {
      copyOnWrite();
      instance.setWaitForAny(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Wait until at least one condition is met.
     * If, at the end of the timeout, no conditions are not met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
     */
    public Builder mergeWaitForAny(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions value) {
      copyOnWrite();
      instance.mergeWaitForAny(value);
      return this;
    }
    /**
     * <pre>
     * Wait until at least one condition is met.
     * If, at the end of the timeout, no conditions are not met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_any = 7;</code>
     */
    public Builder clearWaitForAny() {
      copyOnWrite();
      instance.clearWaitForAny();
      return this;
    }

    /**
     * <pre>
     * Wait until all conditions are met.
     * If, at the end of the timeout, not all condition are met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
     */
    public boolean hasWaitForAll() {
      return instance.hasWaitForAll();
    }
    /**
     * <pre>
     * Wait until all conditions are met.
     * If, at the end of the timeout, not all condition are met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions getWaitForAll() {
      return instance.getWaitForAll();
    }
    /**
     * <pre>
     * Wait until all conditions are met.
     * If, at the end of the timeout, not all condition are met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
     */
    public Builder setWaitForAll(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions value) {
      copyOnWrite();
      instance.setWaitForAll(value);
      return this;
    }
    /**
     * <pre>
     * Wait until all conditions are met.
     * If, at the end of the timeout, not all condition are met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
     */
    public Builder setWaitForAll(
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.Builder builderForValue) {
      copyOnWrite();
      instance.setWaitForAll(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Wait until all conditions are met.
     * If, at the end of the timeout, not all condition are met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
     */
    public Builder mergeWaitForAll(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions value) {
      copyOnWrite();
      instance.mergeWaitForAll(value);
      return this;
    }
    /**
     * <pre>
     * Wait until all conditions are met.
     * If, at the end of the timeout, not all condition are met, the action
     * returns ELEMENT_RESOLUTION_FAILED.
     * </pre>
     *
     * <code>optional .autofill_assistant.WaitForDomProto.ElementConditions wait_for_all = 8;</code>
     */
    public Builder clearWaitForAll() {
      copyOnWrite();
      instance.clearWaitForAll();
      return this;
    }

    /**
     * <pre>
     * If true, run scripts flagged with 'interrupt=true' as soon as their
     * preconditions match.
     * </pre>
     *
     * <code>optional bool allow_interrupt = 3;</code>
     */
    public boolean hasAllowInterrupt() {
      return instance.hasAllowInterrupt();
    }
    /**
     * <pre>
     * If true, run scripts flagged with 'interrupt=true' as soon as their
     * preconditions match.
     * </pre>
     *
     * <code>optional bool allow_interrupt = 3;</code>
     */
    public boolean getAllowInterrupt() {
      return instance.getAllowInterrupt();
    }
    /**
     * <pre>
     * If true, run scripts flagged with 'interrupt=true' as soon as their
     * preconditions match.
     * </pre>
     *
     * <code>optional bool allow_interrupt = 3;</code>
     */
    public Builder setAllowInterrupt(boolean value) {
      copyOnWrite();
      instance.setAllowInterrupt(value);
      return this;
    }
    /**
     * <pre>
     * If true, run scripts flagged with 'interrupt=true' as soon as their
     * preconditions match.
     * </pre>
     *
     * <code>optional bool allow_interrupt = 3;</code>
     */
    public Builder clearAllowInterrupt() {
      copyOnWrite();
      instance.clearAllowInterrupt();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.WaitForDomProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto other = (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto) arg1;
        timeoutMs_ = visitor.visitInt(
            hasTimeoutMs(), timeoutMs_,
            other.hasTimeoutMs(), other.timeoutMs_);
        allowInterrupt_ = visitor.visitBoolean(
            hasAllowInterrupt(), allowInterrupt_,
            other.hasAllowInterrupt(), other.allowInterrupt_);
        switch (other.getWaitOnCase()) {
          case WAIT_UNTIL: {
            waitOn_ = visitor.visitOneofMessage(
                waitOnCase_ == 5,
                waitOn_,
                other.waitOn_);
            break;
          }
          case WAIT_WHILE: {
            waitOn_ = visitor.visitOneofMessage(
                waitOnCase_ == 6,
                waitOn_,
                other.waitOn_);
            break;
          }
          case WAIT_FOR_ANY: {
            waitOn_ = visitor.visitOneofMessage(
                waitOnCase_ == 7,
                waitOn_,
                other.waitOn_);
            break;
          }
          case WAIT_FOR_ALL: {
            waitOn_ = visitor.visitOneofMessage(
                waitOnCase_ == 8,
                waitOn_,
                other.waitOn_);
            break;
          }
          case WAITON_NOT_SET: {
            visitor.visitOneofNotSet(waitOnCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.waitOnCase_ != 0) {
            waitOnCase_ = other.waitOnCase_;
          }
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                timeoutMs_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000020;
                allowInterrupt_ = input.readBool();
                break;
              }
              case 42: {
                org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                if (waitOnCase_ == 5) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_).toBuilder();
                }
                waitOn_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_);
                  waitOn_ = subBuilder.buildPartial();
                }
                waitOnCase_ = 5;
                break;
              }
              case 50: {
                org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.Builder subBuilder = null;
                if (waitOnCase_ == 6) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_).toBuilder();
                }
                waitOn_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.ElementReferenceProto) waitOn_);
                  waitOn_ = subBuilder.buildPartial();
                }
                waitOnCase_ = 6;
                break;
              }
              case 58: {
                org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.Builder subBuilder = null;
                if (waitOnCase_ == 7) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_).toBuilder();
                }
                waitOn_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_);
                  waitOn_ = subBuilder.buildPartial();
                }
                waitOnCase_ = 7;
                break;
              }
              case 66: {
                org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.Builder subBuilder = null;
                if (waitOnCase_ == 8) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_).toBuilder();
                }
                waitOn_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.ElementConditions) waitOn_);
                  waitOn_ = subBuilder.buildPartial();
                }
                waitOnCase_ = 8;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.WaitForDomProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new WaitForDomProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.WaitForDomProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<WaitForDomProto> PARSER;

  public static com.google.protobuf.Parser<WaitForDomProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

