// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generic_ui.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * A drawable for use in backgrounds or in image views.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.DrawableProto}
 */
public  final class DrawableProto extends
    com.google.protobuf.GeneratedMessageLite<
        DrawableProto, DrawableProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.DrawableProto)
    DrawableProtoOrBuilder {
  private DrawableProto() {
  }
  private int bitField0_;
  private int drawableCase_ = 0;
  private java.lang.Object drawable_;
  public enum DrawableCase
      implements com.google.protobuf.Internal.EnumLite {
    RESOURCE_IDENTIFIER(1),
    BITMAP(2),
    SHAPE(3),
    DRAWABLE_NOT_SET(0);
    private final int value;
    private DrawableCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DrawableCase valueOf(int value) {
      return forNumber(value);
    }

    public static DrawableCase forNumber(int value) {
      switch (value) {
        case 1: return RESOURCE_IDENTIFIER;
        case 2: return BITMAP;
        case 3: return SHAPE;
        case 0: return DRAWABLE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public DrawableCase
  getDrawableCase() {
    return DrawableCase.forNumber(
        drawableCase_);
  }

  private void clearDrawable() {
    drawableCase_ = 0;
    drawable_ = null;
  }

  public static final int RESOURCE_IDENTIFIER_FIELD_NUMBER = 1;
  /**
   * <pre>
   * The resource identifier of a drawable.
   * </pre>
   *
   * <code>optional string resource_identifier = 1;</code>
   */
  public boolean hasResourceIdentifier() {
    return drawableCase_ == 1;
  }
  /**
   * <pre>
   * The resource identifier of a drawable.
   * </pre>
   *
   * <code>optional string resource_identifier = 1;</code>
   */
  public java.lang.String getResourceIdentifier() {
    java.lang.String ref = "";
    if (drawableCase_ == 1) {
      ref = (java.lang.String) drawable_;
    }
    return ref;
  }
  /**
   * <pre>
   * The resource identifier of a drawable.
   * </pre>
   *
   * <code>optional string resource_identifier = 1;</code>
   */
  public com.google.protobuf.ByteString
      getResourceIdentifierBytes() {
    java.lang.String ref = "";
    if (drawableCase_ == 1) {
      ref = (java.lang.String) drawable_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * The resource identifier of a drawable.
   * </pre>
   *
   * <code>optional string resource_identifier = 1;</code>
   */
  private void setResourceIdentifier(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  drawableCase_ = 1;
    drawable_ = value;
  }
  /**
   * <pre>
   * The resource identifier of a drawable.
   * </pre>
   *
   * <code>optional string resource_identifier = 1;</code>
   */
  private void clearResourceIdentifier() {
    if (drawableCase_ == 1) {
      drawableCase_ = 0;
      drawable_ = null;
    }
  }
  /**
   * <pre>
   * The resource identifier of a drawable.
   * </pre>
   *
   * <code>optional string resource_identifier = 1;</code>
   */
  private void setResourceIdentifierBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  drawableCase_ = 1;
    drawable_ = value.toStringUtf8();
  }

  public static final int BITMAP_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A bitmap retrieved from a URL.
   * </pre>
   *
   * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
   */
  public boolean hasBitmap() {
    return drawableCase_ == 2;
  }
  /**
   * <pre>
   * A bitmap retrieved from a URL.
   * </pre>
   *
   * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto getBitmap() {
    if (drawableCase_ == 2) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto) drawable_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A bitmap retrieved from a URL.
   * </pre>
   *
   * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
   */
  private void setBitmap(org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    drawable_ = value;
    drawableCase_ = 2;
  }
  /**
   * <pre>
   * A bitmap retrieved from a URL.
   * </pre>
   *
   * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
   */
  private void setBitmap(
      org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto.Builder builderForValue) {
    drawable_ = builderForValue.build();
    drawableCase_ = 2;
  }
  /**
   * <pre>
   * A bitmap retrieved from a URL.
   * </pre>
   *
   * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
   */
  private void mergeBitmap(org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto value) {
    if (drawableCase_ == 2 &&
        drawable_ != org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto.getDefaultInstance()) {
      drawable_ = org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto) drawable_)
          .mergeFrom(value).buildPartial();
    } else {
      drawable_ = value;
    }
    drawableCase_ = 2;
  }
  /**
   * <pre>
   * A bitmap retrieved from a URL.
   * </pre>
   *
   * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
   */
  private void clearBitmap() {
    if (drawableCase_ == 2) {
      drawableCase_ = 0;
      drawable_ = null;
    }
  }

  public static final int SHAPE_FIELD_NUMBER = 3;
  /**
   * <pre>
   * A shape, e.g., a rounded rectangle.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
   */
  public boolean hasShape() {
    return drawableCase_ == 3;
  }
  /**
   * <pre>
   * A shape, e.g., a rounded rectangle.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto getShape() {
    if (drawableCase_ == 3) {
       return (org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto) drawable_;
    }
    return org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto.getDefaultInstance();
  }
  /**
   * <pre>
   * A shape, e.g., a rounded rectangle.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
   */
  private void setShape(org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    drawable_ = value;
    drawableCase_ = 3;
  }
  /**
   * <pre>
   * A shape, e.g., a rounded rectangle.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
   */
  private void setShape(
      org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto.Builder builderForValue) {
    drawable_ = builderForValue.build();
    drawableCase_ = 3;
  }
  /**
   * <pre>
   * A shape, e.g., a rounded rectangle.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
   */
  private void mergeShape(org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto value) {
    if (drawableCase_ == 3 &&
        drawable_ != org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto.getDefaultInstance()) {
      drawable_ = org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto.newBuilder((org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto) drawable_)
          .mergeFrom(value).buildPartial();
    } else {
      drawable_ = value;
    }
    drawableCase_ = 3;
  }
  /**
   * <pre>
   * A shape, e.g., a rounded rectangle.
   * </pre>
   *
   * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
   */
  private void clearShape() {
    if (drawableCase_ == 3) {
      drawableCase_ = 0;
      drawable_ = null;
    }
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (drawableCase_ == 1) {
      output.writeString(1, getResourceIdentifier());
    }
    if (drawableCase_ == 2) {
      output.writeMessage(2, (org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto) drawable_);
    }
    if (drawableCase_ == 3) {
      output.writeMessage(3, (org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto) drawable_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (drawableCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getResourceIdentifier());
    }
    if (drawableCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto) drawable_);
    }
    if (drawableCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto) drawable_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A drawable for use in backgrounds or in image views.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.DrawableProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.DrawableProto)
      org.chromium.chrome.browser.autofill_assistant.proto.DrawableProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public DrawableCase
        getDrawableCase() {
      return instance.getDrawableCase();
    }

    public Builder clearDrawable() {
      copyOnWrite();
      instance.clearDrawable();
      return this;
    }


    /**
     * <pre>
     * The resource identifier of a drawable.
     * </pre>
     *
     * <code>optional string resource_identifier = 1;</code>
     */
    public boolean hasResourceIdentifier() {
      return instance.hasResourceIdentifier();
    }
    /**
     * <pre>
     * The resource identifier of a drawable.
     * </pre>
     *
     * <code>optional string resource_identifier = 1;</code>
     */
    public java.lang.String getResourceIdentifier() {
      return instance.getResourceIdentifier();
    }
    /**
     * <pre>
     * The resource identifier of a drawable.
     * </pre>
     *
     * <code>optional string resource_identifier = 1;</code>
     */
    public com.google.protobuf.ByteString
        getResourceIdentifierBytes() {
      return instance.getResourceIdentifierBytes();
    }
    /**
     * <pre>
     * The resource identifier of a drawable.
     * </pre>
     *
     * <code>optional string resource_identifier = 1;</code>
     */
    public Builder setResourceIdentifier(
        java.lang.String value) {
      copyOnWrite();
      instance.setResourceIdentifier(value);
      return this;
    }
    /**
     * <pre>
     * The resource identifier of a drawable.
     * </pre>
     *
     * <code>optional string resource_identifier = 1;</code>
     */
    public Builder clearResourceIdentifier() {
      copyOnWrite();
      instance.clearResourceIdentifier();
      return this;
    }
    /**
     * <pre>
     * The resource identifier of a drawable.
     * </pre>
     *
     * <code>optional string resource_identifier = 1;</code>
     */
    public Builder setResourceIdentifierBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setResourceIdentifierBytes(value);
      return this;
    }

    /**
     * <pre>
     * A bitmap retrieved from a URL.
     * </pre>
     *
     * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
     */
    public boolean hasBitmap() {
      return instance.hasBitmap();
    }
    /**
     * <pre>
     * A bitmap retrieved from a URL.
     * </pre>
     *
     * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto getBitmap() {
      return instance.getBitmap();
    }
    /**
     * <pre>
     * A bitmap retrieved from a URL.
     * </pre>
     *
     * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
     */
    public Builder setBitmap(org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto value) {
      copyOnWrite();
      instance.setBitmap(value);
      return this;
    }
    /**
     * <pre>
     * A bitmap retrieved from a URL.
     * </pre>
     *
     * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
     */
    public Builder setBitmap(
        org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto.Builder builderForValue) {
      copyOnWrite();
      instance.setBitmap(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A bitmap retrieved from a URL.
     * </pre>
     *
     * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
     */
    public Builder mergeBitmap(org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto value) {
      copyOnWrite();
      instance.mergeBitmap(value);
      return this;
    }
    /**
     * <pre>
     * A bitmap retrieved from a URL.
     * </pre>
     *
     * <code>optional .autofill_assistant.BitmapDrawableProto bitmap = 2;</code>
     */
    public Builder clearBitmap() {
      copyOnWrite();
      instance.clearBitmap();
      return this;
    }

    /**
     * <pre>
     * A shape, e.g., a rounded rectangle.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
     */
    public boolean hasShape() {
      return instance.hasShape();
    }
    /**
     * <pre>
     * A shape, e.g., a rounded rectangle.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto getShape() {
      return instance.getShape();
    }
    /**
     * <pre>
     * A shape, e.g., a rounded rectangle.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
     */
    public Builder setShape(org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto value) {
      copyOnWrite();
      instance.setShape(value);
      return this;
    }
    /**
     * <pre>
     * A shape, e.g., a rounded rectangle.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
     */
    public Builder setShape(
        org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto.Builder builderForValue) {
      copyOnWrite();
      instance.setShape(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A shape, e.g., a rounded rectangle.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
     */
    public Builder mergeShape(org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto value) {
      copyOnWrite();
      instance.mergeShape(value);
      return this;
    }
    /**
     * <pre>
     * A shape, e.g., a rounded rectangle.
     * </pre>
     *
     * <code>optional .autofill_assistant.ShapeDrawableProto shape = 3;</code>
     */
    public Builder clearShape() {
      copyOnWrite();
      instance.clearShape();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.DrawableProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto other = (org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto) arg1;
        switch (other.getDrawableCase()) {
          case RESOURCE_IDENTIFIER: {
            drawable_ = visitor.visitOneofString(
               drawableCase_ == 1, drawable_, other.drawable_);
            break;
          }
          case BITMAP: {
            drawable_ = visitor.visitOneofMessage(
                drawableCase_ == 2,
                drawable_,
                other.drawable_);
            break;
          }
          case SHAPE: {
            drawable_ = visitor.visitOneofMessage(
                drawableCase_ == 3,
                drawable_,
                other.drawable_);
            break;
          }
          case DRAWABLE_NOT_SET: {
            visitor.visitOneofNotSet(drawableCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.drawableCase_ != 0) {
            drawableCase_ = other.drawableCase_;
          }
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                drawableCase_ = 1;
                drawable_ = s;
                break;
              }
              case 18: {
                org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto.Builder subBuilder = null;
                if (drawableCase_ == 2) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto) drawable_).toBuilder();
                }
                drawable_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.BitmapDrawableProto) drawable_);
                  drawable_ = subBuilder.buildPartial();
                }
                drawableCase_ = 2;
                break;
              }
              case 26: {
                org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto.Builder subBuilder = null;
                if (drawableCase_ == 3) {
                  subBuilder = ((org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto) drawable_).toBuilder();
                }
                drawable_ =
                     input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((org.chromium.chrome.browser.autofill_assistant.proto.ShapeDrawableProto) drawable_);
                  drawable_ = subBuilder.buildPartial();
                }
                drawableCase_ = 3;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.DrawableProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new DrawableProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.DrawableProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<DrawableProto> PARSER;

  public static com.google.protobuf.Parser<DrawableProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

