// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

package org.chromium.chrome.browser.autofill_assistant.proto;

/**
 * <pre>
 * Overlay image to be drawn on top of full overlays.
 * </pre>
 *
 * Protobuf type {@code autofill_assistant.OverlayImageProto}
 */
public  final class OverlayImageProto extends
    com.google.protobuf.GeneratedMessageLite<
        OverlayImageProto, OverlayImageProto.Builder> implements
    // @@protoc_insertion_point(message_implements:autofill_assistant.OverlayImageProto)
    OverlayImageProtoOrBuilder {
  private OverlayImageProto() {
    imageUrl_ = "";
    text_ = "";
    textColor_ = "";
  }
  private int bitField0_;
  public static final int IMAGE_URL_FIELD_NUMBER = 1;
  private java.lang.String imageUrl_;
  /**
   * <pre>
   * The image to display. If set, |image_size| is mandatory.
   * </pre>
   *
   * <code>optional string image_url = 1;</code>
   */
  public boolean hasImageUrl() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * The image to display. If set, |image_size| is mandatory.
   * </pre>
   *
   * <code>optional string image_url = 1;</code>
   */
  public java.lang.String getImageUrl() {
    return imageUrl_;
  }
  /**
   * <pre>
   * The image to display. If set, |image_size| is mandatory.
   * </pre>
   *
   * <code>optional string image_url = 1;</code>
   */
  public com.google.protobuf.ByteString
      getImageUrlBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(imageUrl_);
  }
  /**
   * <pre>
   * The image to display. If set, |image_size| is mandatory.
   * </pre>
   *
   * <code>optional string image_url = 1;</code>
   */
  private void setImageUrl(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    imageUrl_ = value;
  }
  /**
   * <pre>
   * The image to display. If set, |image_size| is mandatory.
   * </pre>
   *
   * <code>optional string image_url = 1;</code>
   */
  private void clearImageUrl() {
    bitField0_ = (bitField0_ & ~0x00000001);
    imageUrl_ = getDefaultInstance().getImageUrl();
  }
  /**
   * <pre>
   * The image to display. If set, |image_size| is mandatory.
   * </pre>
   *
   * <code>optional string image_url = 1;</code>
   */
  private void setImageUrlBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
    imageUrl_ = value.toStringUtf8();
  }

  public static final int IMAGE_SIZE_FIELD_NUMBER = 2;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto imageSize_;
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  public boolean hasImageSize() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageSize() {
    return imageSize_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : imageSize_;
  }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  private void setImageSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    imageSize_ = value;
    bitField0_ |= 0x00000002;
    }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  private void setImageSize(
      org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
    imageSize_ = builderForValue.build();
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  private void mergeImageSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    if (imageSize_ != null &&
        imageSize_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      imageSize_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(imageSize_).mergeFrom(value).buildPartial();
    } else {
      imageSize_ = value;
    }
    bitField0_ |= 0x00000002;
  }
  /**
   * <pre>
   * The size of the image to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
   */
  private void clearImageSize() {  imageSize_ = null;
    bitField0_ = (bitField0_ & ~0x00000002);
  }

  public static final int IMAGE_TOP_MARGIN_FIELD_NUMBER = 3;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto imageTopMargin_;
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  public boolean hasImageTopMargin() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageTopMargin() {
    return imageTopMargin_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : imageTopMargin_;
  }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  private void setImageTopMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    imageTopMargin_ = value;
    bitField0_ |= 0x00000004;
    }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  private void setImageTopMargin(
      org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
    imageTopMargin_ = builderForValue.build();
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  private void mergeImageTopMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    if (imageTopMargin_ != null &&
        imageTopMargin_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      imageTopMargin_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(imageTopMargin_).mergeFrom(value).buildPartial();
    } else {
      imageTopMargin_ = value;
    }
    bitField0_ |= 0x00000004;
  }
  /**
   * <pre>
   * The margin between the top of the page (anchor) and the image.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
   */
  private void clearImageTopMargin() {  imageTopMargin_ = null;
    bitField0_ = (bitField0_ & ~0x00000004);
  }

  public static final int IMAGE_BOTTOM_MARGIN_FIELD_NUMBER = 4;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto imageBottomMargin_;
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  public boolean hasImageBottomMargin() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageBottomMargin() {
    return imageBottomMargin_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : imageBottomMargin_;
  }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  private void setImageBottomMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    imageBottomMargin_ = value;
    bitField0_ |= 0x00000008;
    }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  private void setImageBottomMargin(
      org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
    imageBottomMargin_ = builderForValue.build();
    bitField0_ |= 0x00000008;
  }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  private void mergeImageBottomMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    if (imageBottomMargin_ != null &&
        imageBottomMargin_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      imageBottomMargin_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(imageBottomMargin_).mergeFrom(value).buildPartial();
    } else {
      imageBottomMargin_ = value;
    }
    bitField0_ |= 0x00000008;
  }
  /**
   * <pre>
   * The margin between the bottom of the image and the baseline of the text.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
   */
  private void clearImageBottomMargin() {  imageBottomMargin_ = null;
    bitField0_ = (bitField0_ & ~0x00000008);
  }

  public static final int TEXT_FIELD_NUMBER = 5;
  private java.lang.String text_;
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   */
  public boolean hasText() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   */
  public java.lang.String getText() {
    return text_;
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   */
  public com.google.protobuf.ByteString
      getTextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(text_);
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   */
  private void setText(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    text_ = value;
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   */
  private void clearText() {
    bitField0_ = (bitField0_ & ~0x00000010);
    text_ = getDefaultInstance().getText();
  }
  /**
   * <pre>
   * The text to display beneath the image. If set, |text_color| and |text_size|
   * are mandatory.
   * </pre>
   *
   * <code>optional string text = 5;</code>
   */
  private void setTextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
    text_ = value.toStringUtf8();
  }

  public static final int TEXT_COLOR_FIELD_NUMBER = 6;
  private java.lang.String textColor_;
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   */
  public boolean hasTextColor() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   */
  public java.lang.String getTextColor() {
    return textColor_;
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   */
  public com.google.protobuf.ByteString
      getTextColorBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(textColor_);
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   */
  private void setTextColor(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    textColor_ = value;
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   */
  private void clearTextColor() {
    bitField0_ = (bitField0_ & ~0x00000020);
    textColor_ = getDefaultInstance().getTextColor();
  }
  /**
   * <pre>
   * Supported formats: #RRGGBB or #AARRGGBB.
   * </pre>
   *
   * <code>optional string text_color = 6;</code>
   */
  private void setTextColorBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
    textColor_ = value.toStringUtf8();
  }

  public static final int TEXT_SIZE_FIELD_NUMBER = 7;
  private org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto textSize_;
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  public boolean hasTextSize() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getTextSize() {
    return textSize_ == null ? org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance() : textSize_;
  }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  private void setTextSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    if (value == null) {
      throw new NullPointerException();
    }
    textSize_ = value;
    bitField0_ |= 0x00000040;
    }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  private void setTextSize(
      org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
    textSize_ = builderForValue.build();
    bitField0_ |= 0x00000040;
  }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  private void mergeTextSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
    if (textSize_ != null &&
        textSize_ != org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.getDefaultInstance()) {
      textSize_ =
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.newBuilder(textSize_).mergeFrom(value).buildPartial();
    } else {
      textSize_ = value;
    }
    bitField0_ |= 0x00000040;
  }
  /**
   * <pre>
   * The size of the text to display.
   * </pre>
   *
   * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
   */
  private void clearTextSize() {  textSize_ = null;
    bitField0_ = (bitField0_ & ~0x00000040);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeString(1, getImageUrl());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeMessage(2, getImageSize());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeMessage(3, getImageTopMargin());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeMessage(4, getImageBottomMargin());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeString(5, getText());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeString(6, getTextColor());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeMessage(7, getTextSize());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getImageUrl());
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getImageSize());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getImageTopMargin());
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getImageBottomMargin());
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getText());
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(6, getTextColor());
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getTextSize());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Overlay image to be drawn on top of full overlays.
   * </pre>
   *
   * Protobuf type {@code autofill_assistant.OverlayImageProto}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto, Builder> implements
      // @@protoc_insertion_point(builder_implements:autofill_assistant.OverlayImageProto)
      org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProtoOrBuilder {
    // Construct using org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The image to display. If set, |image_size| is mandatory.
     * </pre>
     *
     * <code>optional string image_url = 1;</code>
     */
    public boolean hasImageUrl() {
      return instance.hasImageUrl();
    }
    /**
     * <pre>
     * The image to display. If set, |image_size| is mandatory.
     * </pre>
     *
     * <code>optional string image_url = 1;</code>
     */
    public java.lang.String getImageUrl() {
      return instance.getImageUrl();
    }
    /**
     * <pre>
     * The image to display. If set, |image_size| is mandatory.
     * </pre>
     *
     * <code>optional string image_url = 1;</code>
     */
    public com.google.protobuf.ByteString
        getImageUrlBytes() {
      return instance.getImageUrlBytes();
    }
    /**
     * <pre>
     * The image to display. If set, |image_size| is mandatory.
     * </pre>
     *
     * <code>optional string image_url = 1;</code>
     */
    public Builder setImageUrl(
        java.lang.String value) {
      copyOnWrite();
      instance.setImageUrl(value);
      return this;
    }
    /**
     * <pre>
     * The image to display. If set, |image_size| is mandatory.
     * </pre>
     *
     * <code>optional string image_url = 1;</code>
     */
    public Builder clearImageUrl() {
      copyOnWrite();
      instance.clearImageUrl();
      return this;
    }
    /**
     * <pre>
     * The image to display. If set, |image_size| is mandatory.
     * </pre>
     *
     * <code>optional string image_url = 1;</code>
     */
    public Builder setImageUrlBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setImageUrlBytes(value);
      return this;
    }

    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public boolean hasImageSize() {
      return instance.hasImageSize();
    }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageSize() {
      return instance.getImageSize();
    }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public Builder setImageSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setImageSize(value);
      return this;
      }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public Builder setImageSize(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageSize(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public Builder mergeImageSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeImageSize(value);
      return this;
    }
    /**
     * <pre>
     * The size of the image to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_size = 2;</code>
     */
    public Builder clearImageSize() {  copyOnWrite();
      instance.clearImageSize();
      return this;
    }

    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public boolean hasImageTopMargin() {
      return instance.hasImageTopMargin();
    }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageTopMargin() {
      return instance.getImageTopMargin();
    }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public Builder setImageTopMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setImageTopMargin(value);
      return this;
      }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public Builder setImageTopMargin(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageTopMargin(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public Builder mergeImageTopMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeImageTopMargin(value);
      return this;
    }
    /**
     * <pre>
     * The margin between the top of the page (anchor) and the image.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_top_margin = 3;</code>
     */
    public Builder clearImageTopMargin() {  copyOnWrite();
      instance.clearImageTopMargin();
      return this;
    }

    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public boolean hasImageBottomMargin() {
      return instance.hasImageBottomMargin();
    }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getImageBottomMargin() {
      return instance.getImageBottomMargin();
    }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public Builder setImageBottomMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setImageBottomMargin(value);
      return this;
      }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public Builder setImageBottomMargin(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setImageBottomMargin(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public Builder mergeImageBottomMargin(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeImageBottomMargin(value);
      return this;
    }
    /**
     * <pre>
     * The margin between the bottom of the image and the baseline of the text.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto image_bottom_margin = 4;</code>
     */
    public Builder clearImageBottomMargin() {  copyOnWrite();
      instance.clearImageBottomMargin();
      return this;
    }

    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     */
    public boolean hasText() {
      return instance.hasText();
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     */
    public java.lang.String getText() {
      return instance.getText();
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      return instance.getTextBytes();
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     */
    public Builder setText(
        java.lang.String value) {
      copyOnWrite();
      instance.setText(value);
      return this;
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     */
    public Builder clearText() {
      copyOnWrite();
      instance.clearText();
      return this;
    }
    /**
     * <pre>
     * The text to display beneath the image. If set, |text_color| and |text_size|
     * are mandatory.
     * </pre>
     *
     * <code>optional string text = 5;</code>
     */
    public Builder setTextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTextBytes(value);
      return this;
    }

    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     */
    public boolean hasTextColor() {
      return instance.hasTextColor();
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     */
    public java.lang.String getTextColor() {
      return instance.getTextColor();
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     */
    public com.google.protobuf.ByteString
        getTextColorBytes() {
      return instance.getTextColorBytes();
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     */
    public Builder setTextColor(
        java.lang.String value) {
      copyOnWrite();
      instance.setTextColor(value);
      return this;
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     */
    public Builder clearTextColor() {
      copyOnWrite();
      instance.clearTextColor();
      return this;
    }
    /**
     * <pre>
     * Supported formats: #RRGGBB or #AARRGGBB.
     * </pre>
     *
     * <code>optional string text_color = 6;</code>
     */
    public Builder setTextColorBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTextColorBytes(value);
      return this;
    }

    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public boolean hasTextSize() {
      return instance.hasTextSize();
    }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto getTextSize() {
      return instance.getTextSize();
    }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public Builder setTextSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.setTextSize(value);
      return this;
      }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public Builder setTextSize(
        org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder builderForValue) {
      copyOnWrite();
      instance.setTextSize(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public Builder mergeTextSize(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto value) {
      copyOnWrite();
      instance.mergeTextSize(value);
      return this;
    }
    /**
     * <pre>
     * The size of the text to display.
     * </pre>
     *
     * <code>optional .autofill_assistant.ClientDimensionProto text_size = 7;</code>
     */
    public Builder clearTextSize() {  copyOnWrite();
      instance.clearTextSize();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:autofill_assistant.OverlayImageProto)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto other = (org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto) arg1;
        imageUrl_ = visitor.visitString(
            hasImageUrl(), imageUrl_,
            other.hasImageUrl(), other.imageUrl_);
        imageSize_ = visitor.visitMessage(imageSize_, other.imageSize_);
        imageTopMargin_ = visitor.visitMessage(imageTopMargin_, other.imageTopMargin_);
        imageBottomMargin_ = visitor.visitMessage(imageBottomMargin_, other.imageBottomMargin_);
        text_ = visitor.visitString(
            hasText(), text_,
            other.hasText(), other.text_);
        textColor_ = visitor.visitString(
            hasTextColor(), textColor_,
            other.hasTextColor(), other.textColor_);
        textSize_ = visitor.visitMessage(textSize_, other.textSize_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(tag, input)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readString();
                bitField0_ |= 0x00000001;
                imageUrl_ = s;
                break;
              }
              case 18: {
                org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = imageSize_.toBuilder();
                }
                imageSize_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(imageSize_);
                  imageSize_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                  subBuilder = imageTopMargin_.toBuilder();
                }
                imageTopMargin_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(imageTopMargin_);
                  imageTopMargin_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000004;
                break;
              }
              case 34: {
                org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = imageBottomMargin_.toBuilder();
                }
                imageBottomMargin_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(imageBottomMargin_);
                  imageBottomMargin_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
              case 42: {
                String s = input.readString();
                bitField0_ |= 0x00000010;
                text_ = s;
                break;
              }
              case 50: {
                String s = input.readString();
                bitField0_ |= 0x00000020;
                textColor_ = s;
                break;
              }
              case 58: {
                org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.Builder subBuilder = null;
                if (((bitField0_ & 0x00000040) == 0x00000040)) {
                  subBuilder = textSize_.toBuilder();
                }
                textSize_ = input.readMessage(org.chromium.chrome.browser.autofill_assistant.proto.ClientDimensionProto.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textSize_);
                  textSize_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000040;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:autofill_assistant.OverlayImageProto)
  private static final org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new OverlayImageProto();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static org.chromium.chrome.browser.autofill_assistant.proto.OverlayImageProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<OverlayImageProto> PARSER;

  public static com.google.protobuf.Parser<OverlayImageProto> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

