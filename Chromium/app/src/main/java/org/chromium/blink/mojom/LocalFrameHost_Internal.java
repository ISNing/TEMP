// LocalFrameHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class LocalFrameHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<LocalFrameHost, LocalFrameHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<LocalFrameHost, LocalFrameHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.LocalFrameHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, LocalFrameHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public LocalFrameHost[] buildArray(int size) {
          return new LocalFrameHost[size];
        }
    };


    private static final int ENTER_FULLSCREEN_ORDINAL = 0;

    private static final int EXIT_FULLSCREEN_ORDINAL = 1;

    private static final int FULLSCREEN_STATE_CHANGED_ORDINAL = 2;

    private static final int REGISTER_PROTOCOL_HANDLER_ORDINAL = 3;

    private static final int UNREGISTER_PROTOCOL_HANDLER_ORDINAL = 4;

    private static final int DID_DISPLAY_INSECURE_CONTENT_ORDINAL = 5;

    private static final int DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL = 6;

    private static final int SET_NEEDS_OCCLUSION_TRACKING_ORDINAL = 7;

    private static final int LIFECYCLE_STATE_CHANGED_ORDINAL = 8;

    private static final int EVICT_FROM_BACK_FORWARD_CACHE_ORDINAL = 9;

    private static final int VISIBILITY_CHANGED_ORDINAL = 10;

    private static final int DID_CHANGE_THEME_COLOR_ORDINAL = 11;

    private static final int DID_FOCUS_FRAME_ORDINAL = 12;

    private static final int ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL = 13;

    private static final int ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL = 14;

    private static final int DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL = 15;

    private static final int SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL = 16;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements LocalFrameHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void enterFullscreen(
FullscreenOptions options) {

            LocalFrameHostEnterFullscreenParams _message = new LocalFrameHostEnterFullscreenParams();

            _message.options = options;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENTER_FULLSCREEN_ORDINAL)));

        }


        @Override
        public void exitFullscreen(
) {

            LocalFrameHostExitFullscreenParams _message = new LocalFrameHostExitFullscreenParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(EXIT_FULLSCREEN_ORDINAL)));

        }


        @Override
        public void fullscreenStateChanged(
boolean isFullscreen) {

            LocalFrameHostFullscreenStateChangedParams _message = new LocalFrameHostFullscreenStateChangedParams();

            _message.isFullscreen = isFullscreen;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FULLSCREEN_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void registerProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, org.chromium.mojo_base.mojom.String16 title, boolean userGesture) {

            LocalFrameHostRegisterProtocolHandlerParams _message = new LocalFrameHostRegisterProtocolHandlerParams();

            _message.scheme = scheme;

            _message.url = url;

            _message.title = title;

            _message.userGesture = userGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REGISTER_PROTOCOL_HANDLER_ORDINAL)));

        }


        @Override
        public void unregisterProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, boolean userGesture) {

            LocalFrameHostUnregisterProtocolHandlerParams _message = new LocalFrameHostUnregisterProtocolHandlerParams();

            _message.scheme = scheme;

            _message.url = url;

            _message.userGesture = userGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UNREGISTER_PROTOCOL_HANDLER_ORDINAL)));

        }


        @Override
        public void didDisplayInsecureContent(
) {

            LocalFrameHostDidDisplayInsecureContentParams _message = new LocalFrameHostDidDisplayInsecureContentParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_DISPLAY_INSECURE_CONTENT_ORDINAL)));

        }


        @Override
        public void didContainInsecureFormAction(
) {

            LocalFrameHostDidContainInsecureFormActionParams _message = new LocalFrameHostDidContainInsecureFormActionParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL)));

        }


        @Override
        public void setNeedsOcclusionTracking(
boolean needsTracking) {

            LocalFrameHostSetNeedsOcclusionTrackingParams _message = new LocalFrameHostSetNeedsOcclusionTrackingParams();

            _message.needsTracking = needsTracking;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_NEEDS_OCCLUSION_TRACKING_ORDINAL)));

        }


        @Override
        public void lifecycleStateChanged(
int state) {

            LocalFrameHostLifecycleStateChangedParams _message = new LocalFrameHostLifecycleStateChangedParams();

            _message.state = state;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(LIFECYCLE_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void evictFromBackForwardCache(
) {

            LocalFrameHostEvictFromBackForwardCacheParams _message = new LocalFrameHostEvictFromBackForwardCacheParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(EVICT_FROM_BACK_FORWARD_CACHE_ORDINAL)));

        }


        @Override
        public void visibilityChanged(
int visibility) {

            LocalFrameHostVisibilityChangedParams _message = new LocalFrameHostVisibilityChangedParams();

            _message.visibility = visibility;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(VISIBILITY_CHANGED_ORDINAL)));

        }


        @Override
        public void didChangeThemeColor(
org.chromium.skia.mojom.SkColor themeColor) {

            LocalFrameHostDidChangeThemeColorParams _message = new LocalFrameHostDidChangeThemeColorParams();

            _message.themeColor = themeColor;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_THEME_COLOR_ORDINAL)));

        }


        @Override
        public void didFocusFrame(
) {

            LocalFrameHostDidFocusFrameParams _message = new LocalFrameHostDidFocusFrameParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FOCUS_FRAME_ORDINAL)));

        }


        @Override
        public void enforceInsecureRequestPolicy(
byte policyBitmap) {

            LocalFrameHostEnforceInsecureRequestPolicyParams _message = new LocalFrameHostEnforceInsecureRequestPolicyParams();

            _message.policyBitmap = policyBitmap;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL)));

        }


        @Override
        public void enforceInsecureNavigationsSet(
int[] set) {

            LocalFrameHostEnforceInsecureNavigationsSetParams _message = new LocalFrameHostEnforceInsecureNavigationsSetParams();

            _message.set = set;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL)));

        }


        @Override
        public void didChangeActiveSchedulerTrackedFeatures(
long featuresMask) {

            LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams _message = new LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams();

            _message.featuresMask = featuresMask;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL)));

        }


        @Override
        public void suddenTerminationDisablerChanged(
boolean present, int disablerType) {

            LocalFrameHostSuddenTerminationDisablerChangedParams _message = new LocalFrameHostSuddenTerminationDisablerChangedParams();

            _message.present = present;

            _message.disablerType = disablerType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<LocalFrameHost> {

        Stub(org.chromium.mojo.system.Core core, LocalFrameHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                LocalFrameHost_Internal.MANAGER, messageWithHeader);





                    case ENTER_FULLSCREEN_ORDINAL: {

                        LocalFrameHostEnterFullscreenParams data =
                                LocalFrameHostEnterFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enterFullscreen(data.options);
                        return true;
                    }





                    case EXIT_FULLSCREEN_ORDINAL: {

                        LocalFrameHostExitFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().exitFullscreen();
                        return true;
                    }





                    case FULLSCREEN_STATE_CHANGED_ORDINAL: {

                        LocalFrameHostFullscreenStateChangedParams data =
                                LocalFrameHostFullscreenStateChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().fullscreenStateChanged(data.isFullscreen);
                        return true;
                    }





                    case REGISTER_PROTOCOL_HANDLER_ORDINAL: {

                        LocalFrameHostRegisterProtocolHandlerParams data =
                                LocalFrameHostRegisterProtocolHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().registerProtocolHandler(data.scheme, data.url, data.title, data.userGesture);
                        return true;
                    }





                    case UNREGISTER_PROTOCOL_HANDLER_ORDINAL: {

                        LocalFrameHostUnregisterProtocolHandlerParams data =
                                LocalFrameHostUnregisterProtocolHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().unregisterProtocolHandler(data.scheme, data.url, data.userGesture);
                        return true;
                    }





                    case DID_DISPLAY_INSECURE_CONTENT_ORDINAL: {

                        LocalFrameHostDidDisplayInsecureContentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didDisplayInsecureContent();
                        return true;
                    }





                    case DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL: {

                        LocalFrameHostDidContainInsecureFormActionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didContainInsecureFormAction();
                        return true;
                    }





                    case SET_NEEDS_OCCLUSION_TRACKING_ORDINAL: {

                        LocalFrameHostSetNeedsOcclusionTrackingParams data =
                                LocalFrameHostSetNeedsOcclusionTrackingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setNeedsOcclusionTracking(data.needsTracking);
                        return true;
                    }





                    case LIFECYCLE_STATE_CHANGED_ORDINAL: {

                        LocalFrameHostLifecycleStateChangedParams data =
                                LocalFrameHostLifecycleStateChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().lifecycleStateChanged(data.state);
                        return true;
                    }





                    case EVICT_FROM_BACK_FORWARD_CACHE_ORDINAL: {

                        LocalFrameHostEvictFromBackForwardCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().evictFromBackForwardCache();
                        return true;
                    }





                    case VISIBILITY_CHANGED_ORDINAL: {

                        LocalFrameHostVisibilityChangedParams data =
                                LocalFrameHostVisibilityChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().visibilityChanged(data.visibility);
                        return true;
                    }





                    case DID_CHANGE_THEME_COLOR_ORDINAL: {

                        LocalFrameHostDidChangeThemeColorParams data =
                                LocalFrameHostDidChangeThemeColorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeThemeColor(data.themeColor);
                        return true;
                    }





                    case DID_FOCUS_FRAME_ORDINAL: {

                        LocalFrameHostDidFocusFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFocusFrame();
                        return true;
                    }





                    case ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL: {

                        LocalFrameHostEnforceInsecureRequestPolicyParams data =
                                LocalFrameHostEnforceInsecureRequestPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureRequestPolicy(data.policyBitmap);
                        return true;
                    }





                    case ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL: {

                        LocalFrameHostEnforceInsecureNavigationsSetParams data =
                                LocalFrameHostEnforceInsecureNavigationsSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureNavigationsSet(data.set);
                        return true;
                    }





                    case DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL: {

                        LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams data =
                                LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeActiveSchedulerTrackedFeatures(data.featuresMask);
                        return true;
                    }





                    case SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL: {

                        LocalFrameHostSuddenTerminationDisablerChangedParams data =
                                LocalFrameHostSuddenTerminationDisablerChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().suddenTerminationDisablerChanged(data.present, data.disablerType);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), LocalFrameHost_Internal.MANAGER, messageWithHeader, receiver);




































                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class LocalFrameHostEnterFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FullscreenOptions options;

        private LocalFrameHostEnterFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnterFullscreenParams() {
            this(0);
        }

        public static LocalFrameHostEnterFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnterFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnterFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnterFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnterFullscreenParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.options = FullscreenOptions.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.options, 8, false);
        }
    }



    
    static final class LocalFrameHostExitFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostExitFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostExitFullscreenParams() {
            this(0);
        }

        public static LocalFrameHostExitFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostExitFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostExitFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostExitFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostExitFullscreenParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostFullscreenStateChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isFullscreen;

        private LocalFrameHostFullscreenStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostFullscreenStateChangedParams() {
            this(0);
        }

        public static LocalFrameHostFullscreenStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostFullscreenStateChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostFullscreenStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostFullscreenStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostFullscreenStateChangedParams(elementsOrVersion);
                    {
                        
                    result.isFullscreen = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isFullscreen, 8, 0);
        }
    }



    
    static final class LocalFrameHostRegisterProtocolHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String scheme;
        public org.chromium.url.mojom.Url url;
        public org.chromium.mojo_base.mojom.String16 title;
        public boolean userGesture;

        private LocalFrameHostRegisterProtocolHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRegisterProtocolHandlerParams() {
            this(0);
        }

        public static LocalFrameHostRegisterProtocolHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRegisterProtocolHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRegisterProtocolHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRegisterProtocolHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRegisterProtocolHandlerParams(elementsOrVersion);
                    {
                        
                    result.scheme = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.title = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(32, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scheme, 8, false);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.title, 24, false);
            
            encoder0.encode(this.userGesture, 32, 0);
        }
    }



    
    static final class LocalFrameHostUnregisterProtocolHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String scheme;
        public org.chromium.url.mojom.Url url;
        public boolean userGesture;

        private LocalFrameHostUnregisterProtocolHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUnregisterProtocolHandlerParams() {
            this(0);
        }

        public static LocalFrameHostUnregisterProtocolHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUnregisterProtocolHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUnregisterProtocolHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUnregisterProtocolHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUnregisterProtocolHandlerParams(elementsOrVersion);
                    {
                        
                    result.scheme = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(24, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scheme, 8, false);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.userGesture, 24, 0);
        }
    }



    
    static final class LocalFrameHostDidDisplayInsecureContentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidDisplayInsecureContentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidDisplayInsecureContentParams() {
            this(0);
        }

        public static LocalFrameHostDidDisplayInsecureContentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidDisplayInsecureContentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidDisplayInsecureContentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidDisplayInsecureContentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidDisplayInsecureContentParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidContainInsecureFormActionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidContainInsecureFormActionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidContainInsecureFormActionParams() {
            this(0);
        }

        public static LocalFrameHostDidContainInsecureFormActionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidContainInsecureFormActionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidContainInsecureFormActionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidContainInsecureFormActionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidContainInsecureFormActionParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostSetNeedsOcclusionTrackingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean needsTracking;

        private LocalFrameHostSetNeedsOcclusionTrackingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSetNeedsOcclusionTrackingParams() {
            this(0);
        }

        public static LocalFrameHostSetNeedsOcclusionTrackingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSetNeedsOcclusionTrackingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSetNeedsOcclusionTrackingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSetNeedsOcclusionTrackingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSetNeedsOcclusionTrackingParams(elementsOrVersion);
                    {
                        
                    result.needsTracking = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.needsTracking, 8, 0);
        }
    }



    
    static final class LocalFrameHostLifecycleStateChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int state;

        private LocalFrameHostLifecycleStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostLifecycleStateChangedParams() {
            this(0);
        }

        public static LocalFrameHostLifecycleStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostLifecycleStateChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostLifecycleStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostLifecycleStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostLifecycleStateChangedParams(elementsOrVersion);
                    {
                        
                    result.state = decoder0.readInt(8);
                        FrameLifecycleState.validate(result.state);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.state, 8);
        }
    }



    
    static final class LocalFrameHostEvictFromBackForwardCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostEvictFromBackForwardCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEvictFromBackForwardCacheParams() {
            this(0);
        }

        public static LocalFrameHostEvictFromBackForwardCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEvictFromBackForwardCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEvictFromBackForwardCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEvictFromBackForwardCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEvictFromBackForwardCacheParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostVisibilityChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int visibility;

        private LocalFrameHostVisibilityChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostVisibilityChangedParams() {
            this(0);
        }

        public static LocalFrameHostVisibilityChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostVisibilityChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostVisibilityChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostVisibilityChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostVisibilityChangedParams(elementsOrVersion);
                    {
                        
                    result.visibility = decoder0.readInt(8);
                        FrameVisibility.validate(result.visibility);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.visibility, 8);
        }
    }



    
    static final class LocalFrameHostDidChangeThemeColorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.skia.mojom.SkColor themeColor;

        private LocalFrameHostDidChangeThemeColorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeThemeColorParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeThemeColorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeThemeColorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeThemeColorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeThemeColorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeThemeColorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.themeColor = org.chromium.skia.mojom.SkColor.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.themeColor, 8, true);
        }
    }



    
    static final class LocalFrameHostDidFocusFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidFocusFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFocusFrameParams() {
            this(0);
        }

        public static LocalFrameHostDidFocusFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFocusFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFocusFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFocusFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFocusFrameParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostEnforceInsecureRequestPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public byte policyBitmap;

        private LocalFrameHostEnforceInsecureRequestPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnforceInsecureRequestPolicyParams() {
            this(0);
        }

        public static LocalFrameHostEnforceInsecureRequestPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnforceInsecureRequestPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnforceInsecureRequestPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnforceInsecureRequestPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnforceInsecureRequestPolicyParams(elementsOrVersion);
                    {
                        
                    result.policyBitmap = decoder0.readByte(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.policyBitmap, 8);
        }
    }



    
    static final class LocalFrameHostEnforceInsecureNavigationsSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] set;

        private LocalFrameHostEnforceInsecureNavigationsSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnforceInsecureNavigationsSetParams() {
            this(0);
        }

        public static LocalFrameHostEnforceInsecureNavigationsSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnforceInsecureNavigationsSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnforceInsecureNavigationsSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnforceInsecureNavigationsSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnforceInsecureNavigationsSetParams(elementsOrVersion);
                    {
                        
                    result.set = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.set, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long featuresMask;

        private LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams(elementsOrVersion);
                    {
                        
                    result.featuresMask = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.featuresMask, 8);
        }
    }



    
    static final class LocalFrameHostSuddenTerminationDisablerChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean present;
        public int disablerType;

        private LocalFrameHostSuddenTerminationDisablerChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSuddenTerminationDisablerChangedParams() {
            this(0);
        }

        public static LocalFrameHostSuddenTerminationDisablerChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSuddenTerminationDisablerChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSuddenTerminationDisablerChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSuddenTerminationDisablerChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSuddenTerminationDisablerChangedParams(elementsOrVersion);
                    {
                        
                    result.present = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.disablerType = decoder0.readInt(12);
                        SuddenTerminationDisablerType.validate(result.disablerType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.present, 8, 0);
            
            encoder0.encode(this.disablerType, 12);
        }
    }



}
