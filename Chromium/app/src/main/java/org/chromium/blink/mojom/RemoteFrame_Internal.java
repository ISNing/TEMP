// RemoteFrame_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class RemoteFrame_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<RemoteFrame, RemoteFrame.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<RemoteFrame, RemoteFrame.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.RemoteFrame";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, RemoteFrame impl) {
            return new Stub(core, impl);
        }

        @Override
        public RemoteFrame[] buildArray(int size) {
          return new RemoteFrame[size];
        }
    };


    private static final int WILL_ENTER_FULLSCREEN_ORDINAL = 0;

    private static final int RESET_REPLICATED_CONTENT_SECURITY_POLICY_ORDINAL = 1;

    private static final int ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL = 2;

    private static final int SET_REPLICATED_ORIGIN_ORDINAL = 3;

    private static final int DISPATCH_LOAD_EVENT_FOR_FRAME_OWNER_ORDINAL = 4;

    private static final int COLLAPSE_ORDINAL = 5;

    private static final int FOCUS_ORDINAL = 6;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements RemoteFrame.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void willEnterFullscreen(
) {

            RemoteFrameWillEnterFullscreenParams _message = new RemoteFrameWillEnterFullscreenParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(WILL_ENTER_FULLSCREEN_ORDINAL)));

        }


        @Override
        public void resetReplicatedContentSecurityPolicy(
) {

            RemoteFrameResetReplicatedContentSecurityPolicyParams _message = new RemoteFrameResetReplicatedContentSecurityPolicyParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RESET_REPLICATED_CONTENT_SECURITY_POLICY_ORDINAL)));

        }


        @Override
        public void enforceInsecureNavigationsSet(
int[] set) {

            RemoteFrameEnforceInsecureNavigationsSetParams _message = new RemoteFrameEnforceInsecureNavigationsSetParams();

            _message.set = set;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL)));

        }


        @Override
        public void setReplicatedOrigin(
org.chromium.url.internal.mojom.Origin origin, boolean isPotentiallyTrustworthyUniqueOrigin) {

            RemoteFrameSetReplicatedOriginParams _message = new RemoteFrameSetReplicatedOriginParams();

            _message.origin = origin;

            _message.isPotentiallyTrustworthyUniqueOrigin = isPotentiallyTrustworthyUniqueOrigin;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_REPLICATED_ORIGIN_ORDINAL)));

        }


        @Override
        public void dispatchLoadEventForFrameOwner(
) {

            RemoteFrameDispatchLoadEventForFrameOwnerParams _message = new RemoteFrameDispatchLoadEventForFrameOwnerParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISPATCH_LOAD_EVENT_FOR_FRAME_OWNER_ORDINAL)));

        }


        @Override
        public void collapse(
boolean collapsed) {

            RemoteFrameCollapseParams _message = new RemoteFrameCollapseParams();

            _message.collapsed = collapsed;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(COLLAPSE_ORDINAL)));

        }


        @Override
        public void focus(
) {

            RemoteFrameFocusParams _message = new RemoteFrameFocusParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FOCUS_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<RemoteFrame> {

        Stub(org.chromium.mojo.system.Core core, RemoteFrame impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                RemoteFrame_Internal.MANAGER, messageWithHeader);





                    case WILL_ENTER_FULLSCREEN_ORDINAL: {

                        RemoteFrameWillEnterFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().willEnterFullscreen();
                        return true;
                    }





                    case RESET_REPLICATED_CONTENT_SECURITY_POLICY_ORDINAL: {

                        RemoteFrameResetReplicatedContentSecurityPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().resetReplicatedContentSecurityPolicy();
                        return true;
                    }





                    case ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL: {

                        RemoteFrameEnforceInsecureNavigationsSetParams data =
                                RemoteFrameEnforceInsecureNavigationsSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureNavigationsSet(data.set);
                        return true;
                    }





                    case SET_REPLICATED_ORIGIN_ORDINAL: {

                        RemoteFrameSetReplicatedOriginParams data =
                                RemoteFrameSetReplicatedOriginParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setReplicatedOrigin(data.origin, data.isPotentiallyTrustworthyUniqueOrigin);
                        return true;
                    }





                    case DISPATCH_LOAD_EVENT_FOR_FRAME_OWNER_ORDINAL: {

                        RemoteFrameDispatchLoadEventForFrameOwnerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dispatchLoadEventForFrameOwner();
                        return true;
                    }





                    case COLLAPSE_ORDINAL: {

                        RemoteFrameCollapseParams data =
                                RemoteFrameCollapseParams.deserialize(messageWithHeader.getPayload());

                        getImpl().collapse(data.collapsed);
                        return true;
                    }





                    case FOCUS_ORDINAL: {

                        RemoteFrameFocusParams.deserialize(messageWithHeader.getPayload());

                        getImpl().focus();
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), RemoteFrame_Internal.MANAGER, messageWithHeader, receiver);
















                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class RemoteFrameWillEnterFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameWillEnterFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameWillEnterFullscreenParams() {
            this(0);
        }

        public static RemoteFrameWillEnterFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameWillEnterFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameWillEnterFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameWillEnterFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameWillEnterFullscreenParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameResetReplicatedContentSecurityPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameResetReplicatedContentSecurityPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameResetReplicatedContentSecurityPolicyParams() {
            this(0);
        }

        public static RemoteFrameResetReplicatedContentSecurityPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameResetReplicatedContentSecurityPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameResetReplicatedContentSecurityPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameResetReplicatedContentSecurityPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameResetReplicatedContentSecurityPolicyParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameEnforceInsecureNavigationsSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] set;

        private RemoteFrameEnforceInsecureNavigationsSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameEnforceInsecureNavigationsSetParams() {
            this(0);
        }

        public static RemoteFrameEnforceInsecureNavigationsSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameEnforceInsecureNavigationsSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameEnforceInsecureNavigationsSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameEnforceInsecureNavigationsSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameEnforceInsecureNavigationsSetParams(elementsOrVersion);
                    {
                        
                    result.set = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.set, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class RemoteFrameSetReplicatedOriginParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.internal.mojom.Origin origin;
        public boolean isPotentiallyTrustworthyUniqueOrigin;

        private RemoteFrameSetReplicatedOriginParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameSetReplicatedOriginParams() {
            this(0);
        }

        public static RemoteFrameSetReplicatedOriginParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameSetReplicatedOriginParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameSetReplicatedOriginParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameSetReplicatedOriginParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameSetReplicatedOriginParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.origin = org.chromium.url.internal.mojom.Origin.decode(decoder1);
                    }
                    {
                        
                    result.isPotentiallyTrustworthyUniqueOrigin = decoder0.readBoolean(16, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.origin, 8, false);
            
            encoder0.encode(this.isPotentiallyTrustworthyUniqueOrigin, 16, 0);
        }
    }



    
    static final class RemoteFrameDispatchLoadEventForFrameOwnerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameDispatchLoadEventForFrameOwnerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameDispatchLoadEventForFrameOwnerParams() {
            this(0);
        }

        public static RemoteFrameDispatchLoadEventForFrameOwnerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameDispatchLoadEventForFrameOwnerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameDispatchLoadEventForFrameOwnerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameDispatchLoadEventForFrameOwnerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameDispatchLoadEventForFrameOwnerParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class RemoteFrameCollapseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean collapsed;

        private RemoteFrameCollapseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameCollapseParams() {
            this(0);
        }

        public static RemoteFrameCollapseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameCollapseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameCollapseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameCollapseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameCollapseParams(elementsOrVersion);
                    {
                        
                    result.collapsed = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.collapsed, 8, 0);
        }
    }



    
    static final class RemoteFrameFocusParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private RemoteFrameFocusParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public RemoteFrameFocusParams() {
            this(0);
        }

        public static RemoteFrameFocusParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RemoteFrameFocusParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static RemoteFrameFocusParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RemoteFrameFocusParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new RemoteFrameFocusParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



}
